{"version":3,"sources":["bezierInterp.js","drawData.js","sketch.js","App.js","serviceWorker.js","index.js"],"names":["DrawSmooth","points","pos","controlPoint","current","previous","next","reverse","o","pointA","pointB","lengthX","lengthY","length","Math","sqrt","pow","angle","atan2","line","PI","cos","sin","command","d","reduce","acc","point","i","a","fill","stroke","svgPath","cpsX","cpsY","cpeX","cpeY","getRectangleSVG","key","topLeftPoint","width","height","strokeColor","strokeWidth","radius","x","y","rx","GetDrawData","console","log","drawData","numPoints","neg","spacing","wavePoints","negWavePoints","rectangles","bars","glass","betweenGlass","values","drawBoxHeight","drawBoxWidth","allBarValues","drawBarHeights","viewHeightMultiplier","value","modCashFlows","push","sort","b","barWidth","barPadX","glassPad","min","doubleGlassPad","barPosX","barCanvas","canvasHeight","window","innerHeight","canvasWidth","updateData","animDrawData","Sketch","React","useState","testVar","aTestPath","setATestPath","spring","from","to","stiffness","damping","start","v","style","background","viewBox","name","onClick","runSpring","currentCFValue","cashFlows","initialInvest","cashFlowString","App","r","setr","theNpv","setNpv","type","onChange","event","findNPV","target","max","step","strungOut","entry","toString","initialInvestValue","rDec","npv","flow","powerOf","parseInt","discountedFlow","toFixed","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9383fafd.chunk.js","sourcesContent":["import React from 'react';\r\n//import { motion, useSpring, use } from 'framer-motion';\r\n\r\n\r\n\r\nfunction DrawSmooth (points, pos) {\r\n    \r\n    \r\n    //const points = points;\r\n    const svgPath = (points, command) => {\r\n        // build the d attributes by looping over the points\r\n        const d = points.reduce((acc, point, i, a) => i === 0\r\n        // if first point\r\n        ? `M ${point[0]},${point[1]}`\r\n        // else\r\n        : `${acc} ${command(point, i, a)}`\r\n        , '')\r\n        if (pos) {\r\n            return <path d={d} fill=\"none\" stroke=\"blue   \" />\r\n        }\r\n        return <path d={d} fill=\"none\" stroke=\"red   \" />\r\n    }\r\n\r\n    const line = (pointA, pointB) => {\r\n        const lengthX = pointB[0] - pointA[0]\r\n        const lengthY = pointB[1] - pointA[1]\r\n        return {\r\n        length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\r\n        angle: Math.atan2(lengthY, lengthX)\r\n        }\r\n    }\r\n    \r\n    const controlPoint = (current, previous, next, reverse) => {\r\n        // When 'current' is the first or last point of the array\r\n        // 'previous' or 'next' don't exist.\r\n        // Replace with 'current'\r\n        const p = previous || current\r\n        const n = next || current\r\n        // The smoothing ratio\r\n        const smoothing = 0.2\r\n        // Properties of the opposed-line\r\n        const o = line(p, n)\r\n        // If is end-control-point, add PI to the angle to go backward\r\n        const angle = o.angle + (reverse ? Math.PI : 0)\r\n        const length = o.length * smoothing\r\n        // The control point position is relative to the current point\r\n        const x = current[0] + Math.cos(angle) * length\r\n        const y = current[1] + Math.sin(angle) * length\r\n        return [x, y]\r\n    }\r\n\r\n    const bezierCommand = (point, i, a) => {\r\n        // start control point\r\n        const [cpsX, cpsY] = controlPoint(a[i - 1], a[i - 2], point)\r\n        // end control point\r\n        const [cpeX, cpeY] = controlPoint(point, a[i - 1], a[i + 1], true)\r\n        return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${point[0]},${point[1]}`\r\n    }\r\n    return (svgPath(points, bezierCommand));\r\n}\r\n\r\nexport default DrawSmooth;\r\n","\r\nimport React from 'react';\r\nimport {modCashFlows} from \"./App.js\";\r\n\r\nfunction getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius) {\r\n    return(\r\n        <rect \r\n        key={key}\r\n        x={topLeftPoint[0]} y ={topLeftPoint[1]} //array [x,y]\r\n        width = {width} height = {height}\r\n        fill={fill} //string\r\n        stroke={strokeColor} //string\r\n        strokeWidth={strokeWidth} \r\n        rx={radius}\r\n    />\r\n    )\r\n}\r\n\r\nfunction GetDrawData () {\r\n    console.log(\"Ran GetDrawData\");\r\n   \r\n    \r\n    //values Before \r\n    const drawData = {\r\n        points: { \r\n            numPoints: {pos: null, neg: null},\r\n            spacing: {pos: null, neg: null},    \r\n            wavePoints: [],\r\n            negWavePoints: []  \r\n        },\r\n        rectangles: {\r\n            bars: [],\r\n            glass: [],\r\n            betweenGlass: null\r\n        },\r\n        values: {\r\n            drawBoxHeight: 100,\r\n            drawBoxWidth: 200,\r\n            allBarValues: [],\r\n            drawBarHeights: [],\r\n            viewHeightMultiplier: null\r\n        }\r\n    }\r\n    \r\n    for (var value in modCashFlows) {\r\n        if (modCashFlows[value] > 0) {\r\n            drawData.values.allBarValues.push(modCashFlows[value]);\r\n            \r\n        }\r\n        else if (modCashFlows[value] < 0) {\r\n            drawData.values.allBarValues.push(modCashFlows[value] * -1);\r\n        }\r\n    }\r\n    drawData.values.allBarValues.sort((a,b) => b-a);\r\n    drawData.values.viewHeightMultiplier = 92/drawData.values.allBarValues[0];\r\n\r\n    \r\n    \r\n    for (var value in modCashFlows) {\r\n        if (modCashFlows[value] > 0) {\r\n            drawData.values.drawBarHeights.push(modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.pos +=1;\r\n        }\r\n        if (modCashFlows[value] < 0) {\r\n            drawData.values.drawBarHeights.push(modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.neg +=1;\r\n        } \r\n    }\r\n\r\n    const barWidth = (drawData.values.drawBoxWidth / (drawData.values.drawBarHeights.length) / 1.5);\r\n    const barPadX = barWidth / 2;\r\n    const glassPad = Math.min(barPadX / 4, 2);\r\n    const doubleGlassPad = glassPad * 2;\r\n    drawData.rectangles.betweenGlass = barPadX - doubleGlassPad;\r\n    let barPosX = (barPadX / 2);\r\n    const barCanvas = drawData.values.drawBoxHeight - 4;\r\n\r\n    //push svg data for bars\r\n    for (var value in drawData.values.drawBarHeights) {\r\n        let key = value;\r\n        if (drawData.values.drawBarHeights[value] > 0) {  \r\n            drawData.rectangles.bars.push(getRectangleSVG(key, [barPosX, barCanvas - drawData.values.drawBarHeights[value]], barWidth, drawData.values.drawBarHeights[value], \"blue\"));\r\n            drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [barPosX - glassPad, 2], barWidth + doubleGlassPad, 96, \"none\", \"black\", .3, 1));\r\n            drawData.points.wavePoints.push([barPosX, barCanvas - drawData.values.drawBarHeights[value]]);\r\n            drawData.points.wavePoints.push([barPosX + barWidth, barCanvas - drawData.values.drawBarHeights[value]]);\r\n            \r\n            drawData.points.negWavePoints.push([barPosX, drawData.values.drawBoxHeight]);\r\n            drawData.points.negWavePoints.push([barPosX + barWidth, drawData.values.drawBoxHeight]);\r\n            \r\n            barPosX += (barWidth + barPadX);\r\n        }\r\n        else if (drawData.values.drawBarHeights[value] < 0) {\r\n            drawData.rectangles.bars.push(getRectangleSVG(key, [barPosX, barCanvas - (drawData.values.drawBarHeights[value] * -1)], barWidth, (drawData.values.drawBarHeights[value] * -1), \"red\"));\r\n            drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [barPosX - glassPad, 2], barWidth + doubleGlassPad, 96, \"none\", \"black\", .3, 1));\r\n\r\n            drawData.points.negWavePoints.push([barPosX, barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n            drawData.points.negWavePoints.push([barPosX + barWidth, barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n            \r\n            drawData.points.wavePoints.push([barPosX, drawData.values.drawBoxHeight]);\r\n            drawData.points.wavePoints.push([barPosX + barWidth, drawData.values.drawBoxHeight]);\r\n            \r\n            barPosX += (barWidth + barPadX);\r\n            \r\n        }\r\n    }\r\n\r\n    \r\n\r\n        \r\n    return(drawData);\r\n    \r\n}\r\nexport default GetDrawData;\r\n","import React from 'react';\r\n\r\n//import { motion, useAnimatedState } from \"framer-motion\";\r\nimport DrawSmooth  from \"./bezierInterp.js\";\r\nimport GetDrawData from \"./drawData.js\"\r\nimport { spring } from 'popmotion';\r\n\r\n\r\n//const barValues = [-80,70,-10,20,40,-20,60];\r\nconst testPoints = [[20, 30], [40, 80], [60,10], [80, 60],[100, 30], [120, 80], [140,10], [160, 60]];\r\nconst testPath = DrawSmooth(testPoints);\r\nconst canvasHeight = window.innerHeight/2;\r\nconst canvasWidth = canvasHeight * 2;\r\nconst pathSettle = 50;\r\nvar points = [];\r\nlet updateData = true;\r\nlet animDrawData = [];\r\nlet drawData = [];\r\nconsole.log(canvasWidth + \" canvas width\");\r\n\r\nfunction getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius) {\r\n  return(\r\n      <rect \r\n      key={key}\r\n      x={topLeftPoint[0]} y ={topLeftPoint[1]} //array [x,y]\r\n      width = {width} height = {height}\r\n      fill={fill} //string\r\n      stroke={strokeColor} //string\r\n      strokeWidth={strokeWidth} \r\n      rx={radius}\r\n  />\r\n  )\r\n}\r\n\r\nfunction Sketch(){\r\n  \r\n  //const [activeDrawData, setActiveDrawData] = useState(drawData);\r\n  //const drawData = () => { return GetDrawData() };\r\n  const [testVar, setTestVar] = React.useState(0);\r\n  const [aTestPath, setATestPath] = React.useState();\r\n\r\n  if (updateData){\r\n    drawData = GetDrawData();\r\n    \r\n  }\r\n  else {\r\n    drawData = animDrawData;\r\n  }\r\n  \r\n  //const drawData = GetDrawData();\r\n  //console.log(activeDrawData);\r\n  console.log(\"Ran Sketch\");\r\n \r\n  \r\n  \r\n\r\n  //const [wavePoints, setWavePoints] = useState(points);\r\n  \r\n  //const [animatedPath, setAnimatedPath] = useAnimatedState(DrawSmooth(GetDrawData().points.wavePoints, 1));\r\n\r\n  \r\n\r\n async function runSpring() {  \r\n    \r\n    // for (let point in drawData.points.wavePoints) {\r\n    //   spring({ from: 0, to: 100 })\r\n    //     .start(v => drawData.points.wavePoints[point][1] = v)\r\n    //     console.log(drawData.points.wavePoints);\r\n        \r\n    // }\r\n    for (let point in drawData.points.wavePoints) {\r\n     \r\n      \r\n      spring({ from: drawData.points.wavePoints[point][1], to: pathSettle, stiffness: 150, damping: 5 })\r\n          .start(v => {drawData.points.wavePoints[point][1] = v; setATestPath(DrawSmooth(drawData.points.wavePoints, 1))})\r\n    }\r\n  }\r\n  //wavePoints[0] = [200,100]\r\n  return(\r\n    <div>\r\n      <svg\r\n        style={{\r\n        background: '#333',\r\n        width: canvasWidth, \r\n        height: canvasHeight \r\n        }}\r\n        viewBox=\"0 0 200 100\"\r\n        >{drawData.rectangles.bars}{drawData.rectangles.glass}{aTestPath}\r\n      </svg>\r\n      <div>\r\n      <button name=\"animate\" onClick ={ () => {updateData= false; animDrawData = GetDrawData(); runSpring()}}>Animate Waves</button>{testVar}  \r\n      \r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n//const lineCommand = point => `L ${point[0]} ${point[1]}`\r\n\r\n\r\nexport default Sketch;","import React from 'react';\nimport Sketch from './sketch'\nimport GetDrawData from \"./drawData.js\";\nexport var modCashFlows = [];\n\nlet currentCFValue = null;\nlet cashFlows = [];\nlet initialInvest = 0;\nlet cashFlowString = \"\";\n\nfunction App() {\n\n//rerender the DOM when r changes\nconst [r, setr] = React.useState(50);\n//rerender the DOM when theNPV changes\nconst [theNpv, setNpv] = React.useState(0);\n//console.log(\"r \" + r);\n\n  function handleCashFlows() {\n    let strungOut = \"\";\n    \n    if (currentCFValue) {\n    cashFlows.push(currentCFValue);\n    }\n\n    for (let entry in cashFlows) {\n      strungOut += cashFlows[entry].toString();\n      strungOut += \",\";\n    }\n    //setNpv\n    cashFlowString = strungOut;\n    console.log(cashFlows);\n    setNpv(findNPV(cashFlows, r, initialInvest));\n  }\n\n  return (\n  <div><Sketch/>\n    \n    <div>\n      <h1>NPV: {theNpv}</h1>\n    </div>\n\n    <div>\n      <div>Initial Investment: {initialInvest}</div>\n      <input type=\"text\" name =\"initialInv\" onChange={(event) => setNpv(findNPV(cashFlows, r, event.target.value))} />  \n    </div>\n\n    <div>\n      <div>Discount Rate: {r}%</div>\n      <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" name =\"ROR\" onChange={(event) => setNpv(findNPV(cashFlows, event.target.value, initialInvest))} />\n    </div>\n\n    <div>\n      <div>Cash Flows: {cashFlowString}</div>\n      <input type=\"text\" name =\"cashFlow\" onChange={(event) => currentCFValue = event.target.value} />\n      <button name=\"cashFlowBtn\" onClick ={(handleCashFlows)}>Add Cash Flow</button>\n    </div>\n\n\n  </div>\n    \n  )\n  function findNPV(cashFlows, r, initialInvestValue) {\n    //push r value to interface \n    setr(r);\n    console.log(\"r \" + r);\n    initialInvest = initialInvestValue;\n    \n    let rDec = r/100;\n    let npv = null;\n    //reset modded cash flows\n    modCashFlows = [];\n    modCashFlows.push(initialInvest * -1);\n    for (let flow in cashFlows) {\n     let powerOf=parseInt(flow) +  1;\n     let discountedFlow = cashFlows[flow] / Math.pow(1 + rDec,  powerOf);\n     modCashFlows.push(discountedFlow);\n     npv += discountedFlow;\n    }\n  \n    console.log(\"r \" + r);\n    console.log(\"cashflows \" + cashFlows);\n    console.log(\"initial Invest \" + initialInvest);\n    console.log(\"npv \" + npv);\n    console.log(theNpv);\n    console.log(\"modflows \" + modCashFlows);\n    return ((npv - initialInvest).toFixed(2));\n  }\n  //{cashFlows.map((number) => <li key ={number.toString()}>{number}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n} \n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}