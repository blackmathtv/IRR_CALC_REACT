{"version":3,"sources":["drawData.js","sketch.js","flexgraph.js","graph.js","App.js","serviceWorker.js","index.js"],"names":["GetDrawData","drawData","points","numPoints","pos","neg","spacing","wavePoints","negWavePoints","rectangles","bars","glass","betweenGlass","modFlows","values","drawBoxHeight","drawBoxWidth","allBarValues","drawBarHeights","viewHeightMultiplier","barWidth","barPadX","glassPad","doubleGlassPad","barPosx","barCanvas","value","calcData","modCashFlows","push","sort","a","b","length","barPadx","Math","min","barPosX","commaDecimal","number","Intl","NumberFormat","style","maximumFractionDigits","format","getRectangleSVG","key","topLeftPoint","width","height","fill","strokeColor","strokeWidth","radius","x","y","stroke","rx","Sketch","textWidth","numBars","longestLength","highestFlow","toString","drawText","multiplier","divider","tWidth","styles","positiveColor","gray","fontSize","negativeColor","position","background","top","left","viewBox","noCashFlowsStyle","textAlign","marginLeft","fontStyle","globalStyles","clickedPoint","display","commaFormat","diff","abs","mouseDown","mouseOut","mouseOver","mouseUp","onMouseDown","onMouseUp","onMouseOut","onMouseOver","opacity","cursor","boxShadow","GetCircleSvg","centerX","centerY","xRadius","yRadius","onClick","mouseExit","heightMultiplier","parseFloat","canvasWidth","canvasHeight","cx","cy","ry","getPathSVG","color","smoothing","dashSize","controlPoint","current","previous","next","reverse","o","pointA","pointB","lengthX","lengthY","sqrt","pow","angle","atan2","line","PI","cos","sin","command","d","reduce","acc","point","i","strokeDasharray","svgPath","cpsX","cpsY","cpeX","cpeY","sortXYArray","data","xLimit","yLimit","drawFree","range","combinedData","sortedData","xMin","xMax","yMin","yMax","padLeft","padTop","xMultiplier","yMultiplier","dataSetCount","set","type","lastEntry","xAscending","slice","yAscending","drawArray","xDiff","yDiff","pair","getTextSVG","xy","fontWeight","userSelect","getXAxisSVG","textArray","tickArray","middleX","xLine","axisColor","axisLineSize","rulerOffset","xTicks","rulerStep","rulerPosition","round","fontColor","tickColor","tickLineSize","xName","labelColor","getYAxisSVG","num","yTicks","yValue","yLine","label","yName","transform","drawCanvas","ViewBox","canvasPadTop","canvasPadLeft","canvasColor","LineMarkGraph","lineSize","clickPointColor","pointSize","selectedPointSize","markerLineColor","markerLineSize","plots","XAxis","YAxis","Paths","markerLine","displaySVG","Path","circleArray","React","useState","draw","selectedPoint","setSelectedPoint","hovered","handlePointClick","xVal","yVal","xDraw","yDraw","alreadySelected","Number","currentPair","GraphPoints","displayPop","pointy","text","xHeaderFontSize","displayFontSize","yHeaderFontSize","xValueFontSize","yValueFontSize","xHeaderXPosition","yHeaderXPosition","xValueXPosition","yValueXPosition","flip","xSymbol","ySymbol","popXDisplay","popYDisplay","irrHeaderXPosition","displayFontWeight","GetDisplayPop","drawmarkerLine","path","getmarkerLine","drawDisplay","displayInit","displayColor","getValueDisplay","FlexButton","mouseHover","buttonStyle","main","btnColor","btnStrokeColor","btnStrokeWidth","btnRadius","cover","shadow","placement","btnTextRange","buttonClickedStyle","btn","setBtn","button","buttonCover","setTimeout","btnDisplay","btnFontSize","btnFontColor","btnFontWeight","DrawShapesGraph","boxAxisColor","boxRadius","box","getBoxAxis","Graph","graphStyles","darkGray","lightCanvasColor","npvSnap","drawPoints","drawLines","graph","allNpvPoints","dollarFormat","currency","minimumFractionDigits","removeCommas","replace","rndNearTenth","toFixed","window","innerWidth","initialInvest","cashFlows","positiveFlows","negativeFlows","averagePositiveFlow","averageNegativeFlow","posFlowsTotal","negFlowsTotal","theNPV","snapGraphX","r","testVar","irr","discountFactor","avgNpvYr","textColor","innerCashBoxColor","medLightGray","irrColor","npvBtnColor","calcPadLeft","calcPadTop","bottomRowPadTop","firstRowHeight","secondRowHeight","lightBlue","calcCanvas","calcTitle","parseInt","cashFlowBox","borderRadius","innerCashBox","overflowY","overflowX","cashContents","cashBottom","lineBreak","dRateBox","sliderStyle","DRateText","DFactorText","sketchBox","NpvStatBox","avgNPVHeader","marginTop","marginBottom","graphBox","header1","App","npvRan","setNpvRan","handleCashFlowChange","yearZero","npvOut","rDec","npv","flow","cashFlow","powerOf","findNPV","canvasStyles","secondArrow","secondArrowTop","secondArrowLeft","firstArrowTop","firstArrowLeft","drawArrows","contents","numSize","numX","numY","dollSymbol","border","name","onChange","event","target","splice","x1","y1","x2","y2","minusButton","CashFlowContents","borderWidth","max","step","npvResult","npvLength","flowValue","inverseFlowValue","negativeLiquidHeight","positiveLiquidHeight","positiveLiquidDraw","negativeLiquidDraw","jellyJar","posStyle","margin","plusStyle","negStyle","bottom","jellyDisplay","unshift","discountedFlow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed7acd8d.chunk.js","sourcesContent":["\r\n\r\nimport {calcData} from \"./App.js\";\r\n\r\n\r\n\r\nfunction GetDrawData () {\r\n    //console.log(\"Ran GetDrawData\");\r\n   \r\n    \r\n    //values Before \r\n    const drawData = {\r\n        points: { \r\n            numPoints: {pos: null, neg: null},\r\n            spacing: {pos: null, neg: null},    \r\n            wavePoints: [],\r\n            negWavePoints: []  \r\n        },\r\n        rectangles: {\r\n            bars: [],\r\n            glass: [],\r\n            betweenGlass: null,\r\n            modFlows: []\r\n        },\r\n        values: {\r\n            drawBoxHeight: 100,\r\n            drawBoxWidth: 200,\r\n            allBarValues: [],\r\n            drawBarHeights: [],\r\n            viewHeightMultiplier: null,\r\n            barWidth: null,\r\n            barPadX: null,\r\n            glassPad: null,\r\n            doubleGlassPad: null,\r\n            barPosx: null,\r\n            barCanvas: null\r\n        }\r\n    }\r\n    \r\n    for (let value in calcData.modCashFlows) {\r\n        if (calcData.modCashFlows[value] >= 0) {\r\n            drawData.values.allBarValues.push(calcData.modCashFlows[value]);\r\n            \r\n        }\r\n        else if (calcData.modCashFlows[value] < 0) {\r\n            drawData.values.allBarValues.push(calcData.modCashFlows[value] * -1);\r\n        }\r\n    }\r\n    drawData.values.allBarValues.sort((a,b) => b-a);\r\n    drawData.values.viewHeightMultiplier = 110/drawData.values.allBarValues[0];\r\n    // drawData.values.viewHeightMultiplier = 92/drawData.values.allBarValues[0];\r\n    \r\n    \r\n    for (let value in calcData.modCashFlows) {\r\n        if (calcData.modCashFlows[value] >= 0) {\r\n            drawData.values.drawBarHeights.push(calcData.modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.pos +=1;\r\n        }\r\n        if (calcData.modCashFlows[value] < 0) {\r\n            drawData.values.drawBarHeights.push(calcData.modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.neg +=1;\r\n        } \r\n    }\r\n\r\n    drawData.values.barWidth = (drawData.values.drawBoxWidth / (drawData.values.drawBarHeights.length) / 1.5);\r\n    drawData.values.barPadx = drawData.values.barWidth / 2;\r\n    drawData.values.glassPad = Math.min(drawData.values.barPadx / 4, 2);\r\n    drawData.values.doubleGlassPad = drawData.values.glassPad * 2;\r\n    drawData.rectangles.betweenGlass = drawData.values.barPadx - drawData.values.doubleGlassPad;\r\n    drawData.values.barPosX = (drawData.values.barPadx / 2);\r\n    drawData.values.barCanvas = drawData.values.drawBoxHeight - 4;\r\n\r\n    //push svg data for bars\r\n\r\n\r\n    \r\n\r\n        \r\n    return(drawData);\r\n    \r\n}\r\nexport default GetDrawData;\r\n","import React from 'react';\r\n// import DrawSmooth  from \"./bezierInterp.js\";\r\nimport GetDrawData from \"./drawData.js\"\r\n// import { spring } from 'popmotion';\r\nimport { styles } from './App.js'\r\nimport {calcData} from \"./App.js\";\r\n \r\n\r\n\r\n// const pathSettle = 50;\r\n\r\nlet updateData = true;\r\nlet animDrawData = [];\r\nlet drawData = [];\r\n\r\nconst commaDecimal = (number) => Intl.NumberFormat('en-US', {\r\n  style: \"decimal\",\r\n  maximumFractionDigits: 0\r\n}).format(number);\r\n\r\n\r\nfunction getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius) {\r\n  return(  \r\n      <rect \r\n      key={key}\r\n      x={topLeftPoint[0]} y ={topLeftPoint[1]} //array [x,y]\r\n      width = {width} height = {height}\r\n      fill={fill} //string\r\n      stroke={strokeColor} //string\r\n      strokeWidth={strokeWidth} \r\n      rx={radius}\r\n    />\r\n  \r\n  )\r\n}\r\n\r\nfunction Sketch(){\r\n  //console.log(\"Ran Sketch\");  \r\n  //wave path\r\n  // const [path, setpath] = React.useState();\r\n \r\n  if (updateData){\r\n    drawData = GetDrawData();\r\n    let numBars = drawData.values.drawBarHeights.length;\r\n    let  textWidth = \"67%\";\r\n    let longestLength = commaDecimal(calcData.highestFlow).toString().length;\r\n    \r\n      let drawText = true;\r\n      let multiplier = longestLength/3;\r\n      let divider = 400;\r\n      if (numBars <= 3) {\r\n        divider = numBars * 100;\r\n      }\r\n      if (longestLength < 4) {\r\n        multiplier= 1;\r\n      }\r\n      let tWidth = divider/(numBars * multiplier);\r\n      textWidth = tWidth + \"%\";\r\n      if (tWidth < 17) { \r\n        drawText = false;\r\n      }\r\n\r\n    \r\n    \r\n    \r\n    //push wave points and rectange svg to local drawData\r\n    for (var value in drawData.values.drawBarHeights) {\r\n      let key = value;\r\n      if (drawData.values.drawBarHeights[value] >= 0) {  \r\n          drawData.rectangles.bars.push(getRectangleSVG(key, [drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value]], drawData.values.barWidth, drawData.values.drawBarHeights[value], styles.positiveColor));\r\n          drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [drawData.values.barPosX - drawData.values.glassPad, -16], drawData.values.barWidth + drawData.values.doubleGlassPad, 114, \"none\", styles.gray, .3, 1));\r\n          //drawData.points.wavePoints.push([drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value]]);\r\n          drawData.points.wavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.barCanvas - drawData.values.drawBarHeights[value]]);         \r\n          //drawData.points.negWavePoints.push([drawData.values.barPosX, drawData.values.drawBoxHeight]);\r\n          drawData.points.negWavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.drawBoxHeight]);\r\n          if (drawText === true) {\r\n            drawData.rectangles.modFlows.push(<text key={key + \"modText\"} style={{fontSize: textWidth}} fill={styles.positiveColor} x={drawData.values.barPosX -1} y=\"112\">{commaDecimal(calcData.modCashFlows[value])}</text>)\r\n          }\r\n          drawData.values.barPosX += (drawData.values.barWidth + drawData.values.barPadx);\r\n         \r\n      }\r\n      else if (drawData.values.drawBarHeights[value] < 0) {\r\n          drawData.rectangles.bars.push(getRectangleSVG(key, [drawData.values.barPosX, drawData.values.barCanvas - (drawData.values.drawBarHeights[value] * -1)], drawData.values.barWidth, (drawData.values.drawBarHeights[value] * -1), styles.negativeColor));\r\n          drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [drawData.values.barPosX - drawData.values.glassPad, -16], drawData.values.barWidth + drawData.values.doubleGlassPad, 114, \"none\", styles.gray, .3, 1));\r\n\r\n          //drawData.points.negWavePoints.push([drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n          drawData.points.negWavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n          //  drawData.points.wavePoints.push([drawData.values.barPosX, drawData.values.drawBoxHeight]);\r\n          drawData.points.wavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.drawBoxHeight]);\r\n          if (drawText === true) {\r\n          drawData.rectangles.modFlows.push(<text key={key + \"modText\"} style={{fontSize: textWidth}} fill={styles.negativeColor} x={drawData.values.barPosX -1} y=\"112\">{commaDecimal(calcData.modCashFlows[value])}</text>)\r\n          }\r\n          drawData.values.barPosX += (drawData.values.barWidth + drawData.values.barPadx);\r\n          \r\n          \r\n      }\r\n \r\n      //drawData.rectangles.modFlows.push(<p style={{position: \"absolute\", left: modPosX + \"%\", fontSize: \"1vw\", background: \"blue\" }}>3</p>);\r\n\r\n    }\r\n\r\n  }\r\n  else {\r\n    drawData = animDrawData;\r\n  }\r\n\r\n  // async function runSpring() {    \r\n  //   for (let point in drawData.points.wavePoints) {\r\n  //     spring({ from: drawData.points.wavePoints[point][1], to: pathSettle, stiffness: 150, damping: 5 })\r\n  //         .start(v => {drawData.points.wavePoints[point][1] = v; setpath(DrawSmooth(drawData.points.wavePoints, 1))})\r\n  //   }\r\n  // }\r\n\r\n  if(drawData.rectangles.bars.length > 0){\r\n    return(\r\n      <div>\r\n        <svg\r\n          style={{\r\n          position: \"absolute\",\r\n          background: 'none',\r\n          top: \"10%\",\r\n          left: \"5%\",\r\n          width: \"90%\", \r\n          height: \"90%\"\r\n          }}\r\n          viewBox=\"0 0 200 100\"\r\n        >{drawData.rectangles.bars}{drawData.rectangles.modFlows}{drawData.rectangles.glass}\r\n        </svg>\r\n        <div>\r\n        {/* <button name=\"animate\" onClick ={ () => {updateData= false; animDrawData = drawData; runSpring()}}>Animate Waves</button>   */}\r\n        \r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n  else {\r\n    const noCashFlowsStyle = {\r\n      textAlign: \"left\",\r\n      marginLeft: \"1vw\",\r\n      fontSize: \"1vw\",\r\n      fontStyle: \"montserrat\",\r\n    }\r\n    return (\r\n    <div>\r\n      <p style={noCashFlowsStyle}>To get started,</p>\r\n      <p style={noCashFlowsStyle}>input some cashflows in the box on the left</p>\r\n    </div>\r\n      \r\n      )\r\n  }\r\n}\r\n\r\n//const lineCommand = point => `L ${point[0]} ${point[1]}`\r\n\r\n\r\nexport default Sketch;","import React from 'react';\r\n\r\n\r\nlet globalStyles = {\r\n    clickedPoint: null,\r\n}\r\nlet display = \"\";\r\nconst commaFormat = (number) => Intl.NumberFormat().format(number);\r\n\r\nfunction rndNearTenth(num) {\r\n    return Math.round(num * 100) / 100;\r\n}\r\nfunction invertHex(hex) {\r\n    return \"#\" + (Number(`0x1${hex.slice(1)}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase()\r\n}\r\n\r\nfunction diff(a, b) { return Math.abs(a - b); }\r\n\r\nexport function getValueDisplay(sortedData, styles) {\r\n    if (display === \"\") {\r\n        display = styles.displayInit;\r\n    }\r\n\r\n    let label = getTextSVG(\"displaytext\", display, [33, sortedData.padTop * .4 + \"%\"], styles.displayFontSize, styles.displayColor, styles.displayFontWeight);\r\n    return <svg key=\"valuedisplay\">{label}</svg>\r\n\r\n}\r\n\r\nexport function getRectangleSVG(key, styles, mouseDown, mouseOut, mouseOver, mouseUp) {\r\n    return (\r\n        <rect\r\n            key={key}\r\n            x={styles.topLeftPoint[0] + \"%\"} y={styles.topLeftPoint[1] + \"%\"} //array [x,y]\r\n            width={styles.width + \"%\"} height={styles.height + \"%\"}\r\n            fill={styles.fill} //string\r\n            stroke={styles.strokeColor} //string\r\n            strokeWidth={styles.strokeWidth}\r\n            rx={styles.radius}\r\n            onMouseDown={mouseDown}\r\n            onMouseUp={mouseUp}\r\n            onMouseOut={mouseOut}\r\n            onMouseOver={mouseOver}\r\n            opacity={styles.opacity}\r\n            style={{ cursor: styles.cursor, boxShadow: \"1px 3px 1px #9E9E9E\" }}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport function GetCircleSvg(key, styles, fill, strokeColor, strokeWidth, centerX, centerY, xRadius, yRadius, onClick, mouseOver, mouseExit) {\r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n\r\n    if (!yRadius) {\r\n        yRadius = xRadius * styles.heightMultiplier;\r\n    }\r\n    else {\r\n        yRadius = yRadius * styles.heightMultiplier;\r\n    }\r\n\r\n    return (\r\n        <ellipse\r\n            key={key}\r\n            cx={centerX + \"%\"} cy={centerY + \"%\"}\r\n            rx={xRadius + \"%\"} ry={yRadius + \"%\"}\r\n            fill={fill}\r\n            stroke={strokeColor} //string\r\n            strokeWidth={strokeWidth}\r\n            onMouseDown={onClick}\r\n            onMouseOut={mouseExit}\r\n            onMouseOver={mouseOver}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport function getPathSVG(key, styles, points, color, strokeWidth, smoothing, dashSize, fill) {\r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n\r\n    if (!color) {\r\n        color = \"black\";\r\n    }\r\n\r\n    if (!strokeWidth) {\r\n        strokeWidth = .5;\r\n    }\r\n    if (!dashSize) {\r\n        dashSize = 0;\r\n    }\r\n    if (!fill) {\r\n        fill = \"none\"\r\n    }\r\n\r\n    let controlPoint = null;\r\n    //const points = points;\r\n    const svgPath = (points, command) => {\r\n        // build the d attributes by looping over the points\r\n        const d = points.reduce((acc, point, i, a) => i === 0\r\n            // if first point\r\n            ? `M ${point[0]},${point[1] / styles.heightMultiplier}`\r\n            // else\r\n            : `${acc} ${command(point, i, a)}`\r\n            , '')\r\n        //removed position absolute i hope that doesnt break anything\r\n        return <path key={key} style={{ width: 7, strokeDasharray: dashSize }} d={d} fill={fill} stroke={color} strokeWidth={strokeWidth} />\r\n    }\r\n\r\n\r\n\r\n    if (smoothing) {\r\n\r\n        const line = (pointA, pointB) => {\r\n            const lengthX = pointB[0] - pointA[0]\r\n            const lengthY = pointB[1] - pointA[1]\r\n            return {\r\n                length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\r\n                angle: Math.atan2(lengthY, lengthX)\r\n            }\r\n        }\r\n        controlPoint = (current, previous, next, reverse) => {\r\n            // When 'current' is the first or last point of the array\r\n            // 'previous' or 'next' don't exist.\r\n            // Replace with 'current'\r\n            const p = previous || current\r\n            const n = next || current\r\n            // The smoothing ratio\r\n\r\n            // Properties of the opposed-line\r\n            const o = line(p, n)\r\n            // If is end-control-point, add PI to the angle to go backward\r\n            const angle = o.angle + (reverse ? Math.PI : 0)\r\n            const length = o.length * smoothing\r\n            // The control point position is relative to the current point\r\n            const x = current[0] + Math.cos(angle) * length\r\n            const y = current[1] + Math.sin(angle) * length\r\n            return [x, y]\r\n        }\r\n    }\r\n    const lineCommand = (point, i, a) => {\r\n        if (smoothing) {\r\n            // start control point\r\n            const [cpsX, cpsY] = controlPoint(a[i - 1], a[i - 2], point);\r\n\r\n            // end control point\r\n            const [cpeX, cpeY] = controlPoint(point, a[i - 1], a[i + 1], true)\r\n            return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${point[0]},${point[1] / styles.heightMultiplier}`\r\n        }\r\n        else {\r\n            return `L ${point[0]} ${point[1] / styles.heightMultiplier}`\r\n        }\r\n    }\r\n\r\n\r\n    return (svgPath(points, lineCommand));\r\n}\r\n\r\nexport function sortXYArray(data, styles, xLimit, yLimit, drawFree, range) {\r\n\r\n    // globalStyles = {\r\n    //     clickedPoint: null,\r\n    // }\r\n\r\n    if (!drawFree) {\r\n        drawFree = false;\r\n    }\r\n    if (!xLimit) {\r\n        xLimit = 80;\r\n\r\n    }\r\n    if (!yLimit) {\r\n        yLimit = 80;\r\n\r\n    }\r\n\r\n    let combinedData = {\r\n        sortedData: [],\r\n        xLimit: xLimit,\r\n        yLimit: yLimit,\r\n        xMin: 0,\r\n        xMax: 100,\r\n        yMin: null,\r\n        yMax: null,\r\n        padLeft: 0,\r\n        padTop: 0,\r\n        xMultiplier: 1,\r\n        yMultiplier: 1,\r\n        drawFree: drawFree\r\n\r\n    };\r\n\r\n    let dataSetCount = 0\r\n\r\n    \r\n    for (let set in data) {\r\n        if (!styles.type) {\r\n            styles.type = [];\r\n        }\r\n        //if there is actually data\r\n        let sortedData = {};\r\n        let lastEntry = null;\r\n        if (data[set].length) {\r\n            lastEntry = data[set].length - 1;\r\n            sortedData = {\r\n                xAscending: data[set].slice(),\r\n                yAscending: data[set].slice(),\r\n                xMin: 0,\r\n                xMax: 100,\r\n                yMin: null,\r\n                yMax: null,\r\n                xLimit: xLimit,\r\n                yLimit: yLimit,\r\n                padLeft: 0,\r\n                padTop: 0,\r\n                xMultiplier: 0,\r\n                yMultiplier: 0,\r\n                drawArray: [],\r\n                color: set,\r\n                type: styles.type[dataSetCount]\r\n\r\n            }\r\n            dataSetCount += 1;\r\n\r\n            // \r\n\r\n            sortedData.xAscending.sort(function (a, b) {\r\n                return a[0] - b[0];\r\n            })\r\n\r\n            sortedData.yAscending.sort(function (a, b) {\r\n                return a[1] - b[1];\r\n            });\r\n\r\n            //if range hasnt been specified, dynamically create it\r\n            if (!range) {\r\n                sortedData.xMin = parseFloat(sortedData.xAscending[0][0]);\r\n                sortedData.xMax = parseFloat(sortedData.xAscending[lastEntry][0]);\r\n                sortedData.yMin = parseFloat(sortedData.yAscending[0][1]);\r\n                sortedData.yMax = parseFloat(sortedData.yAscending[lastEntry][1]);\r\n\r\n                //if the ranges of the dataset's mins/ maxs exceed the combined data min max, update the combined\r\n                if (sortedData.xMin < combinedData.xMin || combinedData.xMin === null) {\r\n                    combinedData.xMin = sortedData.xMin;\r\n                }\r\n                if (sortedData.xMax > combinedData.xMax || combinedData.xMax === null) {\r\n                    combinedData.xMax = sortedData.xMax;\r\n                }\r\n                if (sortedData.yMin < combinedData.yMin || combinedData.yMin === null) {\r\n                    \r\n                    combinedData.yMin = sortedData.yMin;\r\n                }\r\n                if (sortedData.yMax > combinedData.yMax || combinedData.yMax === null) {\r\n\r\n                    combinedData.yMax = sortedData.yMax;\r\n                }\r\n\r\n            }\r\n            else {\r\n                //set the range to specified if it has been specified\r\n               \r\n                sortedData.xMin = parseFloat(range[0][0]);\r\n                sortedData.xMax = parseFloat(range[1][0]);\r\n                sortedData.yMin = parseFloat(range[0][1]);\r\n                sortedData.yMax = parseFloat(range[1][1]);\r\n                combinedData.xMin = sortedData.xMin;\r\n                combinedData.xMax = sortedData.xMax;\r\n                combinedData.yMin = sortedData.yMin;\r\n                combinedData.yMax = sortedData.yMax;\r\n            }\r\n            //set the default draw percents to 100% of the canvas\r\n\r\n            sortedData.padLeft = (100 - xLimit) / 2;\r\n            sortedData.padTop = (100 - yLimit) / 2;\r\n\r\n            sortedData.xDiff = sortedData.xMax - sortedData.xMin;\r\n            sortedData.yDiff = sortedData.yMax - sortedData.yMin;\r\n\r\n\r\n\r\n            if (sortedData.xDiff !== 0) {\r\n                sortedData.xMultiplier = combinedData.xLimit / combinedData.xDiff;\r\n            }\r\n            else {\r\n                sortedData.xMultiplier = 1;\r\n            }\r\n\r\n            if (sortedData.yDiff !== 0) {\r\n                sortedData.yMultiplier = combinedData.yLimit / combinedData.yDiff;\r\n\r\n            }\r\n            else {\r\n                sortedData.yMultiplier = 1;\r\n            }\r\n            combinedData.sortedData.push(sortedData);\r\n        }\r\n    };\r\n    //endof for loop\r\n\r\n    combinedData.padLeft = (100 - xLimit) / 2;\r\n    combinedData.padTop = (100 - yLimit) / 2;\r\n    combinedData.xDiff = combinedData.xMax - combinedData.xMin;\r\n    combinedData.yDiff = combinedData.yMax - combinedData.yMin;\r\n\r\n    //if there is no range differnece, make one\r\n\r\n    if (combinedData.xDiff < 4) {\r\n        combinedData.xMax += 2;\r\n        combinedData.xMin += -2;\r\n        combinedData.xDiff += 4;\r\n    }\r\n\r\n    if (combinedData.yDiff < 4) {\r\n        combinedData.yMin += -2\r\n        combinedData.yMax += 2;\r\n        combinedData.yDiff += 4;\r\n    }\r\n\r\n\r\n    \r\n    combinedData.xMultiplier = combinedData.xLimit / combinedData.xDiff;\r\n\r\n\r\n    combinedData.yMultiplier = combinedData.yLimit / combinedData.yDiff;\r\n\r\n\r\n\r\n    if (combinedData.drawFree === false) {\r\n\r\n        for (let set in combinedData.sortedData) {\r\n            let sortedData = combinedData.sortedData[set];\r\n            //push the modified data in xascending order\r\n            for (let pair in sortedData.xAscending) {\r\n                combinedData.sortedData[set].drawArray.push([((sortedData.xAscending[pair][0] - combinedData.xMin) * combinedData.xMultiplier) + combinedData.padLeft, combinedData.yLimit - ((sortedData.xAscending[pair][1] - combinedData.yMin) * combinedData.yMultiplier) + combinedData.padTop]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        let set = 0\r\n        //data is an object that has keys with the color attribute, use a count instead for set attribute\r\n        for (let i in data) {\r\n            //push the modified data in original order for drawing shapes and stuff\r\n            if (data[i].length) {      \r\n                for (let pair in data[i]) {\r\n                    combinedData.sortedData[set].drawArray.push([((data[i][pair][0] - combinedData.xMin) * combinedData.xMultiplier) + combinedData.padLeft, combinedData.yLimit - ((data[i][pair][1] - combinedData.yMin) * combinedData.yMultiplier) + combinedData.padTop]);\r\n                }\r\n                set += 1;\r\n            }\r\n        }\r\n    }\r\n   \r\n    return (combinedData);\r\n\r\n}\r\nexport function getTextSVG(key, display, xy, fontSize, color, fontWeight, userSelect) {\r\n    if (!xy) {\r\n        xy = [1, 10];\r\n    }\r\n    if (!fontSize) {\r\n        fontSize = 2;\r\n    }\r\n    if (!color) {\r\n        color = \"black\";\r\n    }\r\n\r\n    return (<text key={key} style={{ userSelect: userSelect, fontSize: fontSize, fontWeight: fontWeight }} fill={color} x={xy[0]} y={xy[1]}>{display}</text>);\r\n}\r\n\r\nexport function getXAxisSVG(sortedData, styles) {\r\n    let textArray = [];\r\n    let tickArray = [];\r\n\r\n    let middleX = ((100 - sortedData.padLeft) + sortedData.padLeft / 2) / 2;\r\n    let xLine = getPathSVG(\"xLine\", styles, [[sortedData.padLeft, 100 - sortedData.padTop], [100 - sortedData.padLeft, 100 - sortedData.padTop]], styles.axisColor, styles.axisLineSize);\r\n\r\n    let rulerOffset = sortedData.xLimit / styles.xTicks;\r\n    let rulerStep = diff(sortedData.xMin, sortedData.xMax) / styles.xTicks;\r\n    let rulerPosition = sortedData.padLeft;\r\n    for (let i = 0; i <= styles.xTicks; i++) {\r\n        //push ruler values to text array spaced out evenly\r\n        textArray.push(getTextSVG(\"xrulerValue\" + i, Math.round(sortedData.xMin + (rulerStep * i)), [rulerPosition + (rulerOffset * i) + \"%\", 100 - (sortedData.padTop / 2) + \"%\"], styles.fontSize, styles.fontColor));\r\n        if (i >= 1) {\r\n            tickArray.push(getPathSVG(\"xTick\" + i, styles, [[rulerPosition + (rulerOffset * i), 100 - sortedData.padTop], [rulerPosition + (rulerOffset * i), sortedData.padTop]], styles.tickColor, styles.tickLineSize, 0, 1));\r\n\r\n        }\r\n    }\r\n\r\n    textArray.push(getTextSVG(\"xNameText\", styles.xName, [100 - middleX / 1.8, 100 - (sortedData.padTop * 1.2) + \"%\"], styles.fontSize, styles.labelColor));\r\n\r\n    return (\r\n        <svg key=\"xaxissvg\" >\r\n            {textArray}\r\n            {tickArray}\r\n            {xLine}\r\n        </svg>\r\n    )\r\n}\r\n//<g transform='rotate(90), translate(10.000000, -55.000000)' ></g>\r\nexport function getYAxisSVG(sortedData, styles) {\r\n    let textArray = [];\r\n    let tickArray = [];\r\n\r\n    let middleX = ((100 - sortedData.padLeft) + sortedData.padLeft / 2) / 2;\r\n\r\n    let rulerOffset = sortedData.yLimit / styles.yTicks; //the offset for thephysical position on the canvas\r\n    let rulerStep = diff(sortedData.yMin, sortedData.yMax) / styles.yTicks; //the value offset \r\n    let rulerPosition = 100 - sortedData.padTop;\r\n    for (let i = 0; i <= styles.yTicks; i++) {\r\n        let yValue = sortedData.yMin + (rulerStep * i);\r\n        //push ruler values to text array spaced out evenly, if there is a small differrence, round to the nearest 10th\r\n        if (sortedData.yDiff > 50) {\r\n            textArray.push(getTextSVG(\"yrulervalue\" + i, commaFormat(Math.round(yValue)), [(sortedData.padLeft / 4) + \"%\", rulerPosition - (rulerOffset * i) + \"%\"], styles.fontSize, styles.fontColor));\r\n        }\r\n        else {\r\n            textArray.push(getTextSVG(\"yrulervalue\" + i, commaFormat(rndNearTenth(yValue)), [(sortedData.padLeft / 4) + \"%\", rulerPosition - (rulerOffset * i) + \"%\"], styles.fontSize, styles.fontColor));\r\n\r\n        }\r\n\r\n        if (i >= 1) {\r\n            tickArray.push(getPathSVG(\"ytickline\" + i, styles, [[sortedData.padLeft, rulerPosition - (rulerOffset * i)], [100 - sortedData.padLeft, rulerPosition - (rulerOffset * i)]], styles.tickColor, styles.tickLineSize, 0, 1));\r\n        }\r\n    }\r\n    let yLine = getPathSVG(\"yLine\", styles, [[sortedData.padLeft, 100 - sortedData.padTop], [sortedData.padLeft, sortedData.padTop]], styles.axisColor, styles.axisLineSize);\r\n\r\n\r\n    let label = getTextSVG(\"ylabeltext\", styles.yName, [(-middleX / 1.8) / styles.heightMultiplier, sortedData.padLeft * 1.25], styles.fontSize, styles.labelColor);\r\n\r\n    return (\r\n        <svg key=\"yaxissvg\">\r\n            {yLine}\r\n            <g transform='rotate(-90)' >{label}</g>\r\n            {textArray}\r\n            {tickArray}\r\n            \r\n        </svg>\r\n    )\r\n}\r\nexport function getmarkerLine(sortedData, styles) {\r\n\r\n\r\n    if (sortedData.yMin < 0 && sortedData.yMax > 0) {\r\n\r\n        let y = sortedData.yLimit - ((0 - sortedData.yMin) * sortedData.yMultiplier) + sortedData.padTop;\r\n\r\n        let range = [[], []];\r\n        range = [[sortedData.padLeft, y], [100 - sortedData.padLeft, y]];\r\n        let path = getPathSVG(\"markerLine\", styles, range, styles.markerLineColor, styles.markerLineSize, false, 1);\r\n        let text = getTextSVG(\"0LineMark\", \"0 (IRR)\", [100 - sortedData.padLeft / 1.2, y + \"%\"], styles.fontSize, styles.markerLineColor)\r\n        return (\r\n            <svg key=\"markerLine\">\r\n                {text}\r\n                {path}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n//plot scatter plot points with sorted data and styles\r\n\r\n\r\nexport function GraphPoints(key, sortedData, styles) {\r\n    let circleArray = [];\r\n   \r\n    \r\n    let initValue = [];\r\n\r\n    \r\n\r\n        //initValue = [styles.selectedPoint[0], styles.selectedPoint[1]];\r\n\r\n    const [selectedPoint, setSelectedPoint] = React.useState({value: initValue, draw: []});\r\n    const [hovered, setHovered] = React.useState([]);\r\n    //const [popTopLeft, setPopTopLeft] = React.useState([]);\r\n   \r\n\r\n    function handlePointClick(xVal, yVal, xDraw, yDraw) {\r\n        display = styles.xName + \": \" + xVal + \" \" + styles.yName + \": \" + yVal;\r\n        let point = {value: [xVal, yVal], draw: [xDraw, yDraw]}\r\n        globalStyles.clickedPoint = point;\r\n        // if (point.draw[0] === selectedPoint.draw[0]) {\r\n        //     point = { value: [], draw: []}\r\n        //     globalStyles.clickedPoint = null;\r\n        // }\r\n        setSelectedPoint(point);\r\n       \r\n    }\r\n\r\n\r\n    for (let set in sortedData) {\r\n      \r\n        let alreadySelected = false;\r\n        if (!styles.type || sortedData[set].type === \"Mark\" || sortedData[set.type] === \"LineMark\") {\r\n            for (let pair in sortedData[set].drawArray) {\r\n                let color = sortedData[set].color;\r\n                let radius = styles.pointSize;\r\n\r\n                //the draw coordinates\r\n                let xDraw = Number(sortedData[set].drawArray[pair][0]);\r\n                let yDraw = Number(sortedData[set].drawArray[pair][1]);\r\n\r\n                //the unmodified data points\r\n                let currentPair = sortedData[set].xAscending[pair];\r\n                let xVal = currentPair[0];\r\n                let yVal = currentPair[1];\r\n\r\n                // if (currentPair[0] === selectedPoint.value[0] && currentPair[1] === selectedPoint.value[1] && alreadySelected === false) {\r\n                //     color = styles.clickPointColor;\r\n                //     alreadySelected = true;\r\n                //     radius = styles.selectedPointSize;\r\n                // }\r\n                if (currentPair[0] === styles.selectedPoint[0] && currentPair[1] === styles.selectedPoint[1]) {\r\n          \r\n                    color = styles.clickPointColor;\r\n                    //alreadySelected = true;\r\n                  \r\n                \r\n                }\r\n                if (currentPair[0] === selectedPoint.value[0] && currentPair[1] === selectedPoint.value[1] && alreadySelected === false) {\r\n                    color = styles.clickPointColor;\r\n                    alreadySelected = true;\r\n                    radius = styles.selectedPointSize;\r\n                }\r\n\r\n                if (set === hovered[0] && pair === hovered[1]) {\r\n                    radius = styles.selectedPointSize;\r\n                }\r\n\r\n\r\n                // let mouseOver = () => setHovered([set, pair]);\r\n                let mouseOver = () => { handlePointClick(xVal, yVal, xDraw, yDraw) };\r\n                // let mouseExit = () => setHovered([]);\r\n                let mouseExit = () => {setSelectedPoint({ value: [], draw: []}); globalStyles.clickedPoint = null};\r\n                // let mouseDown = () => { handlePointClick(xVal, yVal, xDraw, yDraw) };\r\n                let mouseDown = () => {};\r\n\r\n                circleArray.push(GetCircleSvg(key + pair + set, styles, color, \"none\", \"none\", xDraw, yDraw, radius, radius, mouseDown, mouseOver, mouseExit));\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (<svg key = \"graphpoints\">{circleArray}</svg>);\r\n}\r\nexport function getBoxAxis(sortedData, styles) {\r\n    let boxStyle = {\r\n        topLeftPoint: [sortedData.padLeft, sortedData.padTop],\r\n        width: 100 - (sortedData.padLeft * 2),\r\n        height: 100 - (sortedData.padTop * 2),\r\n        fill: \"none\",\r\n        strokeColor: styles.boxAxisColor,\r\n        strokeWidth: styles.axisLineSize,\r\n        radius: styles.boxRadius,\r\n\r\n    }\r\n        ;\r\n    let box = getRectangleSVG(\"boxAxis\", boxStyle);\r\n    let XAxis = getXAxisSVG(sortedData, styles);\r\n    let YAxis = getYAxisSVG(sortedData, styles);\r\n\r\n    return (\r\n        <g key = \"boxaxis\">\r\n            {YAxis}{XAxis}{box}\r\n        </g>\r\n    )\r\n}\r\n\r\nexport function drawCanvas(key, styles, Sketch) {\r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n    let ViewBox = \"0 0 100 \" + (100 / styles.heightMultiplier).toString();\r\n\r\n    return (\r\n        <div key={key} style={{ position: \"absolute\", top: styles.canvasPadTop, left: styles.canvasPadLeft, width: styles.canvasWidth, height: styles.canvasHeight }}>\r\n            <svg key = {key + \"canvasBox\"} style={{ background: styles.canvasColor }} viewBox={ViewBox}>\r\n                <g key= \"sketch\">{Sketch}</g> \r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function LineMarkGraph(data, styles) {\r\n\r\n    let defaults = {\r\n        canvasWidth: \"40vw\",\r\n        canvasHeight: \"40vw\",\r\n        canvasPadLeft: \"1vw\",\r\n        canvasPadTop: \"1vw\",\r\n        lineSize: .2,\r\n        fontSize: 2,\r\n        fontColor: \"#7BA7F0\",\r\n        axisColor: \"#7BA7F0\",\r\n        axisLineSize: .2,\r\n        xTicks: 4,\r\n        yTicks: 4,\r\n        tickColor: \"#E8E8E8\t\",\r\n        tickLineSize: .1,\r\n        clickPointColor: \"#C18FE4\",\r\n        pointSize: 1,\r\n        selectedPointSize: 2,\r\n        xName: \"X-axis\",\r\n        yName: \"Y-axis\",\r\n        markerLineColor: \"#FFAAAA\",\r\n        markerLineSize: .3,\r\n        background: \"none\",\r\n        type: [\"Line\", \"Mark\"]\r\n    }\r\n    // data = null;\r\n\r\n    //load default data if none present\r\n    if (!data) {\r\n        data = {\r\n            \"#75B8A0\": [[-50, 0], [100, 200], [140, -10], [60, 20], [90, 90]],\r\n            \"#DCDCAA\": [[-25, 160], [115, 91]]\r\n        };\r\n    }\r\n\r\n    if (!styles) {\r\n        //styles = defaults;\r\n        styles = defaults;\r\n    }\r\n    //apply canvas size in styles to global canvas\r\n\r\n    let Paths = [];\r\n    let plots = [];\r\n    let XAxis = [];\r\n    let YAxis = [];\r\n    let markerLine = [];\r\n    let displaySVG = [];\r\n\r\n    let combinedData = sortXYArray(data, styles, 80, 80);\r\n    let sortedData = combinedData.sortedData;\r\n\r\n    for (let set in sortedData) {\r\n        let Path = null;\r\n        if (!styles.type || sortedData[set].type === \"Line\" || sortedData[set.type] === \"LineMark\") {\r\n            Path = getPathSVG(\"graphPath\" + set, styles, sortedData[set].drawArray, sortedData[set].color, styles.lineSize);\r\n            Paths.push(Path);\r\n        }\r\n    }\r\n\r\n\r\n    plots = GraphPoints(\"pointsarray\", sortedData, styles);\r\n   \r\n    let displayPop = GetDisplayPop(styles);\r\n\r\n    XAxis = getXAxisSVG(combinedData, styles);\r\n    YAxis = getYAxisSVG(combinedData, styles);\r\n    if (styles.drawmarkerLine !== \"false\") {\r\n        markerLine = getmarkerLine(combinedData, styles);\r\n    }\r\n\r\n    if (styles.drawDisplay !== \"false\") {\r\n        displaySVG = getValueDisplay(combinedData, styles);\r\n    }\r\n    let canvas = drawCanvas(\"LineMarkCanvas\", styles, [markerLine, XAxis, YAxis, Paths, plots, displaySVG, displayPop]);\r\n    return (\r\n        canvas\r\n    )\r\n}\r\n\r\n\r\n\r\nexport function FlexButton(key, styles, mouseDown, mouseHover, mouseExit) {\r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n\r\n\r\n    let buttonStyle = {\r\n        main: {\r\n            topLeftPoint: [0, 0],\r\n            width: 100,\r\n            height: 92,\r\n            fill: styles.btnColor,\r\n            strokeColor: styles.btnStrokeColor,\r\n            strokeWidth: styles.btnStrokeWidth,\r\n            radius: styles.btnRadius,\r\n        },\r\n\r\n        cover: {\r\n            topLeftPoint: [0, 0],\r\n            width: 100,\r\n            height: 100,\r\n            fill: styles.btnColor,\r\n            strokeColor: styles.btnStrokeColor,\r\n            strokeWidth: styles.btnStrokeWidth,\r\n            radius: styles.btnRadius,\r\n            opacity: 0,\r\n            cursor: \"pointer\"\r\n        },\r\n\r\n        shadow: {\r\n            topLeftPoint: [0, 0],\r\n            width: 100,\r\n            height: 100,\r\n            fill: \"black\",\r\n            strokeColor: styles.btnStrokeColor,\r\n            strokeWidth: styles.btnStrokeWidth,\r\n            radius: styles.btnRadius,\r\n            opacity: .6,\r\n        },\r\n        text: {\r\n            placement: styles.btnTextRange\r\n        }\r\n    }\r\n\r\n    let buttonClickedStyle = {\r\n        main: {\r\n            topLeftPoint: [0, 6],\r\n            width: buttonStyle.main.width,\r\n            height: buttonStyle.main.height,\r\n            fill: styles.btnColor,\r\n            strokeColor: styles.btnStrokeColor,\r\n            strokeWidth: styles.btnStrokeWidth,\r\n            radius: styles.btnRadius,\r\n        },\r\n\r\n        cover: {\r\n            topLeftPoint: [0, 0],\r\n            width: 100,\r\n            height: 100,\r\n            fill: \"white\",\r\n            strokeColor: styles.btnStrokeColor,\r\n            strokeWidth: styles.btnStrokeWidth,\r\n            radius: styles.btnRadius,\r\n            opacity: 0,\r\n            cursor: \"pointer\"\r\n        },\r\n\r\n        shadow: {\r\n            topLeftPoint: [0, 5],\r\n            width: 100,\r\n            height: 95,\r\n            fill: \"black\",\r\n            strokeColor: styles.btnStrokeColor,\r\n            strokeWidth: styles.btnStrokeWidth,\r\n            radius: styles.btnRadius,\r\n            opacity: .6,\r\n\r\n        },\r\n        text: {\r\n            placement: [styles.btnTextRange[0], styles.btnTextRange[1] + .75]\r\n        }\r\n    }\r\n\r\n    const [btn, setBtn] = React.useState(buttonStyle);\r\n\r\n\r\n    function moveButton() {\r\n        setBtn(buttonClickedStyle);\r\n    }\r\n    let mouseUp = () => setTimeout(function () { setBtn(buttonStyle) }, 50);\r\n    let mouseDownAction = () => { mouseDown(); moveButton() };\r\n    let shadow = getRectangleSVG(\"dropshadow\", btn.shadow);\r\n\r\n    let button = getRectangleSVG(\"flexButtonrect\", btn.main);\r\n    //let text = getTextSVG(\"btninnertext\", styles.btnDisplay,[0,0], styles.btnFontSize,styles.btnFontColor,styles.btnFontWeight);\r\n    let buttonCover = getRectangleSVG(\"flexButtoncover\", btn.cover, mouseDownAction, mouseExit, mouseHover, mouseUp);\r\n\r\n    let text = getTextSVG(\"btninnertext\", styles.btnDisplay, btn.text.placement, styles.btnFontSize, styles.btnFontColor, styles.btnFontWeight, \"none\")\r\n    let canvas = drawCanvas(key, styles, [shadow, button, text, buttonCover]);\r\n    return (canvas);\r\n}\r\n\r\nexport function DrawShapesGraph(data, styles) {\r\n\r\n    let defaults = {\r\n        canvasWidth: \"40vw\",\r\n        canvasHeight: \"40vw\",\r\n        canvasPadLeft: 0,\r\n        canvasPadTop: 0,\r\n        lineSize: .2,\r\n        fontSize: 2,\r\n        fontColor: \"#7BA7F0\",\r\n        axisColor: \"none\",\r\n        boxAxisColor: \"#7BA7F0\",\r\n        boxRadius: .5,\r\n        axisLineSize: .2,\r\n        xTicks: 1,\r\n        yTicks: 5,\r\n        tickColor: \"#E8E8E8\t\",\r\n        tickLineSize: .1,\r\n        clickPointColor: \"#C18FE4\",\r\n        pointSize: 1,\r\n        selectedPointSize: 2,\r\n        xName: \"\",\r\n        yName: \"thangz\",\r\n        markerLineSize: .3,\r\n        background: \"none\",\r\n    }\r\n\r\n    //load default data if none present\r\n    if (!data) {\r\n        data = {\r\n            \"#DCDCAA\": [[99, 1], [99, 55], [75, 55], [50, 55], [25, 55], [1, 55], [1, 1]],\r\n            \"#75B8A0\": [[99, 1], [99, 30], [75, 25], [50, 30], [25, 30], [1, 30], [1, 1]]\r\n        };\r\n    }\r\n\r\n    if (!styles) {\r\n        styles = defaults;\r\n    }\r\n    \r\n    let Paths = [];\r\n\r\n    let combinedData = sortXYArray(data, styles, 80, 80, true, [[0, 0], [100, 100]]);\r\n\r\n    let sortedData = combinedData.sortedData;\r\n\r\n    for (let set in sortedData) {\r\n        \r\n        let Path = getPathSVG(\"graphPath\" + set, styles, sortedData[set].drawArray, sortedData[set].color, styles.lineSize, 0, 0, sortedData[set].color);\r\n        Paths.push(Path);\r\n    }\r\n\r\n    let boxAxis = getBoxAxis(combinedData, styles);\r\n    let canvas = drawCanvas(\"shapescanvas\", styles, [boxAxis, Paths]);\r\n    return (canvas);\r\n\r\n}\r\n\r\nfunction GetDisplayPop(styles, selectedPoint) {\r\n    let displayPop = {};\r\n    let topLeftPoint = [];\r\n    let pointy = [];\r\n    let text = [];\r\n    let xVal = null;\r\n    let yVal = null;\r\n    let xHeaderFontSize = styles.displayFontSize;\r\n    let yHeaderFontSize = styles.displayFontSize;\r\n    let xValueFontSize = xHeaderFontSize * 1.25;\r\n    let yValueFontSize = yHeaderFontSize * 1.25;\r\n    let xHeaderXPosition = null;\r\n    let yHeaderXPosition = null;\r\n    let xValueXPosition = null;\r\n    let yValueXPosition = null; \r\n    let flip = false;\r\n    if (globalStyles.clickedPoint) {\r\n        \r\n        topLeftPoint = [globalStyles.clickedPoint.draw[0] - 6, globalStyles.clickedPoint.draw[1] -29];\r\n        //flip the box when point is near the top of the graph\r\n        if (topLeftPoint[1] <= 9) {\r\n            topLeftPoint[1] += 40\r\n            flip = true;\r\n        }\r\n        displayPop = {\r\n            topLeftPoint: [topLeftPoint[0] + 2, topLeftPoint[1]],\r\n            fill: styles.clickPointColor,\r\n            width: 8,\r\n            height: 18,\r\n            radius: .5\r\n        }\r\n        //flip the triangle when point is near top of the graph\r\n        if (flip === false) {\r\n            pointy = getPathSVG(\r\n                \"popbox\", styles, [\r\n                [topLeftPoint[0] + 4.5, topLeftPoint[1] + displayPop.height -.1], \r\n                [topLeftPoint[0] + 7.5, topLeftPoint[1] + displayPop.height -.1], \r\n                [topLeftPoint[0] + 6, topLeftPoint[1] + displayPop.height + 4]\r\n            ], \"none\", \"0vw\", 0, 0, styles.clickPointColor)\r\n        }\r\n        else {\r\n            pointy = getPathSVG(\r\n                \"popbox\", styles, [\r\n                [topLeftPoint[0] + 4.5, topLeftPoint[1] + .1], \r\n                [topLeftPoint[0] + 7.5, topLeftPoint[1] + .1], \r\n                [topLeftPoint[0] + 6, topLeftPoint[1] - 4]\r\n            ], \"none\", \"0vw\", 0, 0, styles.clickPointColor)\r\n        }\r\n\r\n        xVal = globalStyles.clickedPoint.value[0].toString() + styles.xSymbol;\r\n        if (xVal.length > 8){\r\n            xValueFontSize = 12/xVal.length;\r\n         }\r\n      \r\n        yVal = commaFormat(globalStyles.clickedPoint.value[1].toString()) + styles.ySymbol;\r\n        if (yVal.length > 8){\r\n           yValueFontSize = 12/yVal.length;\r\n        }\r\n     \r\n        \r\n    \r\n        //this calculates the center position of the text based on the font size and length of input\r\n        xHeaderXPosition = (topLeftPoint[0] + 5.75) - ((xHeaderFontSize/3.11) * (styles.popXDisplay.toString().length -1))  + \"%\";\r\n        yHeaderXPosition = (topLeftPoint[0] + 5.75) - ((yHeaderFontSize/3.11) * (styles.popYDisplay.toString().length -1))  + \"%\";\r\n\r\n        xValueXPosition = (topLeftPoint[0] + 5.75) - ((xValueFontSize/3.11) * (xVal.toString().length -1))  + \"%\";\r\n        yValueXPosition = (topLeftPoint[0] + 5.75) - ((yValueFontSize/3.11) * (yVal.toString().length -1))  + \"%\";\r\n        \r\n        //calc specific if statement, remove first part later\r\n        let irrFontSize = 2;\r\n        let irrHeaderXPosition = (topLeftPoint[0] + 5.75) - ((irrFontSize/3.11) * (xVal.toString().length -1))  + \"%\";\r\n        if (globalStyles.clickedPoint.value[1] === 0) {\r\n            text.push(getTextSVG(\"Xname\", \"IRR\", [(topLeftPoint[0] + 5) - ((xHeaderFontSize/3.11) * (styles.popXDisplay.toString().length -1))  + \"%\", topLeftPoint[1] + 6 + \"%\"], 2, styles.background, \"bold\", ))\r\n        text.push(getTextSVG(\"Xvalue\",  xVal, [irrHeaderXPosition, topLeftPoint[1] + 12 + \"%\"], irrFontSize, styles.background, \"bold\", ))\r\n            \r\n        }\r\n        //keep this part, remove from if statement\r\n        else {\r\n        text.push(getTextSVG(\"Xname\", styles.popXDisplay, [xHeaderXPosition, topLeftPoint[1] + 4 + \"%\"], xHeaderFontSize, styles.background, styles.displayFontWeight, ))\r\n        text.push(getTextSVG(\"Xvalue\",  xVal, [xValueXPosition, topLeftPoint[1] + 8 + \"%\"], xValueFontSize, styles.background, \"bold\", ))\r\n        text.push(getTextSVG(\"yname\", styles.popYDisplay, [yHeaderXPosition, topLeftPoint[1] + 12 + \"%\"], yHeaderFontSize, styles.background, styles.displayFontWeight, ))\r\n        text.push(getTextSVG(\"yvalue\",   yVal, [yValueXPosition, topLeftPoint[1] + 16 + \"%\"], yValueFontSize, styles.background, \"bold\", ))\r\n\r\n\r\n        }\r\n        \r\n        \r\n\r\n        // text.push(getTextSVG(\"Yname\", styles.popYDisplay + \" \" + globalStyles.clickedPoint.value[1] + styles.ySymbol, [topLeftPoint[0] + 1 + \"%\", topLeftPoint[1] + 12 + \"%\"], styles.displayFontSize, styles.background, styles.displayFontWeight, ))\r\n\r\n    }\r\n\r\n    // console.log(pointy);\r\n    if (displayPop.topLeftPoint) {\r\n        return (\r\n            <svg key= \"displayPOP\">\r\n                    \r\n                 {getRectangleSVG(\"displaything\", displayPop)}\r\n                 {pointy}\r\n                 {text}\r\n                 \r\n            </svg>\r\n            \r\n         \r\n        )\r\n        \r\n    }\r\n\r\n}\r\n\r\n//a blank object is getting passed to the first two params for some reason this is a placeholder import as objects\r\nfunction FlexGraph(props, props2, data, styles) {\r\n\r\n    return (LineMarkGraph(data, styles));\r\n}\r\n\r\n\r\nexport default FlexGraph;","import React from 'react';\r\nimport './App.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport {styles} from './App.js';\r\nimport {calcData} from \"./App.js\";\r\nimport {LineMarkGraph} from './flexgraph.js'\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Graph()  {\r\n  let graphStyles = {\r\n    canvasWidth: \"43vw\",\r\n    canvasHeight: \"17vw\",\r\n    canvasPadLeft: \"2vw\",\r\n    canvasPadTop: \"1vw\",\r\n    labelColor: \"none\",\r\n    lineSize: .2,\r\n    fontSize: 1.5,\r\n    displayFontSize: 1.2,\r\n    fontColor: styles.gray,\r\n    axisColor: styles.canvasColor,\r\n    axisLineSize: .3,\r\n    xTicks: 4,\r\n    yTicks: 4,\r\n    tickColor: \"none\",\r\n    tickLineSize: .1,\r\n    clickPointColor: \"#47C4C1\",\r\n    pointSize: 1,\r\n    selectedPointSize: 1.5,\r\n    xName: \"RATE OF RETURN (%)\",\r\n    yName: \"NPV ($)\",\r\n    popXDisplay: \"ROR\",\r\n    popYDisplay: \"NPV\",\r\n    markerLineColor: styles.darkGray,\r\n    markerLineSize: .2,\r\n    background: styles.lightCanvasColor,\r\n    drawDisplay: \"false\",\r\n    xSymbol: \"%\",\r\n    ySymbol: \"\",\r\n    selectedPoint: calcData.npvSnap[0], \r\n\r\n\r\n    drawPoints: \"false\",\r\n    drawLines: \"true\",\r\n    type: [\"Line\", \"Mark\"],\r\n    // selectedPoint: [calcData.r, calcData.theNPV]\r\n  }\r\n\r\n\r\n\r\n\r\n  \r\n  // let calcInput = [[0,0]];\r\n  // if (calcData.npvSnap != 0) {\r\n  //   calcInput = calcData.npvSnap\r\n  // }\r\n  \r\n  let calcInput = [[0,0]];\r\n  let npvSnap = [[0,0]]\r\n\r\n\r\n    \r\n  calcInput = calcData.allNpvPoints;\r\n\r\n\r\n\r\n    \r\n  npvSnap = calcData.npvSnap;\r\n\r\n\r\n\r\n  let data = {\r\n    \"#47C4C1\": calcInput,\r\n    \"#ADDCE3\": npvSnap\r\n  };\r\n\r\n\r\n\r\n\r\n// let styles = [];\r\nlet graph = LineMarkGraph(data, graphStyles);\r\n\r\n\r\n\r\n//<FlexibleXYPlot margin={{left: 0, right: 0, top: 0, bottom: 0}}>    \r\n    return (\r\n      <div>\r\n                  <div style={{color: styles.darkGray, fontSize: \".7vw\", position: \"absolute\", transform: \"rotate(-90deg)\", left: \"-1%\", top: \"48%\"}}>NPV ($)</div>\r\n        <div style={{color: styles.darkGray, fontSize: \".7vw\", position: \"absolute\", left: \"43%\", top: \"93%\"}}>RATE OF RETURN (%)</div>\r\n          {graph}\r\n    \r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default Graph;","import React from 'react';\nimport Sketch from './sketch'\nimport './App.css';\nimport Graph from './graph.js';\n// import findIRR from './irr.js';\n\n\nimport { getPathSVG, drawCanvas, FlexButton, DrawShapesGraph } from \"./flexgraph.js\";\n\n\n\nexport var modCashFlows = [];\n\n\nlet isDraggingSlider = false;\n\nconst dollarFormat = (number) => Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2\n}).format(number);\n\n\nfunction removeCommas(num) {\n\n  if (num) {\n    return parseFloat(num.replace(/,/g, ''));\n  }\n  else {\n    return num;\n  }\n} \n\nfunction rndNearTenth(num) {\n  return parseFloat((Math.round(num * 100) / 100).toFixed(2));\n}\n\nconst commaDecimal = (number) => Intl.NumberFormat('en-US', {\n  style: \"decimal\",\n  maximumFractionDigits: 2\n}).format(number);\n\n\n\n\nlet canvasWidth = window.innerWidth * .9;\nlet canvasHeight = canvasWidth / 2.32;\n\n\n\nexport let calcData = {\n  initialInvest: 0,\n  cashFlows: [0, 0, 0, 0, 0],\n  modCashFlows: [],\n  positiveFlows: [],\n  negativeFlows: [],\n  highestFlow: [],\n  averagePositiveFlow: [],\n  averageNegativeFlow: [],\n  posFlowsTotal: 0,\n  negFlowsTotal: 0,\n  theNPV: 0,\n  npvSnap: [],\n  snapGraphX: 0,\n  r: \"50.00\",\n  testVar: 0,\n  irr: null,\n  discountFactor: .67,\n  avgNpvYr: 0,\n  allNpvPoints: []\n};\nexport let styles = {\n  canvasWidth: canvasWidth,\n  canvasHeight: canvasHeight,\n  canvasColor: \"#E9E9E9\",\n  lightCanvasColor: \"#FFFFFF\",\n  textColor: \"#000000\",\n  innerCashBoxColor: \"#FBFBFB\",\n  medLightGray: \"#D8D8D8\",\n  negativeColor: \"#F50057\",\n  positiveColor: \"#27293E\",\n  darkGray: \"#3A3A3A\",\n  gray: \"#8C8E8E\",\n  irrColor: \"#53DD6C\",\n  npvBtnColor: \"#57A773\",\n  boxRadius: \".5vw\",\n  calcPadLeft: \"8%\",\n  calcPadTop: \"10%\",\n  bottomRowPadTop: \"57%\",\n  firstRowHeight: \"44.5%\",\n  secondRowHeight: \"38%\",\n  lightBlue: \"#47C4C1\"\n}\n\n\n\nconst calcCanvas = {\n  position: \"absolute\",\n  left: \"13%\",\n  top: \"0%\",\n\n  background: styles.canvasColor,\n  height: \"50vw\",\n  width: \"74vw\",\n}\n\nconst calcTitle = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \"2vw\",\n  left: styles.calcPadLeft,\n  top: parseInt(styles.calcPadTop) - 11 + \"%\",\n}\n//..........CASHBOX......//\n\nconst cashFlowBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: styles.calcPadLeft,\n  background: styles.lightCanvasColor,\n  height: \"57%\",\n  width: \"18%\",\n  borderRadius: \".5vw\"\n}\nconst innerCashBox = {\n  position: \"absolute\",\n  top: \"8%\",\n  background: styles.innerCashBoxColor,\n  height: \"83%\",\n  width: \"100%\",\n  overflowY: \"scroll\",\n  overflowX: \"auto\"\n  //fontWeight: \"800\"\n}\n\n// const cashContents = {\n//   fontSize: \"2vw\",\n//   width: \"100%\",\n//   height: \"2.6vw\",\n//   color: styles.positiveColor\n// }\nconst cashContents = {\n  background: \"none\",\n  width: \"100%\",\n  height: \"2.6vw\",\n}\n// const cashInputStyle = {\n//   position: \"absolute\",\n//   background: \"none\",\n//   width: \"57%\",\n//   height: \"22%\",\n//   left: \"27%\",\n//   fontSize: \"1.8vw\",\n//   border: \"none\",\n//   color: styles.positiveColor\n// }\n\n// const negCashInputStyle = {\n//   position: \"absolute\",\n//   background: \"none\",\n//   width: \"57%\",\n//   height: \"22%\",\n//   left: \"27%\",\n//   fontSize: \"1.8vw\",\n//   border: \"none\",\n//   color: styles.negativeColor\n// }\nconst cashBottom = {\n  position: \"absolute\",\n  top: \"88%\",\n  left: \"0%\",\n  width: \"100%\",\n  height: \"12%\",\n  background: \"none\",\n  fontWeight: \"500\",\n  fontSize: \".9vw\",\n  color: styles.darkGray\n}\n\n\n// const negInitialInvStyle = {\n//   fontSize: \"2vw\",\n//   width: \"auto\",\n//   height: \"2.6vw\",\n//   marginLeft: \"15%\",\n//   color: styles.negativeColor,\n\n\n// }\n\nconst lineBreak = {\n  background: \"#F0F0F0\",\n  height: \"1px\",\n  left: \"15%\",\n  width: \"75%\",\n  position: \"absolute\"\n}\n// const minusButtonStyle = {\n\n//   fill: styles.innerCashBoxColor,\n//   color: styles.medLightGray,\n//   stroke: styles.medLightGray,\n//   strokeWidth: \"8%\"\n// }\n// const minusLineStyle = {\n//   stroke: styles.medLightGray,\n//   strokeWidth: \"8%\"\n// }\n\n//.....DISCOUNT RATE BOX.........\n\nconst dRateBox = {\n  position: \"absolute\",\n  top: 70 + \"%\",\n  left: styles.calcPadLeft,\n  background: styles.lightCanvasColor,\n  height: \"15%\",\n  width: cashFlowBox.width,\n  borderRadius: styles.boxRadius\n}\nconst sliderStyle = {\n  position: \"absolute\",\n  top: \"36%\",\n  left: \"11%\",\n  background: \"styles.canvasColor\",\n  cursor: \"pointer\",\n  width: \"75%\",\n  height: \"25%\"\n}\nconst DRateText = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  left: \"1vw\",\n  top: \".8vw\"\n}\nconst DFactorText = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  left: \"1vw\",\n  top: \"65%\"\n}\n//.......SKETCHBOX...........\nconst sketchBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: \"29%\",\n  background: styles.lightCanvasColor,\n  height: styles.firstRowHeight,\n  width: \"41%\",\n  borderRadius: styles.boxRadius\n}\n\n//.....NpvStatBOX.....\n\nconst NpvStatBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: \"73%\",\n  background: styles.lightCanvasColor,\n  height: styles.firstRowHeight,\n  width: \"18.5%\",\n  borderRadius: styles.boxRadius,\n  overflowX: \"hidden\"\n}\n\n// const innerNpvStatBox = {\n//   position: \"absolute\",\n//   top: \"65%\", \n//   background: styles.innerCashBoxColor,\n//   height: \"15%\",\n//   width: \"100%\",\n//   overflowY: \"scroll\",\n//   overflowX: \"auto\"\n//   //fontWeight: \"800\"\n// }\n\n\n\nconst avgNPVHeader = {\n\n  position: \"relative\",\n  fontWeight: \"medium\",\n  fontSize: \"1.2vw\",\n  top: 0,\n  color: styles.gray,\n  textAlign: \"center\",\n  marginTop: \"-.5vw\",\n  marginBottom: 0\n}\n// const histListContents = { \n//   paddingTop: 0,\n//   width: \"100%\",\n//   height:\"30%\",\n//   color: styles.negativeColor\n// }\n\n//......GRAPH BOX.......\n\nconst graphBox = {\n  position: \"absolute\",\n  top: styles.bottomRowPadTop,\n  left: \"29%\",\n  background: styles.lightCanvasColor,\n  height: styles.secondRowHeight,\n  width: \"62.5%\",\n  borderRadius: styles.boxRadius\n}\n\n// const InstructionBox = {\n//   position: \"absolute\",\n//   top: styles.bottomRowPadTop,\n//   left: styles.calcPadLeft,\n//   background: '#FAEFC5',\n//   height: styles.secondRowHeight,\n//   width: \"32.5%\",\n//   borderRadius: styles.boxRadius\n// }\n\n\nconst header1 = {\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  textAlign: \"center\"\n}\n\n\n// const header3 = {\n//   fontWeight: \"bold\",\n//   fontSize: \"1.2vw\",\n//   textAlign: \"center\"\n// }\n\n\n// const arrow1Style = {\n//   position: \"static\",\n//   background: \"none\",\n//   paddingLeft: \"27%\",\n//   paddingTop: \"20%\"\n// }\n\n\n\n\n// const snapButtonPos = {\n//   position: \"absolute\",\n//   bottom: \"15%\",\n\n\n// }\n// const histTitle = {\n//   position: \"absolute\",\n//   fontSize: \"1vw\",\n//   bottom: \"33%\",\n//   left: \"8%\",\n// }\n\n// const histTitle2 = {\n//   position: \"absolute\",\n//   fontSize: \"1vw\",\n//   bottom: \"33%\",\n//   right: \"16%\",\n// }\n// const instructionTitle = {\n//   display: \"grid\",\n//   fontSize: \"1.1vw\",\n//   fontFamily: 'Montserrat',\n//   textAlign: \"center\",\n//   fontWeight: \"bold\"\n// }\n// const instructTextStyle = {\n//   fontSize: \".6vw\",\n//   fontFamily: 'Montserrat',\n//   paddingLeft: \"5%\",\n//   paddingRight: \"5%\",\n//   fontWeight: \"regular\"\n// }\n// const instructTextCenter = {\n//   fontSize: \".7vw\",\n//   paddingLeft: \"5%\",\n//   paddingRight: \"5%\",\n//   textAlign: \"center\",\n//   fontWeight: \"bold\"\n// }\n\n\n\n// function instructionText() {\n//   return (\n//     <div>\n//       <p style={instructionTitle}>INSTRUCTIONS</p>\n//       <p style={instructTextStyle}>1. Enter as many cash flow periods as you'd like. The # inside the dollar sign represents the # of periods in the future where: </p>\n//       <p style={{ position: \"absolute\", left: \"3vw\", marginTop: \"-3%\" }}>{dollSymbol(0, \"black\")}</p>\n//       <p style={instructTextCenter}> = dollars in Period 0 (present day) </p>\n//       <p style={instructTextStyle}>2. When you adjust the discount rate, all future cash flows become \"converted\" into present day units.</p>\n//       <a style={instructTextStyle} href=\"url\">See part 1 + 2 of NPV Video</a>\n//       <p style={instructTextStyle}>3. More instructions and links will go here in the finished version</p>\n\n//     </div>\n//   )\n// }\n\n\nfunction dollSymbol(value, color) {\n  let numSize = .6;\n  let numX = \"39%\";\n  let numY = \"86%\";\n  if (value > 9) {\n    numSize = .5;\n    numX = \"31%\"\n    numY = \"85%\"\n  }\n\n  return (\n\n    <svg style={{ position: \"absolute\", background: \"none\" }} height=\"2.6vw\" width=\"1.5vw\" >\n      <text key=\"dollarSymbol\" style={{ fontSize: \"2vw\", fontWeight: \"400\", fill: color }} x=\"8%\" y=\"75%\">$</text>\n      <circle key=\"dollcircle\" style={{ fill: color }} cx=\"52%\" cy=\"78%\" r=\"18%\" />\n      <text key=\"innernumber\" style={{ fontSize: numSize + \"vw\", fontWeight: \"700\", fill: styles.innerCashBoxColor }} x={numX} y={numY}>{value}</text>\n    </svg>\n\n  )\n}\n\n\n//the bottom arrow is getting shifted up whenever the page reloads for some reason\n\nconst drawArrows = () => {\n  let canvasStyles = {\n    canvasPadLeft: 0,\n    canvasPadTop: 0,\n    canvasWidth: \"74vw\",\n    canvasHeight: \"50vw\",\n    canvasColor: \"none\"\n  };\n\n  let firstArrowLeft = 27;\n  let firstArrowTop = 30;\n  let secondArrowLeft = 71;\n  let secondArrowTop = 30;\n  // let bottomArrowLeft = 80;\n  // let bottomArrowTop = 56\n  let secondArrow = getPathSVG(\"drawArrowb\", canvasStyles, [[secondArrowLeft, secondArrowTop], [secondArrowLeft, secondArrowTop + 3], [secondArrowLeft + 1.25, secondArrowTop + 1.5]], \"none\", 0, 0, 0, styles.medLightGray);\n  let firstArrow = getPathSVG(\"drawArrowa\", canvasStyles, [[firstArrowLeft, firstArrowTop], [firstArrowLeft, firstArrowTop + 3], [firstArrowLeft + 1.25, firstArrowTop + 1.5]], \"none\", 0, 0, 0, styles.medLightGray);\n  // let thirdArrow = getPathSVG(\"thirdarrow\", canvasStyles, [[bottomArrowLeft, bottomArrowTop], [bottomArrowLeft + 3.5, bottomArrowTop], [bottomArrowLeft + 1.75, bottomArrowTop + 2]], \"none\", 0, 0, 0, styles.medLightGray);\n  let canvas = drawCanvas(\"arrowcanvas\", canvasStyles, [firstArrow, secondArrow]);\n  return (canvas);\n}\n    \nfunction npvResult() {\n  const style = {\n    position: \"relative\",\n    fontWeight: \"medium\",\n    fontSize: \"2vw\",\n    top: 0,\n    color: styles.lightBlue,\n    textAlign: \"center\",\n    marginTop: \"-.5vw\",\n    marginBottom: \"0vw\"\n  }\n  // let length = parseInt(calcData.theNPV.toString().length);\n  var npvResult = dollarFormat(calcData.theNPV);\n  let npvLength = npvResult.length\n  if (npvLength >= 12) {\n    style.fontSize = 20/npvLength + \"vw\";\n  }\n  return (\n   <p style={style}>{npvResult}</p> \n  )\n\n}\nfunction jellyJar() {\n\n  calcData.posFlowsTotal = 0;\n  calcData.negFlowsTotal = 0;\n  calcData.highestFlow = [];\n  calcData.positiveFlows = [];\n  calcData.negativeFlows = [];\n  calcData.averagePositiveFlow = [];\n  calcData.averageNegativeFlow = [];\n\n  for (let flow in calcData.modCashFlows) {\n    let flowValue = calcData.modCashFlows[flow];\n  \n    if (flowValue > 0) {\n      if (flowValue > calcData.highestFlow) {\n        calcData.highestFlow = flowValue;\n      }\n      calcData.positiveFlows.push(flowValue);\n      calcData.posFlowsTotal += flowValue;\n    }\n    else if (flowValue < 0) {\n      let inverseFlowValue = flowValue * -1;\n\n      if (inverseFlowValue > calcData.highestFlow) {\n        calcData.highestFlow = inverseFlowValue;\n      }\n      calcData.negativeFlows.push(inverseFlowValue);\n      calcData.negFlowsTotal += inverseFlowValue;\n    }\n  }\n  if (calcData.posFlowsTotal !== 0) {\n    calcData.averagePositiveFlow = calcData.posFlowsTotal/calcData.modCashFlows.length;\n  }\n  if (calcData.negFlowsTotal !== 0) {\n    calcData.averageNegativeFlow = calcData.negFlowsTotal/calcData.modCashFlows.length;\n  }\n\n  let containerHeight = calcData.highestFlow;\n  let heightMultiplier = containerHeight / 96;\n  let negativeLiquidHeight = Number(calcData.averageNegativeFlow/heightMultiplier) + 2;\n  let positiveLiquidHeight = Number(calcData.averagePositiveFlow/heightMultiplier) + 2;\n\n\n\n\n\n\n  // calcData.positiveFlows.sort();\n  // calcData.negativeFlows.sort();\n\n\n\n\n  let jellyStyles = {\n    canvasWidth: \"15vw\",\n    canvasHeight: \"11vw\",\n    canvasPadLeft: \"-.7vw\",\n    canvasPadTop: 0,\n    lineSize: .2,\n    fontSize: 2,\n    fontColor: \"none\",\n    axisColor: \"none\",\n    boxAxisColor: styles.darkGray,\n    boxRadius: .5,\n    axisLineSize: .2,\n\n    tickColor: \"none\",\n    tickLineSize: .1,\n    clickPointColor: \"#C18FE4\",\n    pointSize: 1,\n    selectedPointSize: 2,\n\n    markerLineSize: .3,\n    canvasColor: \"none\",\n}\n  let positiveLiquidDraw = [];\n  let negativeLiquidDraw = [];\n\n//load default data if none present \"#F50057\" \"#27293E\"\n    if (positiveLiquidHeight > 2) {\n     positiveLiquidDraw = [[98, 2], [98, positiveLiquidHeight + negativeLiquidHeight], [2, positiveLiquidHeight + negativeLiquidHeight], [2, 2]];\n    }\n\n    if (negativeLiquidHeight > 2) {\n   \n      negativeLiquidDraw = [[98, 2], [98, negativeLiquidHeight], [2, negativeLiquidHeight], [2, 2]]\n    }\n\n    let data = {\n      \"#27293E\": positiveLiquidDraw,\n      \"#F50057\": negativeLiquidDraw\n    }\n\n\n\n    \n  return DrawShapesGraph(data, jellyStyles);\n}\n\nfunction jellyDisplay() {\n  let posStyle = {\n    fontWeight: \"medium\",\n    color : styles.positiveColor,\n    fontSize: \"1vw\",\n    textAlign: \"center\",\n    margin: 0,\n  }\n\n  let plusStyle = {\n    fontWeight: \"bold\",\n    color : styles.canvasColor,\n    fontSize: \".8vw\",\n    textAlign: \"center\",\n    margin: \"-.2vw\",\n  }\n\n  let negStyle = {\n    fontWeight: \"medium\",\n    color : styles.negativeColor,\n    fontSize: \"1vw\",\n    textAlign: \"center\",\n    marginLeft: \"\",\n    marginTop: 0,\n    marginBottom: 0,\n  }\n  function negOutput() {\n    if (calcData.negFlowsTotal !== 0) {\n      return commaDecimal(calcData.negFlowsTotal * -1);\n    }\n    else {\n      return 0;\n    }\n  }\n\n \n  return (\n    <div style = {{position: \"absolute\", width: \"100%\",height: \"16%\", bottom: \"1%\", background: \"none\"}}>\n      <p style = {posStyle}>{commaDecimal(calcData.posFlowsTotal)}</p>\n      <p style = {plusStyle}>+</p>\n      <p style = {negStyle}>{negOutput()}</p>\n    </div>\n  )\n}\nfunction App() {\n\n\n\n\n  //hook that makes sure dom is rerendered if a button is clicked, even if theNpv hasn't changed\n  const [npvRan, setNpvRan] = React.useState(0);\n  calcData.testVar = npvRan;\n\n  function rorInput() {\n    function percentBox() {\n      return (\n      <input\n        style={{\n          position: \"absolute\",\n          // background: \"none\",\n          width: \"3vw\",\n          // height: \"2.6vw\",\n          top: \"-.4vw\",\n          left: \"7.4vw\",\n          fontSize: \"1.2vw\",\n          borderWidth: \".1vw\",\n          color: styles.lightBlue\n        }}\n        key={\"rorinput\"}\n        value={calcData.r}\n        type=\"text\" name={\"ror\"}\n        onChange={(event) => {\n          if (event.target.value < 0) {\n            calcData.r = 0;\n          }\n          else if (event.target.value > 100) {\n            calcData.r = 100;\n          }\n          else {\n            calcData.r = event.target.value;\n          }\n          calcData.discountFactor = rndNearTenth(1 / (1 + (calcData.r / 100))); findNPV(calcData.cashFlows, calcData.r, calcData.initialInvest)\n        }}/>\n      )\n    }\n\n\n    return (\n      <div style={DRateText}>RATE OF RETURN:{percentBox()}<p style = {{ fontSize: \"1.4vw\", position: \"absolute\", top: \"-2vw\", left: \"11vw\", color: styles.lightBlue}}>%</p></div>\n    )\n  }\n\n\n  function handleCashFlowChange() {\n    calcData.allNpvPoints = [];\n    let yearZero = removeCommas(calcData.cashFlows[0]);\n    calcData.initialInvest = yearZero;\n    //find the npv for every point between 1 and 100\n    for (let i = 0; i <= 100; i++) {\n      let npvOut = null;\n      let rDec = i / 100;\n      let npv = null;\n      for (let flow = 1; flow < calcData.cashFlows.length; flow++) {\n        let cashFlow = removeCommas(calcData.cashFlows[flow]);\n        let powerOf = parseInt(flow) + 1;\n        let discountedFlow = cashFlow / Math.pow(1 + rDec, powerOf);\n        npv += discountedFlow;\n      }\n      npvOut = Math.round((npv + yearZero) * 100) / 100;\n      calcData.allNpvPoints.push([i, npvOut]);\n    }\n\n    findNPV(calcData.cashFlows, calcData.r);\n    calcData.npvSnap = [];\n\n  }\n  function minusButton(value) {\n    return (\n      <svg style={{cursor: \"pointer\", background: styles.canvasColor, position: \"absolute\", left: \"10.8vw\", borderRadius: \"0vw\", marginTop: \"0vw\"}} height=\"1.2vw\" width=\"1.2vw\" onMouseDown={() => { calcData.cashFlows.splice(value, 1); handleCashFlowChange() }} >\n\n        {/* <circle style={minusButtonStyle} cx=\"56%\" cy=\"50%\" r=\"32%\" /> */}\n        <line stroke={styles.darkGray} strokeWidth=\".1vw\" x1=\"30%\" y1=\"70%\" x2=\"70%\" y2=\"30%\" />\n        <line stroke={styles.darkGray} strokeWidth=\".1vw\" x1=\"70%\" y1=\"70%\" x2=\"30%\" y2=\"30%\" />\n      </svg>\n    )\n  }\n\n  // function autoButton() {\n  //   return (\n  //     <div>\n  //       <button onClick={() => { calcData.irr = Math.round((findIRR(calcData.cashFlows, calcData.initialInvest)[0]) * 100) / 100; setNpvRan(npvRan + 1) }}>AUTO IRR</button>\n  //       <p>irr:{calcData.irr}</p>\n  //     </div>\n  //   )\n  // }\n\n\n\n\n\n\n  function plotButton() {\n    let buttonStyle = {\n      canvasWidth: \"13%\",\n      canvasHeight: \"2.6%\",\n      canvasPadLeft: \"10.6%\",\n      canvasPadTop: \"88%\",\n      btnColor: styles.gray,\n      btnStrokeColor: \"none\",\n      btnStrokeWidth: 1,\n      btnRadius: 3,\n      btnDisplay: \"SHOW POINT ON GRAPH\",\n      btnFontSize: 7,\n      btnFontColor: styles.lightCanvasColor,\n      btnFontWeight: \"medium\",\n      btnTextRange: [9.5, 12.2]\n    }\n\n    let mouseDown = () => {\n      if (calcData.theNPV) {\n        calcData.npvSnap.unshift([Number(calcData.r), Number(calcData.theNPV)]);\n        setNpvRan(npvRan + 1);\n      }\n    };\n    return FlexButton(\"plotButton\", buttonStyle, mouseDown)\n  }\n\n  function addMoreButton() {\n    let buttonStyle = {\n      canvasWidth: \"60%\",\n      canvasHeight: \"12%\",\n      canvasPadLeft: \"20%\",\n      canvasPadTop: \"39%\",\n     \n      btnColor: styles.gray,\n      btnStrokeColor: \"none\",\n      btnStrokeWidth: 1,\n      btnRadius: 4,\n      btnDisplay: \"ADD MORE\",\n      btnFontSize: 10,\n      btnFontColor: styles.lightCanvasColor,\n      btnFontWeight: \"medium\",\n      btnTextRange: [25, 13]\n    }\n\n    let mouseDown = () => {calcData.cashFlows.push(0); handleCashFlowChange() };\n    return FlexButton(\"addmoreButton\", buttonStyle, mouseDown)\n  }\n\n  // function logNPV() {\n\n  //   loggedNPVs.unshift(\n  //     <div style = {histListContents}>\n  //       <svg style={{ position: \"absolute\", background: \"none\"}} height=\"30%\" width=\"100%\">\n  //         <text style={{ fontSize: \"1.2vw\" }} x=\"0\" y=\"70%\">{calcData.theNPV.toFixed(2)}</text>\n  //         <text style={{ fontSize: \"1.2vw\" }} x=\"75%\" y=\"70%\">{calcData.r}%</text>\n  //       </svg>\n  //     </div>\n  //     )\n  // }\n  // let drawArrows = {};\n  // React.useEffect(()=> {\n\n\n\n  // });\n  // let zeroCashInputStyle = {\n\n  //   position: \"absolute\",\n  //   background: \"none\",\n  //   width: \"80%\",\n  //   height: \"22%\",\n  //   fontSize: \".7vw\",\n  //   border: \"none\",\n  //   color: styles.positiveColor\n  // }\n\n  function CashFlowContents() {\n\n  \n    let contents = [];\n\n\n\n\n\n    for (let value in calcData.cashFlows) {\n      let color = styles.positiveColor;\n\n      if (calcData.cashFlows[value] < 0) {\n        color = styles.negativeColor;\n      }\n      contents.push(\n        <div key={\"cashflow\" + value}>\n          <div style={cashContents}>\n\n            {dollSymbol(parseInt(value), color)}\n            <input style={{\n              position: \"absolute\",\n              background: \"none\",\n              width: \"8vw\",\n              height: \"2.6vw\",\n              left: \"2vw\",\n              fontSize: \"1.8vw\",\n              border: \"none\",\n              color: color\n            }} key={\"cashflow\" + value}\n              value={calcData.cashFlows[value]}\n              type=\"text\" name={value + \"cashFlow\"}\n              onChange={(event) => {\n                \n                calcData.cashFlows[value] = event.target.value;\n                handleCashFlowChange()\n              }} />\n            {minusButton(value)}\n          </div>\n          <div style={lineBreak} />\n        </div>\n      )\n\n    }\n  \n\n    return (contents)\n  }\n\n  function DiscountRateSlider() {\n    return (\n      <input type=\"range\" min=\"0\" max=\"100\" step={1} style={sliderStyle} value={calcData.r} name=\"ROR\" onChange={(event) => { calcData.r = parseFloat(event.target.value).toFixed(2); calcData.discountFactor = rndNearTenth(1 / (1 + (calcData.r / 100))); findNPV(calcData.cashFlows, calcData.r, calcData.initialInvest) }} />\n    )\n  }\n\n\n\n  return (\n    <div style={calcCanvas}> \n    \n      {drawArrows()}\n      <p style={calcTitle}>NET PRESENT VALUE CALCULATOR</p>\n\n      <div style={cashFlowBox}><p style={header1}>CASH FLOWS</p>\n        <div style={innerCashBox}>{CashFlowContents()}</div>\n        <div style={cashBottom}>{addMoreButton()}</div>\n    \n      </div>\n\n      <div style={dRateBox}>\n        {rorInput()}\n        {DiscountRateSlider()}\n        <p style={DFactorText}>DISCOUNT FACTOR: {calcData.discountFactor}</p>\n\n      </div>\n\n      <div style={sketchBox}>\n        <p style={header1}>CASHFLOWS AT PRESENT VALUE</p>\n        <Sketch />\n      </div>\n\n      <div style={NpvStatBox}>\n        <p style={header1}>NET PRESENT VALUE</p>\n        <div>{npvResult()}</div>\n        <p style={header1}>AVG NPV PER PERIOD</p>\n        <p style={avgNPVHeader}>{dollarFormat(calcData.avgNpvYr)}</p>\n        <div style = {{position: \"absolute\", top: \"36%\"}}>{jellyJar()}</div>\n        {jellyDisplay()}\n        \n\n      </div>\n\n      <div style={graphBox}>\n        <p style ={header1}>RATE OF RETURN V. NPV GRAPH</p>\n\n        {Graph()}\n      </div>\n      {plotButton()}\n\n\n\n\n\n    </div>\n  )\n\n  function findNPV(cashFlows, r) {\n    //push r value to interface \n\n    //ensures DOM will update even if npv didnt change\n    setNpvRan(npvRan + 1);\n\n\n\n    \n    let yearZero = removeCommas(cashFlows[0]);\n\n\n    let npvOut = null;\n    let rDec = r / 100;\n    let npv = null;\n    //reset modded cash flows\n    calcData.modCashFlows = [];\n    calcData.modCashFlows.push(yearZero);\n    calcData.initialInvest = yearZero;\n    for (let flow = 1; flow < cashFlows.length; flow++) {\n      let cashFlow = removeCommas(cashFlows[flow]);\n      \n      let powerOf = parseInt(flow) + 1;\n      let discountedFlow = cashFlow / Math.pow(1 + rDec, powerOf);\n      calcData.modCashFlows.push(discountedFlow);\n      npv += discountedFlow;\n    }\n\n    npvOut = Math.round((npv + yearZero) * 100) / 100;\n\n    calcData.avgNpvYr = (npvOut / (cashFlows.length)).toFixed(2);\n    calcData.theNPV = npvOut.toFixed(2);\n\n    //return (npvOut);\n  }\n  //{calcData.cashFlows.map((number) => <li key ={number.toString()}>{number}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}