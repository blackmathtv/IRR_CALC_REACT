{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cashFlows","App","React","useState","currentCFValue","setCurrentCFValue","r","setr","initialInvest","setInitialInvest","theNpv","setNpv","cashFlowsString","setCashFlowsString","name","onClick","findNPV","type","onChange","event","target","value","min","max","step","strungOut","entry","push","toString","console","log","rDec","npv","flow","powerOf","parseInt","Math","pow","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gKACMA,EAAY,GAmGHC,MAhGf,WAAe,MAG6BC,IAAMC,WAHnC,mBAGRC,EAHQ,KAGQC,EAHR,OAIGH,IAAMC,SAAS,IAJlB,mBAIRG,EAJQ,KAILC,EAJK,OAK2BL,IAAMC,WALjC,mBAKRK,EALQ,KAKOC,EALP,OAMUP,IAAMC,SAAS,GANzB,mBAMRO,EANQ,KAMAC,EANA,OAO+BT,IAAMC,SAAS,IAP9C,mBAORS,EAPQ,KAOSC,EAPT,KAuBb,OACA,6BAEE,6BACE,4BAAKH,GACL,4BAAQI,KAAK,UAAUC,QAAU,kBAAMJ,EAAOK,KAA9C,aAGF,6BACE,oDAA0BR,GAC1B,2BAAOS,KAAK,OAAOH,KAAM,aAAaI,SAAU,SAACC,GAAD,OAAWV,EAAiBU,EAAMC,OAAOC,WAG3F,6BACE,4CAAkBf,EAAlB,KACA,2BAAOW,KAAK,QAAQK,IAAI,IAAIC,IAAI,MAAMC,KAAK,IAAIV,KAAM,MAAMI,SAAU,SAACC,GAAD,OAAWZ,EAAKY,EAAMC,OAAOC,WAGpG,6BACE,4CAAkBT,GAClB,2BAAOK,KAAK,OAAOH,KAAM,WAAWI,SAAU,SAACC,GAAD,OAAWd,EAAkBc,EAAMC,OAAOC,UACxF,4BAAQP,KAAK,cAAcC,QAhC/B,WACE,IAAIU,EAAY,GAEhB,IAAK,IAAIC,KADT1B,EAAU2B,KAAKvB,GACGJ,EAChByB,GAAazB,EAAU0B,GAAOE,WAC9BH,GAAa,IAEfZ,EAAmBY,GACnBI,QAAQC,IAAI9B,KAwBV,mBAMJ,SAASgB,IACP,IAAIe,EAAOzB,EAAE,IACbuB,QAAQC,IAAI,YAAcxB,GAC1B,IAAI0B,EAAM,KACV,IAAK,IAAIC,KAAQjC,EAAW,CAC1B,IAAIkC,EAAQC,SAASF,GAAS,EAC9BD,GAAOhC,EAAUiC,GAAQG,KAAKC,IAAI,EAAIN,EAAOG,GAO/C,OALAL,QAAQC,IAAI,KAAOxB,GACnBuB,QAAQC,IAAI,aAAe9B,GAC3B6B,QAAQC,IAAI,kBAAoBtB,GAChCqB,QAAQC,IAAI,OAASE,GACrBH,QAAQC,IAAIpB,IACHsB,EAAMxB,GAAe8B,QAAQ,KCvDtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.e94a9796.chunk.js","sourcesContent":["import React from 'react';\nconst cashFlows = [];\n\n\nfunction App() {\n  //plain variables in the app function are set back to default every change\n\nconst [currentCFValue, setCurrentCFValue] = React.useState();\nconst [r, setr] = React.useState(50);\nconst [initialInvest, setInitialInvest] = React.useState();\nconst [theNpv, setNpv] = React.useState(0);\nconst [cashFlowsString, setCashFlowsString] = React.useState(\"\");\n\n\n\n\n  function handleCashFlows() {\n    let strungOut = \"\";\n    cashFlows.push(currentCFValue);\n    for (let entry in cashFlows) {\n      strungOut += cashFlows[entry].toString();\n      strungOut += \",\";\n    }\n    setCashFlowsString(strungOut);\n    console.log(cashFlows);\n  }\n\n  return (\n  <div>\n    \n    <div>\n      <h1>{theNpv}</h1>\n      <button name=\"findNPV\" onClick ={() => setNpv(findNPV)}>find NPV</button>\n    </div>\n\n    <div>\n      <div>Initial Investment: {initialInvest}</div>\n      <input type=\"text\" name =\"initialInv\" onChange={(event) => setInitialInvest(event.target.value)} />  \n    </div>\n\n    <div>\n      <div>Target ROR: {r}%</div>\n      <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" name =\"ROR\" onChange={(event) => setr(event.target.value)} />\n    </div>\n\n    <div>\n      <div>Cash Flows: {cashFlowsString}</div>\n      <input type=\"text\" name =\"cashFlow\" onChange={(event) => setCurrentCFValue(event.target.value)} />\n      <button name=\"cashFlowBtn\" onClick ={handleCashFlows}>Add Cash Flow</button>\n    </div>\n\n  </div>\n    \n  )\n  function findNPV() {\n    let rDec = r/100;\n    console.log(\"before r \" + r);\n    var npv = null;\n    for (var flow in cashFlows) {\n      var powerOf=parseInt(flow) +  1;\n      npv += cashFlows[flow] / Math.pow(1 + rDec,  powerOf);\n    }\n    console.log(\"r \" + r);\n    console.log(\"cashflows \" + cashFlows);\n    console.log(\"initial Invest \" + initialInvest);\n    console.log(\"npv \" + npv);\n    console.log(theNpv);\n    return ((npv - initialInvest).toFixed(2));\n  }\n  //{cashFlows.map((number) => <li key ={number.toString()}>{number}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n} \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}