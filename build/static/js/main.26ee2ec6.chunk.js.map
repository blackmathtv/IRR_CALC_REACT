{"version":3,"sources":["drawData.js","sketch.js","flexgraph.js","graph.js","irr.js","App.js","serviceWorker.js","index.js"],"names":["GetDrawData","console","log","drawData","points","numPoints","pos","neg","spacing","wavePoints","negWavePoints","rectangles","bars","glass","betweenGlass","modFlows","values","drawBoxHeight","drawBoxWidth","allBarValues","drawBarHeights","viewHeightMultiplier","barWidth","barPadX","glassPad","doubleGlassPad","barPosx","barCanvas","value","calcData","modCashFlows","push","sort","a","b","length","barPadx","Math","min","barPosX","getRectangleSVG","key","topLeftPoint","width","height","fill","strokeColor","strokeWidth","radius","x","y","stroke","rx","Sketch","React","useState","path","numBars","textWidth","styles","positiveColor","gray","style","fontSize","round","negativeColor","position","background","top","left","viewBox","noCashFlowsStyle","textAlign","marginLeft","fontStyle","display","diff","abs","getValueDisplay","sortedData","displayInit","label","getTextSVG","padTop","displayFontSize","displayColor","displayFontWeight","getPathSVG","color","smoothing","dashSize","heightMultiplier","parseFloat","canvasWidth","canvasHeight","controlPoint","current","previous","next","reverse","o","pointA","pointB","lengthX","lengthY","sqrt","pow","angle","atan2","line","PI","cos","sin","command","d","reduce","acc","point","i","strokeDasharray","svgPath","cpsX","cpsY","cpeX","cpeY","sortXYArray","data","xLimit","yLimit","drawFree","range","combinedData","xMin","xMax","yMin","yMax","padLeft","xMultiplier","yMultiplier","set","lastEntry","xAscending","slice","yAscending","drawArray","xDiff","yDiff","pair","xy","fontWeight","getXAxisSVG","textArray","tickArray","middleX","xLine","axisColor","axisLineSize","rulerOffset","xTicks","rulerStep","rulerPosition","fontColor","tickColor","tickLineSize","xName","getYAxisSVG","yLine","yTicks","yName","transform","GraphPoints","circleArray","selectedPoint","setSelectedPoint","hovered","setHovered","alreadySelected","pointSize","xDraw","yDraw","currentPair","xVal","yVal","clickPointColor","selectedPointSize","centerX","centerY","xRadius","yRadius","onClick","mouseOver","mouseExit","cx","cy","ry","onMouseDown","onMouseOut","onMouseOver","GetCircleSvg","handlePointClick","drawCanvas","ViewBox","toString","canvasPadTop","canvasPadLeft","canvasColor","LineMarkGraph","lineSize","zeroLineColor","zeroLineSize","Paths","plots","Path","plot","XAxis","YAxis","text","getZeroLine","Graph","graphStyles","calcInput","npvSnap","graph","findIRR","window","innerWidth","initialInvest","cashFlows","theNPV","snapGraphX","r","testVar","irr","discountFactor","avgNpvYr","lightCanvasColor","textColor","innerCashBoxColor","medLightGray","darkGray","irrColor","npvBtnColor","boxRadius","calcPadLeft","calcPadTop","bottomRowPadTop","firstRowHeight","secondRowHeight","calcCanvas","calcTitle","parseInt","cashFlowBox","borderRadius","innerCashBox","overflowY","overflowX","cashContents","negCashContents","cashInputStyle","border","negCashInputStyle","cashBottom","plusButtonStyle","plusLineStyle","plusBtnContainer","paddingLeft","paddingTop","cashBtmTxt","negInitialInvStyle","lineBreak","minusButtonStyle","minusLineStyle","dRateBox","sliderStyle","cursor","DRateText","DFactorText","sketchBox","NpvStatBox","NPVHeader","marginTop","graphBox","InstructionBox","header1","snapButtonPos","bottom","instructionTitle","fontFamily","instructTextStyle","paddingRight","instructTextCenter","dollSymbol","numSize","numX","numY","App","npvRan","setNpvRan","zeroCashInputStyle","handleCashFlowChange","findNPV","minusButton","splice","x1","y1","x2","y2","canvasStyles","secondArrow","secondArrowTop","secondArrowLeft","firstArrowTop","firstArrowLeft","bottomArrowLeft","bottomArrowTop","drawArrows","dollColor","contents","placeholder","type","name","onChange","event","target","CashFlowContents","max","step","num","toFixed","Button","padding","variant","unshift","href","initialInvestValue","npvOut","rDec","npv","flow","powerOf","discountedFlow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.26ee2ec6.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport {calcData} from \"./App.js\";\r\n\r\nfunction getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius) {\r\n    return(\r\n        <rect \r\n        key={key}\r\n        x={topLeftPoint[0]} y ={topLeftPoint[1]} //array [x,y]\r\n        width = {width} height = {height}\r\n        fill={fill} //string\r\n        stroke={strokeColor} //string\r\n        strokeWidth={strokeWidth} \r\n        rx={radius}\r\n    />\r\n    )\r\n}\r\n\r\nfunction GetDrawData () {\r\n    console.log(\"Ran GetDrawData\");\r\n   \r\n    \r\n    //values Before \r\n    const drawData = {\r\n        points: { \r\n            numPoints: {pos: null, neg: null},\r\n            spacing: {pos: null, neg: null},    \r\n            wavePoints: [],\r\n            negWavePoints: []  \r\n        },\r\n        rectangles: {\r\n            bars: [],\r\n            glass: [],\r\n            betweenGlass: null,\r\n            modFlows: []\r\n        },\r\n        values: {\r\n            drawBoxHeight: 100,\r\n            drawBoxWidth: 200,\r\n            allBarValues: [],\r\n            drawBarHeights: [],\r\n            viewHeightMultiplier: null,\r\n            barWidth: null,\r\n            barPadX: null,\r\n            glassPad: null,\r\n            doubleGlassPad: null,\r\n            barPosx: null,\r\n            barCanvas: null\r\n        }\r\n    }\r\n    \r\n    for (var value in calcData.modCashFlows) {\r\n        if (calcData.modCashFlows[value] >= 0) {\r\n            drawData.values.allBarValues.push(calcData.modCashFlows[value]);\r\n            \r\n        }\r\n        else if (calcData.modCashFlows[value] < 0) {\r\n            drawData.values.allBarValues.push(calcData.modCashFlows[value] * -1);\r\n        }\r\n    }\r\n    drawData.values.allBarValues.sort((a,b) => b-a);\r\n    drawData.values.viewHeightMultiplier = 92/drawData.values.allBarValues[0];\r\n\r\n    \r\n    \r\n    for (var value in calcData.modCashFlows) {\r\n        if (calcData.modCashFlows[value] >= 0) {\r\n            drawData.values.drawBarHeights.push(calcData.modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.pos +=1;\r\n        }\r\n        if (calcData.modCashFlows[value] < 0) {\r\n            drawData.values.drawBarHeights.push(calcData.modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.neg +=1;\r\n        } \r\n    }\r\n\r\n    drawData.values.barWidth = (drawData.values.drawBoxWidth / (drawData.values.drawBarHeights.length) / 1.5);\r\n    drawData.values.barPadx = drawData.values.barWidth / 2;\r\n    drawData.values.glassPad = Math.min(drawData.values.barPadx / 4, 2);\r\n    drawData.values.doubleGlassPad = drawData.values.glassPad * 2;\r\n    drawData.rectangles.betweenGlass = drawData.values.barPadx - drawData.values.doubleGlassPad;\r\n    drawData.values.barPosX = (drawData.values.barPadx / 2);\r\n    drawData.values.barCanvas = drawData.values.drawBoxHeight - 4;\r\n\r\n    //push svg data for bars\r\n\r\n\r\n    \r\n\r\n        \r\n    return(drawData);\r\n    \r\n}\r\nexport default GetDrawData;\r\n","import React from 'react';\r\nimport DrawSmooth  from \"./bezierInterp.js\";\r\nimport GetDrawData from \"./drawData.js\"\r\nimport { spring } from 'popmotion';\r\nimport { styles } from './App.js'\r\nimport {calcData} from \"./App.js\";\r\n \r\n\r\n\r\nconst pathSettle = 50;\r\n\r\nlet updateData = true;\r\nlet animDrawData = [];\r\nlet drawData = [];\r\n\r\n\r\n\r\nfunction getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius) {\r\n  return(  \r\n      <rect \r\n      key={key}\r\n      x={topLeftPoint[0]} y ={topLeftPoint[1]} //array [x,y]\r\n      width = {width} height = {height}\r\n      fill={fill} //string\r\n      stroke={strokeColor} //string\r\n      strokeWidth={strokeWidth} \r\n      rx={radius}\r\n    />\r\n  \r\n  )\r\n}\r\n\r\nfunction Sketch(){\r\n  console.log(\"Ran Sketch\");  \r\n  \r\n  const [path, setpath] = React.useState();\r\n \r\n  if (updateData){\r\n    drawData = GetDrawData();\r\n    let numBars = drawData.values.drawBarHeights.length;\r\n    let  textWidth = \"50%\";\r\n    if (numBars >= 4) {\r\n    textWidth = (2/numBars)*100 + \"%\";\r\n    } \r\n    //push wave points and rectange svg to local drawData\r\n    for (var value in drawData.values.drawBarHeights) {\r\n      let key = value;\r\n      if (drawData.values.drawBarHeights[value] >= 0) {  \r\n          drawData.rectangles.bars.push(getRectangleSVG(key, [drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value]], drawData.values.barWidth, drawData.values.drawBarHeights[value], styles.positiveColor));\r\n          drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [drawData.values.barPosX - drawData.values.glassPad, 2], drawData.values.barWidth + drawData.values.doubleGlassPad, 96, \"none\", styles.gray, .3, 1));\r\n          //drawData.points.wavePoints.push([drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value]]);\r\n          drawData.points.wavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.barCanvas - drawData.values.drawBarHeights[value]]);         \r\n          //drawData.points.negWavePoints.push([drawData.values.barPosX, drawData.values.drawBoxHeight]);\r\n          drawData.points.negWavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.drawBoxHeight]);\r\n          drawData.rectangles.modFlows.push(<text key={key + \"modText\"} style={{fontSize: textWidth}} fill={styles.positiveColor} x={drawData.values.barPosX -1} y=\"110\">{Math.round(calcData.modCashFlows[value])}</text>)\r\n          drawData.values.barPosX += (drawData.values.barWidth + drawData.values.barPadx);\r\n         \r\n      }\r\n      else if (drawData.values.drawBarHeights[value] < 0) {\r\n          drawData.rectangles.bars.push(getRectangleSVG(key, [drawData.values.barPosX, drawData.values.barCanvas - (drawData.values.drawBarHeights[value] * -1)], drawData.values.barWidth, (drawData.values.drawBarHeights[value] * -1), styles.negativeColor));\r\n          drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [drawData.values.barPosX - drawData.values.glassPad, 2], drawData.values.barWidth + drawData.values.doubleGlassPad, 96, \"none\", styles.gray, .3, 1));\r\n\r\n          //drawData.points.negWavePoints.push([drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n          drawData.points.negWavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n          //  drawData.points.wavePoints.push([drawData.values.barPosX, drawData.values.drawBoxHeight]);\r\n          drawData.points.wavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.drawBoxHeight]);\r\n          drawData.rectangles.modFlows.push(<text key={key + \"modText\"} style={{fontSize: textWidth}} fill={styles.negativeColor} x={drawData.values.barPosX -1} y=\"110\">{Math.round(calcData.modCashFlows[value])}</text>)\r\n          drawData.values.barPosX += (drawData.values.barWidth + drawData.values.barPadx);\r\n          \r\n          \r\n      }\r\n \r\n      //drawData.rectangles.modFlows.push(<p style={{position: \"absolute\", left: modPosX + \"%\", fontSize: \"1vw\", background: \"blue\" }}>3</p>);\r\n\r\n    }\r\n\r\n  }\r\n  else {\r\n    drawData = animDrawData;\r\n  }\r\n\r\n  async function runSpring() {    \r\n    for (let point in drawData.points.wavePoints) {\r\n      spring({ from: drawData.points.wavePoints[point][1], to: pathSettle, stiffness: 150, damping: 5 })\r\n          .start(v => {drawData.points.wavePoints[point][1] = v; setpath(DrawSmooth(drawData.points.wavePoints, 1))})\r\n    }\r\n  }\r\n\r\n  if(drawData.rectangles.bars.length > 0){\r\n    return(\r\n      <div>\r\n        <svg\r\n          style={{\r\n          position: \"absolute\",\r\n          background: 'none',\r\n          top: \"10%\",\r\n          left: \"5%\",\r\n          width: \"90%\", \r\n          height: \"80%\"\r\n          }}\r\n          viewBox=\"0 0 200 100\"\r\n        >{drawData.rectangles.bars}{drawData.rectangles.modFlows}{drawData.rectangles.glass}{path}\r\n        </svg>\r\n        <div>\r\n        {/* <button name=\"animate\" onClick ={ () => {updateData= false; animDrawData = drawData; runSpring()}}>Animate Waves</button>   */}\r\n        \r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n  else {\r\n    const noCashFlowsStyle = {\r\n      textAlign: \"left\",\r\n      marginLeft: \"1vw\",\r\n      fontSize: \"1vw\",\r\n      fontStyle: \"montserrat\",\r\n    }\r\n    return (\r\n    <div>\r\n      <p style={noCashFlowsStyle}>To get started,</p>\r\n      <p style={noCashFlowsStyle}>input some cashflows in the box on the left</p>\r\n    </div>\r\n      \r\n      )\r\n  }\r\n}\r\n\r\n//const lineCommand = point => `L ${point[0]} ${point[1]}`\r\n\r\n\r\nexport default Sketch;","import React from 'react';\r\n\r\nlet display = \"\";\r\n\r\nfunction rndNearTenth(num) {\r\n    return Math.round(num * 100) / 100;\r\n}\r\nfunction invertHex(hex) {\r\n    return \"#\" + (Number(`0x1${hex.slice(1)}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase()\r\n}\r\n\r\nfunction diff(a, b) { return Math.abs(a - b); }\r\n\r\nexport function getValueDisplay(sortedData, styles) {\r\n    if (display === \"\") {\r\n        display = styles.displayInit;\r\n    }\r\n\r\n    let label = getTextSVG(\"displaytext\", display, [33, sortedData.padTop * .4 + \"%\"], styles.displayFontSize, styles.displayColor, styles.displayFontWeight);\r\n    return <svg key=\"valuedisplay\">{label}</svg>\r\n\r\n}\r\n\r\nexport function getRectangleSVG(key, styles, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius, mouseDown, mouseOut, mouseOver) {\r\n    return (\r\n        <rect\r\n            key={key}\r\n            x={topLeftPoint[0] + \"%\"} y={topLeftPoint[1] + \"%\"} //array [x,y]\r\n            width={width + \"%\"} height={height + \"%\"}\r\n            fill={fill} //string\r\n            stroke={strokeColor} //string\r\n            strokeWidth={strokeWidth}\r\n            rx={radius}\r\n            onMouseDown={mouseDown}\r\n            onMouseOut={mouseOut}\r\n            onMouseOver={mouseOver}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport function GetCircleSvg(key, styles, fill, strokeColor, strokeWidth, centerX, centerY, xRadius, yRadius, onClick, mouseOver, mouseExit) {\r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n \r\n    if (!yRadius) {\r\n        yRadius = xRadius * styles.heightMultiplier;\r\n    }\r\n    else {\r\n        yRadius = yRadius * styles.heightMultiplier;\r\n    }\r\n\r\n    return (\r\n        <ellipse\r\n            key={key}\r\n            cx={centerX + \"%\"} cy={centerY + \"%\"}\r\n            rx={xRadius + \"%\"} ry={yRadius + \"%\"}\r\n            fill={fill}\r\n            stroke={strokeColor} //string\r\n            strokeWidth={strokeWidth}\r\n            onMouseDown={onClick}\r\n            onMouseOut={mouseExit}\r\n            onMouseOver={mouseOver}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport function getPathSVG(key, styles, points, color, strokeWidth, smoothing, dashSize, fill) {\r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n \r\n    if (!color) {\r\n        color = \"black\";\r\n    }\r\n\r\n    if (!strokeWidth) {\r\n        strokeWidth = .5;\r\n    }\r\n    if (!dashSize) {\r\n        dashSize = 0;\r\n    }\r\n    if (!fill) {\r\n        fill = \"none\"\r\n    }\r\n\r\n    let controlPoint = null;\r\n    //const points = points;\r\n    const svgPath = (points, command) => {\r\n        // build the d attributes by looping over the points\r\n        const d = points.reduce((acc, point, i, a) => i === 0\r\n            // if first point\r\n            ? `M ${point[0]},${point[1] / styles.heightMultiplier}`\r\n            // else\r\n            : `${acc} ${command(point, i, a)}`\r\n            , '')\r\n        //removed position absolute i hope that doesnt break anything\r\n        return <path key={key} style={{ width: 7, strokeDasharray: dashSize }} d={d} fill={fill} stroke={color} strokeWidth={strokeWidth} />\r\n    }\r\n\r\n\r\n\r\n    if (smoothing) {\r\n\r\n        const line = (pointA, pointB) => {\r\n            const lengthX = pointB[0] - pointA[0]\r\n            const lengthY = pointB[1] - pointA[1]\r\n            return {\r\n                length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\r\n                angle: Math.atan2(lengthY, lengthX)\r\n            }\r\n        }\r\n        controlPoint = (current, previous, next, reverse) => {\r\n            // When 'current' is the first or last point of the array\r\n            // 'previous' or 'next' don't exist.\r\n            // Replace with 'current'\r\n            const p = previous || current\r\n            const n = next || current\r\n            // The smoothing ratio\r\n\r\n            // Properties of the opposed-line\r\n            const o = line(p, n)\r\n            // If is end-control-point, add PI to the angle to go backward\r\n            const angle = o.angle + (reverse ? Math.PI : 0)\r\n            const length = o.length * smoothing\r\n            // The control point position is relative to the current point\r\n            const x = current[0] + Math.cos(angle) * length\r\n            const y = current[1] + Math.sin(angle) * length\r\n            return [x, y]\r\n        }\r\n    }\r\n    const lineCommand = (point, i, a) => {\r\n        if (smoothing) {\r\n            // start control point\r\n            const [cpsX, cpsY] = controlPoint(a[i - 1], a[i - 2], point);\r\n\r\n            // end control point\r\n            const [cpeX, cpeY] = controlPoint(point, a[i - 1], a[i + 1], true)\r\n            return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${point[0]},${point[1] / styles.heightMultiplier}`\r\n        }\r\n        else {\r\n            return `L ${point[0]} ${point[1] / styles.heightMultiplier}`\r\n        }\r\n    }\r\n\r\n\r\n    return (svgPath(points, lineCommand));\r\n}\r\n\r\nexport function sortXYArray(data, xLimit, yLimit, drawFree, range) {\r\n\r\n    if (!drawFree) {\r\n        drawFree = false;\r\n    }\r\n    if (!xLimit) {\r\n        xLimit = 80;\r\n\r\n    }\r\n    if (!yLimit) {\r\n        yLimit = 80;\r\n\r\n    }\r\n\r\n    let combinedData = {\r\n        sortedData: [],\r\n        xLimit: xLimit,\r\n        yLimit: yLimit,\r\n        xMin: 0,\r\n        xMax: 100,\r\n        yMin: -1,\r\n        yMax: 1,\r\n        padLeft: 0,\r\n        padTop: 0,\r\n        xMultiplier: 1,\r\n        yMultiplier: 1,\r\n        drawFree: drawFree\r\n\r\n    };\r\n\r\n\r\n    for (let set in data) {\r\n        let lastEntry = data[set].length - 1;\r\n        let sortedData = {\r\n            xAscending: data[set].slice(),\r\n            yAscending: data[set].slice(),\r\n            xMin: 0,\r\n            xMax: 100,\r\n            yMin: -1,\r\n            yMax: 1,\r\n            xLimit: xLimit,\r\n            yLimit: yLimit,\r\n            padLeft: 0,\r\n            padTop: 0,\r\n            xMultiplier: 0,\r\n            yMultiplier: 0,\r\n            drawArray: [],\r\n            color: set,\r\n\r\n        }\r\n\r\n        sortedData.xAscending.sort(function (a, b) {\r\n            return a[0] - b[0];\r\n        })\r\n\r\n        sortedData.yAscending.sort(function (a, b) {\r\n            return a[1] - b[1];\r\n        });\r\n\r\n        //if range hasnt been specified, dynamically create it\r\n        if (!range) {\r\n            sortedData.xMin = parseFloat(sortedData.xAscending[0][0]);\r\n            sortedData.xMax = parseFloat(sortedData.xAscending[lastEntry][0]);\r\n            sortedData.yMin = parseFloat(sortedData.yAscending[0][1]);\r\n            sortedData.yMax = parseFloat(sortedData.yAscending[lastEntry][1]);\r\n\r\n            //if the ranges of the dataset's mins/ maxs exceed the combined data min max, update the combined\r\n            if (sortedData.xMin < combinedData.xMin) {\r\n                combinedData.xMin = sortedData.xMin;\r\n            }\r\n            if (sortedData.xMax > combinedData.xMax) {\r\n                combinedData.xMax = sortedData.xMax;\r\n            }\r\n            if (sortedData.yMin < combinedData.yMin) {\r\n                combinedData.yMin = sortedData.yMin;\r\n            }\r\n            if (sortedData.xMax > combinedData.yMax) {\r\n                combinedData.yMax = sortedData.yMax;\r\n            }\r\n\r\n        }\r\n        else {\r\n            //set the range to specified if it has been specified\r\n            sortedData.xMin = parseFloat(range[0][0]);\r\n            sortedData.xMax = parseFloat(range[1][0]);\r\n            sortedData.yMin = parseFloat(range[0][1]);\r\n            sortedData.yMax = parseFloat(range[1][1]);\r\n            combinedData.xMin = sortedData.xMin;\r\n            combinedData.xMax = sortedData.xMax;\r\n            combinedData.yMin = sortedData.yMin;\r\n            combinedData.yMax = sortedData.yMax;\r\n        }\r\n        //set the default draw percents to 100% of the canvas\r\n\r\n        sortedData.padLeft = (100 - xLimit) / 2;\r\n        sortedData.padTop = (100 - yLimit) / 2;\r\n\r\n        sortedData.xDiff = sortedData.xMax - sortedData.xMin;\r\n        sortedData.yDiff = sortedData.yMax - sortedData.yMin;\r\n\r\n \r\n        if (sortedData.xDiff !== 0) {\r\n            sortedData.xMultiplier = combinedData.xLimit / sortedData.xDiff;\r\n        }\r\n        else {\r\n            sortedData.xMultiplier = 1\r\n        }\r\n\r\n        if (sortedData.yDiff !== 0) {\r\n            sortedData.yMultiplier = sortedData.yLimit / sortedData.yDiff;\r\n\r\n        }\r\n        else {\r\n            sortedData.yMultiplier = 1;\r\n        }\r\n        combinedData.sortedData.push(sortedData);\r\n    };\r\n    //endof for loop\r\n\r\n    combinedData.padLeft = (100 - xLimit) / 2;\r\n    combinedData.padTop = (100 - yLimit) / 2;\r\n    combinedData.xDiff = combinedData.xMax - combinedData.xMin;\r\n    combinedData.yDiff = combinedData.yMax - combinedData.yMin;\r\n\r\n    //if there is no range differnece, make one\r\n    if (combinedData.xDiff < 10) {\r\n        combinedData.xMax += 5;\r\n        combinedData.xMin -= 5;\r\n        combinedData.xDiff += 10;\r\n    }\r\n\r\n    if (combinedData.yDiff < 10) {\r\n        combinedData.yMin -=5\r\n        combinedData.yMax += 5;\r\n        combinedData.yDiff += 10;\r\n    }\r\n\r\n  \r\n        combinedData.xMultiplier = combinedData.xLimit / combinedData.xDiff;\r\n \r\n   \r\n        combinedData.yMultiplier = combinedData.yLimit / combinedData.yDiff;\r\n\r\n \r\n\r\n    if (combinedData.drawFree === false) {\r\n\r\n        for (let set in combinedData.sortedData) {\r\n            let sortedData = combinedData.sortedData[set];\r\n            //push the modified data in xascending order\r\n            for (let pair in sortedData.xAscending) {\r\n                combinedData.sortedData[set].drawArray.push([((sortedData.xAscending[pair][0] - combinedData.xMin) * combinedData.xMultiplier) + combinedData.padLeft, combinedData.yLimit - ((sortedData.xAscending[pair][1] - combinedData.yMin) * combinedData.yMultiplier) + combinedData.padTop]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        let set = 0\r\n        //data is an object that has keys with the color attribute, use a count instead for set attribute\r\n        for (let i in data) {\r\n            //push the modified data in original order for drawing shapes and stuff            \r\n            for (let pair in data[i]) {\r\n                combinedData.sortedData[set].drawArray.push([((data[i][pair][0] - combinedData.xMin) * combinedData.xMultiplier) + combinedData.padLeft, combinedData.yLimit - ((data[i][pair][1] - combinedData.yMin) * combinedData.yMultiplier) + combinedData.padTop]);\r\n            }\r\n            set += 1;\r\n        }\r\n    }\r\n\r\n    return (combinedData);\r\n\r\n}\r\nexport function getTextSVG(key, display, xy, fontSize, color, fontWeight) {\r\n    if (!xy) {\r\n        xy = [1, 10];\r\n    }\r\n    if (!fontSize) {\r\n        fontSize = 2;\r\n    }\r\n    if (!color) {\r\n        color = \"black\";\r\n    }\r\n\r\n    return (<text key={key} style={{ fontSize: fontSize, fontWeight: fontWeight}} fill={color} x={xy[0]} y={xy[1]}>{display}</text>);\r\n}\r\n\r\nexport function getXAxisSVG(sortedData, styles) {\r\n    let textArray = [];\r\n    let tickArray = [];\r\n\r\n    let middleX = ((100 - sortedData.padLeft) + sortedData.padLeft / 2) / 2;\r\n    let xLine = getPathSVG(\"xLine\", styles, [[sortedData.padLeft, 100 - sortedData.padTop], [100 - sortedData.padLeft, 100 - sortedData.padTop]], styles.axisColor, styles.axisLineSize);\r\n\r\n    let rulerOffset = sortedData.xLimit / styles.xTicks;\r\n    let rulerStep = diff(sortedData.xMin, sortedData.xMax) / styles.xTicks;\r\n    let rulerPosition = sortedData.padLeft;\r\n    for (let i = 0; i <= styles.xTicks; i++) {\r\n        //push ruler values to text array spaced out evenly\r\n        textArray.push(getTextSVG(\"xrulerValue\" + i, Math.round(sortedData.xMin + (rulerStep * i)), [rulerPosition + (rulerOffset * i) + \"%\", 100 - (sortedData.padTop / 2) + \"%\"], styles.fontSize, styles.fontColor));\r\n        if (i >= 1) {\r\n            tickArray.push(getPathSVG(\"xTick\" + i, styles, [[rulerPosition + (rulerOffset * i), 100 - sortedData.padTop], [rulerPosition + (rulerOffset * i), sortedData.padTop]], styles.tickColor, styles.tickLineSize, 0, 1));\r\n\r\n        }\r\n    }\r\n\r\n    textArray.push(getTextSVG(\"xNameText\", styles.xName, [100 - middleX / 2, 100 - (sortedData.padTop * 1.2) + \"%\"], styles.fontSize, styles.fontColor));\r\n\r\n    return (\r\n        <svg key=\"xaxissvg\" >\r\n            {textArray}\r\n            {tickArray}\r\n            {xLine}\r\n        </svg>\r\n    )\r\n}\r\n//<g transform='rotate(90), translate(10.000000, -55.000000)' ></g>\r\nexport function getYAxisSVG(sortedData, styles) {\r\n    let textArray = [];\r\n    let tickArray = [];\r\n\r\n    let middleX = ((100 - sortedData.padLeft) + sortedData.padLeft / 2) / 2;\r\n    let yLine = getPathSVG(\"yLine\", styles, [[sortedData.padLeft, 100 - sortedData.padTop], [sortedData.padLeft, sortedData.padTop]], styles.axisColor, styles.axisLineSize);\r\n\r\n    let rulerOffset = sortedData.yLimit / styles.yTicks; //the offset for thephysical position on the canvas\r\n    let rulerStep = diff(sortedData.yMin, sortedData.yMax) / styles.yTicks; //the value offset \r\n    let rulerPosition = 100 - sortedData.padTop;\r\n    for (let i = 0; i <= styles.yTicks; i++) {\r\n        //push ruler values to text array spaced out evenly\r\n        textArray.push(getTextSVG(\"yrulervalue\" + i, Math.round(sortedData.yMin + (rulerStep * i)), [(sortedData.padLeft / 2) + \"%\", rulerPosition - (rulerOffset * i) + \"%\"], styles.fontSize, styles.fontColor));\r\n        if (i >= 1) {\r\n            tickArray.push(getPathSVG(\"ytickline\" + i, styles, [[sortedData.padLeft, rulerPosition - (rulerOffset * i)], [100 - sortedData.padLeft, rulerPosition - (rulerOffset * i)]], styles.tickColor, styles.tickLineSize, 0, 1));\r\n        }\r\n    }\r\n\r\n\r\n    let label = getTextSVG(\"ylabeltext\", styles.yName, [(-middleX / 2) / styles.heightMultiplier, sortedData.padLeft * 1.3], styles.fontSize, styles.fontColor);\r\n\r\n    return (\r\n        <svg key=\"yaxissvg\">\r\n            <g transform='rotate(-90)' >{label}</g>\r\n            {textArray}\r\n            {tickArray}\r\n            {yLine}\r\n        </svg>\r\n    )\r\n}\r\nexport function getZeroLine(sortedData, styles) {\r\n\r\n    if (sortedData.yMin < 0 && sortedData.yMax > 0) {\r\n        let y = sortedData.yLimit - ((0 - sortedData.yMin) * sortedData.yMultiplier) + sortedData.padTop;\r\n        let range = [[], []];\r\n        range = [[sortedData.padLeft, y], [100 - sortedData.padLeft, y]];\r\n        let path = getPathSVG(\"zeroline\", styles, range, styles.zeroLineColor, styles.zeroLineSize, false, 1);\r\n        let text = getTextSVG(\"0LineMark\", \"0\", [100 - sortedData.padLeft / 1.2, y + \"%\"], styles.fontSize, styles.zeroLineColor)\r\n        return (\r\n            <svg key= \"zeroLine\">\r\n                {text}\r\n                {path}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n//plot scatter plot points with sorted data and styles\r\n\r\n\r\nexport function GraphPoints(key, sortedData, styles) {\r\n    let circleArray = [];\r\n    const [selectedPoint, setSelectedPoint] = React.useState([]);\r\n    const [hovered, setHovered] = React.useState([]);\r\n   \r\n\r\n    function handlePointClick(xVal, yVal) {\r\n\r\n        display = styles.xName + \": \" + xVal + \" \" + styles.yName + \": \" + yVal;\r\n        setSelectedPoint([xVal, yVal]);\r\n\r\n    }\r\n    \r\n    for (let set in sortedData) {\r\n        let alreadySelected = false;\r\n        for (let pair in sortedData[set].drawArray) {\r\n            let color = sortedData[set].color;\r\n            let radius = styles.pointSize;\r\n            \r\n            //the draw coordinates\r\n            let xDraw = sortedData[set].drawArray[pair][0];\r\n            let yDraw = sortedData[set].drawArray[pair][1];\r\n\r\n            //the unmodified data points\r\n            let currentPair = sortedData[set].xAscending[pair];\r\n            let xVal = currentPair[0];\r\n            let yVal = currentPair[1];\r\n            \r\n            if (currentPair[0] === selectedPoint[0] && currentPair[1] === selectedPoint[1] && alreadySelected === false) {\r\n                color = styles.clickPointColor;\r\n                alreadySelected = true;\r\n                radius = styles.selectedPointSize;\r\n            }\r\n            if (set === hovered[0] && pair === hovered[1]) {\r\n                radius = styles.selectedPointSize;\r\n            }\r\n\r\n\r\n            let mouseOver = () => setHovered([set, pair]);\r\n            let mouseExit = () => setHovered([]);\r\n            let mouseDown = () => { handlePointClick(xVal, yVal) };\r\n   \r\n            circleArray.push(GetCircleSvg(key + pair + set, styles, color, \"none\", \"none\", xDraw, yDraw, radius, radius, mouseDown, mouseOver, mouseExit));\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return (circleArray);\r\n}\r\nexport function getBoxAxis(sortedData, styles) {\r\n    let width = 100 - (sortedData.padLeft * 2);\r\n    let height = 100 - (sortedData.padTop * 2);\r\n    let box = getRectangleSVG(\"boxAxis\", [sortedData.padLeft, sortedData.padTop], width, height, \"none\", styles.boxAxisColor, styles.axisLineSize, styles.boxRadius)\r\n    let XAxis = getXAxisSVG(sortedData, styles);\r\n    let YAxis = getYAxisSVG(sortedData, styles);\r\n\r\n    return (\r\n        <g>\r\n            {YAxis}{XAxis}{box}\r\n        </g>\r\n    )\r\n}\r\n   \r\nexport function drawCanvas(key, styles, Sketch) {       \r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n    let ViewBox = \"0 0 100 \" + (100 / styles.heightMultiplier).toString();\r\n\r\n    return (\r\n        <div key = {key} style={{ position: \"absolute\", top: styles.canvasPadTop, left: styles.canvasPadLeft, width: styles.canvasWidth, height: styles.canvasHeight }}>\r\n            <svg style={{ background: styles.canvasColor }} viewBox={ViewBox}>\r\n                {Sketch}\r\n            </svg>\r\n        </div>   \r\n    )\r\n}\r\n\r\nexport function LineMarkGraph(data, styles) {\r\n\r\n    let defaults = {\r\n        canvasWidth: \"40vw\",\r\n        canvasHeight: \"40vw\",\r\n        canvasPadLeft: \"1vw\",\r\n        canvasPadTop: \"1vw\",\r\n        lineSize: .2,\r\n        fontSize: 2,\r\n        fontColor: \"#7BA7F0\",\r\n        axisColor: \"#7BA7F0\",\r\n        axisLineSize: .2,\r\n        xTicks: 4,\r\n        yTicks: 4,\r\n        tickColor: \"#E8E8E8\t\",\r\n        tickLineSize: .1,\r\n        clickPointColor: \"#C18FE4\",\r\n        pointSize: 1,\r\n        selectedPointSize: 2,\r\n        xName: \"X-axis\",\r\n        yName: \"Y-axis\",\r\n        zeroLineColor: \"#FFAAAA\",\r\n        zeroLineSize: .3,\r\n        background: \"none\",\r\n    }\r\n\r\n\r\n\r\n    //load default data if none present\r\n    if (!data) {\r\n        data = {\r\n            \"#75B8A0\": [[-50, 0], [100, 200], [140, -10], [60, 20], [90, 90]],\r\n            \"#DCDCAA\": [[-25, 160], [115, 91]]\r\n        };\r\n    }\r\n\r\n    if (!styles) {\r\n        //styles = defaults;\r\n        styles = defaults;\r\n    }\r\n    //apply canvas size in styles to global canvas\r\n\r\n\r\n\r\n    let Paths = [];\r\n    let plots = [];\r\n\r\n    let combinedData = sortXYArray(data, 80, 80);\r\n    let sortedData = combinedData.sortedData;\r\n    for (let set in sortedData) {\r\n\r\n        let Path = getPathSVG(\"graphPath\" + set, styles, sortedData[set].drawArray, sortedData[set].color, styles.lineSize);\r\n        Paths.push(Path);\r\n\r\n\r\n    }\r\n\r\n    let plot = GraphPoints(\"pointsarray\", sortedData, styles);\r\n    plots.push(plot);\r\n    let XAxis = getXAxisSVG(combinedData, styles);\r\n    let YAxis = getYAxisSVG(combinedData, styles);\r\n    let zeroLine = getZeroLine(combinedData, styles);\r\n    \r\n    let displaySVG = getValueDisplay(combinedData, styles);\r\n    let canvas = drawCanvas(\"LineMarkCanvas\", styles, [zeroLine,XAxis,YAxis,Paths,plots,displaySVG] );\r\n    return (\r\n      canvas\r\n    )\r\n    \r\n}\r\n\r\nexport function flexButton(key, styles, mouseDown, mouseHover, mouseExit) {\r\n    styles.heightMultiplier = parseFloat(styles.canvasWidth) / parseFloat(styles.canvasHeight);\r\n\r\n    let button = getRectangleSVG(\"flexButtonrect\", styles, [0,0], 100, 100, styles.btnColor, styles.btnStrokeColor, styles.btnStrokeWidth, styles.btnRadius, mouseDown, mouseExit, mouseHover)\r\n    //let text = getTextSVG(\"btninnertext\", styles.btnDisplay,[0,0], styles.btnFontSize,styles.btnFontColor,styles.btnFontWeight);\r\n\r\n    let text = getTextSVG(\"btninnertext\", styles.btnDisplay, [2,15], 12)\r\n    let canvas = drawCanvas(key, styles, [button, text]);\r\n    return(canvas);\r\n}\r\n\r\nexport function DrawShapesGraph(data, styles) {\r\n\r\n    let defaults = {\r\n        canvasWidth: \"40vw\",\r\n        canvasHeight: \"40vw\",\r\n        canvasPadLeft: 0,\r\n        canvasPadTop: 0,\r\n        lineSize: .2,\r\n        fontSize: 2,\r\n        fontColor: \"#7BA7F0\",\r\n        axisColor: \"none\",\r\n        boxAxisColor: \"#7BA7F0\",\r\n        boxRadius: .5,\r\n        axisLineSize: .2,\r\n        xTicks: 1,\r\n        yTicks: 5,\r\n        tickColor: \"#E8E8E8\t\",\r\n        tickLineSize: .1,\r\n        clickPointColor: \"#C18FE4\",\r\n        pointSize: 1,\r\n        selectedPointSize: 2,\r\n        xName: \"\",\r\n        yName: \"thangz\",\r\n        zeroLineSize: .3,\r\n        background: \"none\",\r\n    }\r\n\r\n    //load default data if none present\r\n    if (!data) {\r\n        data = {\r\n            \"#DCDCAA\": [[99, 1], [99, 55], [75, 55], [50, 55], [25, 55], [1, 55], [1, 1]],\r\n            \"#75B8A0\": [[99, 1], [99, 30], [75, 25], [50, 30], [25, 30], [1, 30], [1, 1]]\r\n        };\r\n    }\r\n\r\n    if (!styles) {\r\n        styles = defaults;\r\n    }\r\n\r\n    let Paths = [];\r\n    \r\n    let combinedData = sortXYArray(data, 80, 80, true, [[0, 0], [100, 100]]);\r\n    let sortedData = combinedData.sortedData;\r\n    for (let set in sortedData) {\r\n        let Path = getPathSVG(\"graphPath\" + set, styles, sortedData[set].drawArray, sortedData[set].color, styles.lineSize, 0, 0, sortedData[set].color);\r\n        Paths.push(Path);\r\n    }\r\n\r\n    let displaySVG = getValueDisplay(combinedData, styles);\r\n    let boxAxis = getBoxAxis(combinedData, styles);\r\n    let canvas = drawCanvas(\"shapescanvas\", styles, [boxAxis,Paths,displaySVG]);\r\n    return (canvas);\r\n\r\n}\r\n\r\n\r\n//a blank object is getting passed to the first two params for some reason this is a placeholder import as objects\r\nfunction FlexGraph(props, props2, data, styles) {\r\n\r\n    return (LineMarkGraph(data, styles));\r\n}\r\n\r\n\r\nexport default FlexGraph;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport {styles} from './App.js';\r\nimport {calcData} from \"./App.js\";\r\nimport {LineMarkGraph} from './flexgraph.js'\r\n\r\n\r\n\r\n\r\n\r\nfunction Graph()  {\r\n  let graphStyles = {\r\n    canvasWidth: \"36vw\",\r\n    canvasHeight: \"15vw\",\r\n    canvasPadLeft: \"0\",\r\n    canvasPadTop: \"1vw\",\r\n    lineSize: .2,\r\n    fontSize: 2,\r\n    fontColor: styles.gray,\r\n    axisColor: styles.canvasColor,\r\n    axisLineSize: .3,\r\n    xTicks: 4,\r\n    yTicks: 4,\r\n    tickColor: \"#E8E8E8\t\",\r\n    tickLineSize: .1,\r\n    clickPointColor: \"#47C4C1\",\r\n    pointSize: 1,\r\n    selectedPointSize: 2,\r\n    xName: \"DISCOUNT RATE\",\r\n    yName: \"NPV\",\r\n    zeroLineColor: \"#47C4C1\",\r\n    zeroLineSize: .3,\r\n    background: \"none\",\r\n    displayInit: \"DISCOUNT RATE: 0 NPV: 0\",\r\n    displayFontSize: 2,\r\n    displayFontWeight: \"bold\",\r\n    displayColor: \"black\"\r\n  \r\n  }\r\n\r\n \r\n  let calcInput = [[0,0]];\r\n  if (calcData.npvSnap != 0) {\r\n    calcInput = calcData.npvSnap\r\n  }\r\n\r\n\r\nlet lineColor = styles.gray\r\n  let data = {\r\n    \"#C2C2C2\": calcInput\r\n  };\r\n\r\n\r\n// let styles = [];\r\nlet graph = LineMarkGraph(data, graphStyles);\r\n    \r\n//<FlexibleXYPlot margin={{left: 0, right: 0, top: 0, bottom: 0}}>    \r\n    return (\r\n      <div  >\r\n       {graph}\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default Graph;","  \r\nfunction findIRR(cashFlows, initialInv) {\r\n  \r\n    const maxTries = 1000;\r\n    let delta = 1;\r\n    \r\n    let guess = 50;\r\n    const multiplier = NPV(cashFlows, guess, initialInv) > 0 ? 1 : -1;\r\n    let i = 0;\r\n\r\n    function NPV(cashFlows, r, initialInv) {\r\n        let npvOut = null;\r\n        let rDec = r/100;\r\n        let npv = null;\r\n        \r\n        //reset modded cash flows\r\n        for (let flow in cashFlows) {\r\n            let powerOf=parseInt(flow) +  1;\r\n            let discountedFlow = cashFlows[flow] / Math.pow(1 + rDec,  powerOf);\r\n            npv += discountedFlow;\r\n        }\r\n        npvOut = (npv - initialInv);\r\n        return (npvOut);\r\n    }\r\n    \r\n    while ( i < maxTries ) {\r\n       \r\n        \r\n        const guessedNPV = NPV(cashFlows, guess ,initialInv);\r\n        console.log(\"try#  \" + i)\r\n        console.log(\"multiplier \" + multiplier); \r\n        console.log(\"guess \" + guess);\r\n        console.log(\"guessed npv\" + guessedNPV);\r\n        console.log(\"delta \" + delta);\r\n        let multipliedNPV = guessedNPV * multiplier\r\n        if (multipliedNPV > 0) {\r\n            //add the delta, change the size of the guess exponentially depending on how far away it si from zero\r\n            if (delta > .01) {\r\n                delta = Math.pow(multipliedNPV * .01, 2);\r\n            }\r\n            guess += (multiplier * delta);\r\n            i += 1;\r\n        }\r\n        //break if NPV crosses zero\r\n        else break;   \r\n    }\r\n    return [i === maxTries ? \"irr has divergerged\" : guess, i];\r\n    // return (NPV(cashFlows, 0, initialInv));\r\n}\r\n   \r\n\r\nexport default findIRR;","import React from 'react';\nimport Sketch from './sketch'\nimport './App.css';\nimport Graph from './graph.js';\nimport findIRR from './irr.js';\nimport GetDrawData from \"./drawData.js\";\nimport Button from '@material-ui/core/Button';\nimport { getPathSVG, drawCanvas, flexButton } from \"./flexgraph.js\";\n\n\nexport var modCashFlows = [];\n\n\n\n\n\n\nlet canvasWidth = window.innerWidth * .9;\nlet canvasHeight = canvasWidth / 2.32;\nlet loggedNPVs = [];\n\n\nexport let calcData = {\n  initialInvest: 0,\n  cashFlows: [0],\n  modCashFlows: [],\n  theNPV: 0,\n  npvSnap: [],\n  snapGraphX: 0,\n  r: 50,\n  testVar: 0,\n  irr: null,\n  discountFactor: .67,\n  avgNpvYr: 0\n};\nexport let styles = {\n  canvasWidth: canvasWidth,\n  canvasHeight: canvasHeight,\n  canvasColor: \"#E9E9E9\",\n  lightCanvasColor: \"#FFFFFF\",\n  textColor: \"#000000\",\n  innerCashBoxColor: \"#FBFBFB\",\n  medLightGray: \"#D8D8D8\",\n  negativeColor: \"#F50057\",\n  positiveColor: \"#27293E\",\n  darkGray: \"#3A3A3A\",\n  gray: \"#8C8E8E\",\n  irrColor: \"#53DD6C\",\n  npvBtnColor: \"#57A773\",\n  boxRadius: \".5vw\",\n  calcPadLeft: \"8%\",\n  calcPadTop: \"10%\",\n  bottomRowPadTop: \"59%\",\n  firstRowHeight: \"44.5%\",\n  secondRowHeight: \"34%\"\n}\n\nfunction rndNearTenth(num) {\n  return (Math.round(num * 100) / 100).toFixed(2);\n}\n\n\nconst calcCanvas = {\n  position: \"absolute\",\n  left: \"13%\",\n  top: \"10%\",\n\n  background: styles.canvasColor,\n  height: \"50vw\",\n  width: \"74vw\",\n}\n\nconst calcTitle = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \"1.4vw\",\n  left: styles.calcPadLeft,\n  top: parseInt(styles.calcPadTop) - 8 + \"%\",\n}\n//..........CASHBOX......//\n\nconst cashFlowBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: styles.calcPadLeft,\n  background: styles.lightCanvasColor,\n  height: \"30%\",\n  width: \"18%\",\n  borderRadius: \".5vw\"\n}\nconst innerCashBox = {\n  position: \"absolute\",\n  top: \"13%\",\n  background: styles.innerCashBoxColor,\n  height: \"76%\",\n  width: \"100%\",\n  overflowY: \"scroll\",\n  overflowX: \"auto\"\n  //fontWeight: \"800\"\n}\n\nconst cashContents = {\n  fontSize: \"2vw\",\n  width: \"100%\",\n  height: \"2.6vw\",\n  color: styles.positiveColor\n}\nconst negCashContents = {\n  fontSize: \"2vw\",\n  width: \"100%\",\n  height: \"2.6vw\",\n  color: styles.negativeColor\n}\nconst cashInputStyle = {\n  position: \"absolute\",\n  background: \"none\",\n  width: \"57%\",\n  height: \"22%\",\n  left: \"27%\",\n  fontSize: \"1.8vw\",\n  border: \"none\",\n  color: styles.positiveColor\n}\n\nconst negCashInputStyle = {\n  position: \"absolute\",\n  background: \"none\",\n  width: \"57%\",\n  height: \"22%\",\n  left: \"27%\",\n  fontSize: \"1.8vw\",\n  border: \"none\",\n  color: styles.negativeColor\n}\nconst cashBottom = {\n  position: \"absolute\",\n  top: \"88%\",\n  left: \"0%\",\n  width: \"100%\",\n  height: \"12%\",\n  background: \"none\",\n  fontWeight: \"500\",\n  fontSize: \".9vw\",\n  color: styles.darkGray\n}\nconst plusButtonStyle = {\n\n  fill: styles.innerCashBoxColor,\n  color: styles.darkGray,\n  stroke: styles.darkGray,\n  strokeWidth: \"5%\"\n}\nconst plusLineStyle = {\n  stroke: styles.darkGray,\n  strokeWidth: \"5%\"\n}\nconst plusBtnContainer = {\n  position: \"absolute\",\n  paddingLeft: \"70%\",\n  paddingTop: \"3%\"\n}\nconst cashBtmTxt = {\n  position: \"absolute\",\n  top: \"87%\",\n  left: \"29%\",\n  fontSize: \".7vw\",\n  fontWeight: \"medium\"\n\n}\nconst negInitialInvStyle = {\n  fontSize: \"2vw\",\n  width: \"auto\",\n  height: \"2.6vw\",\n  marginLeft: \"15%\",\n  color: styles.negativeColor,\n\n\n}\n\nconst lineBreak = {\n  background: \"#F0F0F0\",\n  height: \"1px\",\n  left: \"15%\",\n  width: \"75%\",\n  position: \"absolute\"\n}\nconst minusButtonStyle = {\n\n  fill: styles.innerCashBoxColor,\n  color: styles.medLightGray,\n  stroke: styles.medLightGray,\n  strokeWidth: \"8%\"\n}\nconst minusLineStyle = {\n  stroke: styles.medLightGray,\n  strokeWidth: \"8%\"\n}\n\n//.....DISCOUNT RATE BOX.........\n\nconst dRateBox = {\n  position: \"absolute\",\n  top: parseInt(styles.calcPadTop) + 32.5 + \"%\",\n  left: styles.calcPadLeft,\n  background: styles.lightCanvasColor,\n  height: \"12%\",\n  width: cashFlowBox.width,\n  borderRadius: styles.boxRadius\n}\nconst sliderStyle = {\n  position: \"absolute\",\n  top: \"60%\",\n  left: \"11%\",\n  background: \"styles.canvasColor\",\n  cursor: \"pointer\",\n  width: \"75%\",\n  height: \"25%\"\n}\nconst DRateText = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  left: \"13%\"\n}\nconst DFactorText = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  left: \"13%\",\n  top: \"20%\"\n}\n//.......SKETCHBOX...........\nconst sketchBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: \"29%\",\n  background: styles.lightCanvasColor,\n  height: styles.firstRowHeight,\n  width: \"41%\",\n  borderRadius: styles.boxRadius\n}\n\n//.....NpvStatBOX.....\n\nconst NpvStatBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: \"73%\",\n  background: styles.lightCanvasColor,\n  height: styles.firstRowHeight,\n  width: \"18.5%\",\n  borderRadius: styles.boxRadius\n}\n\n// const innerNpvStatBox = {\n//   position: \"absolute\",\n//   top: \"65%\", \n//   background: styles.innerCashBoxColor,\n//   height: \"15%\",\n//   width: \"100%\",\n//   overflowY: \"scroll\",\n//   overflowX: \"auto\"\n//   //fontWeight: \"800\"\n// }\n\n\nconst NPVHeader = {\n\n  position: \"relative\",\n  fontWeight: \"medium\",\n  fontSize: \"1.8vw\",\n  top: 0,\n  color: styles.gray,\n  textAlign: \"center\",\n  marginTop: 0\n\n\n}\n// const histListContents = { \n//   paddingTop: 0,\n//   width: \"100%\",\n//   height:\"30%\",\n//   color: styles.negativeColor\n// }\n\n//......GRAPH BOX.......\n\nconst graphBox = {\n  position: \"absolute\",\n  top: styles.bottomRowPadTop,\n  left: \"44%\",\n  background: styles.lightCanvasColor,\n  height: styles.secondRowHeight,\n  width: \"47.5%\",\n  borderRadius: styles.boxRadius\n}\n\nconst InstructionBox = {\n  position: \"absolute\",\n  top: styles.bottomRowPadTop,\n  left: styles.calcPadLeft,\n  background: '#FAEFC5',\n  height: styles.secondRowHeight,\n  width: \"32.5%\",\n  borderRadius: styles.boxRadius\n}\n\n\nconst header1 = {\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  textAlign: \"center\"\n}\n\n\nconst header3 = {\n  fontWeight: \"bold\",\n  fontSize: \"1.2vw\",\n  textAlign: \"center\"\n}\n\n\nconst arrow1Style = {\n  position: \"static\",\n  background: \"none\",\n  paddingLeft: \"27%\",\n  paddingTop: \"20%\"\n}\n\n\n\n\nconst snapButtonPos = {\n  position: \"absolute\",\n  bottom: \"15%\",\n\n\n}\nconst histTitle = {\n  position: \"absolute\",\n  fontSize: \"1vw\",\n  bottom: \"33%\",\n  left: \"8%\",\n}\n\nconst histTitle2 = {\n  position: \"absolute\",\n  fontSize: \"1vw\",\n  bottom: \"33%\",\n  right: \"16%\",\n}\nconst instructionTitle = {\n  display: \"grid\",\n  fontSize: \"1.1vw\",\n  fontFamily: 'Montserrat',\n  textAlign: \"center\",\n  fontWeight: \"bold\"\n}\nconst instructTextStyle = {\n  fontSize: \".6vw\",\n  fontFamily: 'Montserrat',\n  paddingLeft: \"5%\",\n  paddingRight: \"5%\",\n  fontWeight: \"regular\"\n}\nconst instructTextCenter = {\n  fontSize: \".7vw\",\n  paddingLeft: \"5%\",\n  paddingRight: \"5%\",\n  textAlign: \"center\",\n  fontWeight: \"bold\"\n}\n\n\nfunction plotButton() {\n  let buttonStyle = {\n    canvasWidth: \"60%\", \n    canvasHeight: \"15%\", \n    canvasPadLeft:\"20%\",\n    canvasPadTop:\"60%\",\n    btnColor:\"blue\", \n    btnStrokeColor: \"red\", \n    btnStrokeWidth: 1, \n    btnRadius:1,\n    btnDisplay: \"PLOT ON GRAPH\",\n    btnFontSize: 10,\n    btnFontColor: \"black\",\n    btnFontWeight: \"bold\"\n  }\n\n  let mouseDown = () => console.log(\"clicked\");\n  return flexButton(\"plotButton\", buttonStyle, mouseDown)\n}\nfunction instructionText() {\n  return (\n    <div>\n      <p style={instructionTitle}>INSTRUCTIONS</p>\n      <p style={instructTextStyle}>1. Enter as many cash flow periods as you'd like. The # inside the dollar sign represents the # of periods in the future where: </p>\n      <p style={{ position: \"absolute\", left: \"3vw\", marginTop: \"-3%\" }}>{dollSymbol(0, \"black\")}</p>\n      <p style={instructTextCenter}> = dollars in Period 0 (present day) </p>\n      <p style={instructTextStyle}>2. When you adjust the discount rate, all future cash flows become \"converted\" into present day units.</p>\n      <a style={instructTextStyle} href=\"url\">See part 1 + 2 of NPV Video</a>\n      <p style={instructTextStyle}>3. More instructions and links will go here in the finished version</p>\n\n    </div>\n  )\n}\n\nfunction dollSymbol(value, color) {\n  let numSize = .6;\n  let numX = \"39%\";\n  let numY = \"86%\";\n  if (value > 9) {\n    numSize = .5;\n    numX = \"31%\"\n    numY = \"85%\"\n  }\n\n  return (\n\n    <svg style={{ position: \"absolute\", background: \"none\" }} height=\"2.6vw\" width=\"1.5vw\" >\n      <text key=\"dollarSymbol\" style={{ fontSize: \"2vw\", fontWeight: \"400\", fill: color }} x=\"8%\" y=\"75%\">$</text>\n      <circle key=\"dollcircle\" style={{ fill: color }} cx=\"52%\" cy=\"78%\" r=\"18%\" />\n      <text key=\"innernumber\" style={{ fontSize: numSize + \"vw\", fontWeight: \"700\", fill: styles.innerCashBoxColor }} x={numX} y={numY}>{value}</text>\n    </svg>\n\n  )\n}\n\n\n//the bottom arrow is getting shifted up whenever the page reloads for some reason\n\nconst drawArrows = () => {\n  let canvasStyles = {\n    canvasPadLeft: 0, \n    canvasPadTop: 0, \n    canvasWidth: \"74vw\", \n    canvasHeight: \"50vw\", \n    canvasColor: \"none\"\n  };\n\n  let firstArrowLeft = 27;\n  let firstArrowTop = 26;\n  let secondArrowLeft = 71;\n  let secondArrowTop = 26;\n  let bottomArrowLeft = 80;\n  let bottomArrowTop = 56\n  let secondArrow = getPathSVG(\"drawArrowb\", canvasStyles,[[secondArrowLeft, secondArrowTop], [secondArrowLeft, secondArrowTop + 5], [secondArrowLeft + 1.25, secondArrowTop + 2.5]], \"none\", 0, 0, 0, styles.medLightGray);\n  let firstArrow = getPathSVG(\"drawArrowa\", canvasStyles, [[firstArrowLeft, firstArrowTop], [firstArrowLeft, firstArrowTop + 5], [firstArrowLeft + 1.25, firstArrowTop + 2.5]], \"none\", 0, 0, 0, styles.medLightGray);\n  let thirdArrow = getPathSVG(\"thirdarrow\", canvasStyles, [[bottomArrowLeft, bottomArrowTop], [bottomArrowLeft + 3.5, bottomArrowTop], [bottomArrowLeft + 1.75, bottomArrowTop + 2]], \"none\", 0, 0, 0, styles.medLightGray);\n  let canvas = drawCanvas(\"arrowcanvas\", canvasStyles, [firstArrow, thirdArrow, secondArrow]);\n  return (canvas);\n}\n\n\n\nfunction App() {\n\n\n\n  //hook that makes sure dom is rerendered if a button is clicked, even if theNpv hasn't changed\n  const [npvRan, setNpvRan] = React.useState(0);\n  calcData.testVar = npvRan;\n  //console.log( \"irr \" + findIRR([100], 100));\n  let zeroCashInputStyle = {\n\n    position: \"absolute\",\n    background: \"none\",\n    width: \"80%\",\n    height: \"22%\",\n    fontSize: \".7vw\",\n    border: \"none\",\n    color: styles.negativeColor\n  }\n  function handleCashFlowChange() {\n    findNPV(calcData.cashFlows, calcData.r, calcData.initialInvest);\n    calcData.npvSnap = [];\n    loggedNPVs = [];\n  }\n  function minusButton(value) {\n    return (\n      <svg height=\"1.2vw\" width=\"2vw\" onClick={() => { calcData.cashFlows.splice(value, 1); handleCashFlowChange() }} >\n\n        <circle style={minusButtonStyle} cx=\"56%\" cy=\"50%\" r=\"32%\" />\n        <line style={minusLineStyle} x1=\"44%\" y1=\"50%\" x2=\"67%\" y2=\"50%\" />\n      </svg>\n    )\n  }\n\n  function autoButton() {\n    return (\n      <div>\n        <button onClick={() => { calcData.irr = Math.round((findIRR(calcData.cashFlows, calcData.initialInvest)[0]) * 100) / 100; setNpvRan(npvRan + 1) }}>AUTO IRR</button>\n        <p>irr:{calcData.irr}</p>\n      </div>\n    )\n  }\n\n  function cashFlowPlusBtn() {\n    return (\n      <svg height=\"1.3vw\" width=\"1.3vw\" style={plusBtnContainer} onClick={() => { if (calcData.initialInvest != \"\") { calcData.cashFlows.push(0); handleCashFlowChange() } }} >\n        <circle style={plusButtonStyle} cx=\"50%\" cy=\"50%\" r=\"38%\" />\n        <line style={plusLineStyle} x1=\"30%\" y1=\"50%\" x2=\"70%\" y2=\"50%\" />\n        <line style={plusLineStyle} x1=\"50%\" y1=\"70%\" x2=\"50%\" y2=\"30%\" />\n      </svg>\n    )\n  }\n\n\n  // function dollSymbol(value, color) {\n  //   let numSize = .6; \n  //   let numX = \"39%\";\n  //   let numY = \"86%\";\n  //   if (value > 9) {\n  //     numSize= .5;\n  //     numX = \"31%\"\n  //     numY = \"85%\"\n  //   }\n\n  //   return(\n\n  //     <svg style={{position: \"absolute\", background: \"none\"}} height=\"2.6vw\" width=\"1.5vw\" >\n  //       <text style={{fontSize: \"2.2vw\", fontWeight: \"400\", fill: color}} x=\"4%\" y=\"80%\">$</text>\n  //       <circle style={{fill: color}} cx=\"52%\" cy=\"78%\" r=\"18%\"/>\n  //       <text style={{fontSize: numSize + \"vw\", fontWeight: \"700\", fill: styles.innerCashBoxColor}} x={numX} y={numY}>{value}</text>\n  //     </svg>\n\n  //   ) \n  // }\n  function snapNPVBtn() {\n    return (<Button style={{ position: \"relative\", left: \"2vw\", width: \"10vw\", fontSize: \"1vw\", background: styles.gray, color: styles.lightCanvasColor, fontFamily: 'Fira Code', padding: 0, height: \"2vw\", borderRadius: \".2vw\" }} variant=\"contained\" onClick={() => { handleNPVSnap() }}  >PLOT ON GRAPH</Button>)\n    //return (<button style={snapNPVBtnStyle} name=\"npvsnap\" onClick ={ () => {calcData.npvSnap.push({x: calcData.r, y: calcData.theNPV }); calcData.snapGraphX++; setNpvRan(npvRan + 1); }}>FIND NPV</button>  )\n  }\n  function handleNPVSnap() {\n    if (calcData.initialInvest != \"\") {\n      calcData.npvSnap.unshift([calcData.r, calcData.theNPV]);\n      setNpvRan(npvRan + 1);\n    }\n  }\n\n  // function logNPV() {\n\n  //   loggedNPVs.unshift(\n  //     <div style = {histListContents}>\n  //       <svg style={{ position: \"absolute\", background: \"none\"}} height=\"30%\" width=\"100%\">\n  //         <text style={{ fontSize: \"1.2vw\" }} x=\"0\" y=\"70%\">{calcData.theNPV.toFixed(2)}</text>\n  //         <text style={{ fontSize: \"1.2vw\" }} x=\"75%\" y=\"70%\">{calcData.r}%</text>\n  //       </svg>\n  //     </div>\n  //     )\n  // }\n  // let drawArrows = {};\n  // React.useEffect(()=> {\n\n  \n\n  // });\n\n  function CashFlowContents() {\n    let dollColor = styles.negativeColor;\n\n\n    if (calcData.initialInvest === \"\") {\n      zeroCashInputStyle.fontSize = \".8vw\";\n    }\n    else if (calcData.initialInvest >= 0 && calcData.initialInvest != \"\") {\n      zeroCashInputStyle.fontSize = \"2vw\";\n      zeroCashInputStyle.color = styles.negativeColor;\n    }\n    else if (calcData.initialInvest < 0) {\n      zeroCashInputStyle.fontSize = \"2vw\";\n      zeroCashInputStyle.color = styles.positiveColor;\n      dollColor = styles.positiveColor;\n    }\n    let contents = [];\n\n    contents.push(\n      <div key={\"initialentry\"}>\n        <div style={{ position: \"absolute\", left: \"2%\", bottom: \"100%\" }}>{dollSymbol(0, dollColor)}</div>\n        <div style={negInitialInvStyle}>\n          <input style={zeroCashInputStyle} placeholder=\"<Enter Initial Investment Here>\" key={\"inINVhold\"} type=\"text\" name={\"initialInv\"} onChange={(event) => { calcData.initialInvest = event.target.value; handleCashFlowChange() }} />\n        </div>\n        <div style={lineBreak} />\n      </div>\n    )\n\n\n\n    for (let value in calcData.cashFlows) {\n      if (calcData.cashFlows[value] < 0) {\n        contents.push(\n          <div key={\"cashflow\" +value}>\n            <div style={negCashContents}>\n              {minusButton(value)}\n              {dollSymbol(parseInt(value) + 1, styles.negativeColor)}\n              <input style={negCashInputStyle} key={\"cashflow\" + value} value={calcData.cashFlows[value]} type=\"text\" name={value + \"cashFlow\"} onChange={(event) => { calcData.cashFlows[value] = event.target.value; handleCashFlowChange() }} />\n            </div>\n            <div style={lineBreak} />\n          </div>\n        )\n\n      }\n      else {\n        contents.push(\n          <div key={\"cashflowneg\" + value}>\n            <div style={cashContents} >\n              {minusButton(value)}\n              {dollSymbol(parseInt(value) + 1, styles.positiveColor)}\n              <input style={cashInputStyle} key={\"cashflow\" + value} value={calcData.cashFlows[value]} type=\"text\" name={value + \"cashFlow\"} onChange={(event) => { calcData.cashFlows[value] = event.target.value; handleCashFlowChange() }} />\n            </div>\n            <div style={lineBreak} />\n          </div>\n        )\n      }\n    }\n\n    return (contents)\n  }\n  function DiscountRateSlider() {\n    return (\n      <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" style={sliderStyle} name=\"ROR\" onChange={(event) => { calcData.r = event.target.value; calcData.discountFactor = rndNearTenth(1 / (1 + (calcData.r / 100))); findNPV(calcData.cashFlows, calcData.r, calcData.initialInvest) }} />\n    )\n  }\n\n\n\n  return (\n    <div style={calcCanvas}> \n      {drawArrows()}\n      <p style={calcTitle}>NET PRESENT VALUE CALCULATOR</p>\n\n      <div style={cashFlowBox}><p style={header1}>CASH FLOWS</p>\n        <div style={innerCashBox}>{CashFlowContents()}</div>\n        <div style={cashBottom}>{cashFlowPlusBtn()}</div>\n        <p style={cashBtmTxt}>Add another</p>\n      </div>\n\n      <div style={dRateBox}>\n        <p style={DRateText}>RATE OF RETURN: {calcData.r}%</p>\n\n        <p style={DFactorText}>DISCOUNT FACTOR: {calcData.discountFactor}</p>\n        {DiscountRateSlider()}\n      </div>\n\n      <div style={sketchBox}>\n        <p style={header1}>ADJUSTED CASH FLOWS</p>\n        <Sketch />\n      </div>\n\n      <div style={NpvStatBox}>{}\n        <p style={header1}>NET PRESENT VALUE</p>\n        <p style={NPVHeader}>{calcData.theNPV}</p>\n        <p style={header1}>AVG NPV PER YEAR</p>\n        <p style={NPVHeader}>{calcData.avgNpvYr}</p>\n        <div style={snapButtonPos}>{snapNPVBtn()}</div>\n      </div>\n\n      <div style={graphBox}>\n        {Graph()}\n      </div>\n\n      <div style={InstructionBox}>{instructionText()}</div>\n\n\n\n    </div>\n  )\n\n  function findNPV(cashFlows, r, initialInvestValue) {\n    //push r value to interface \n\n    //ensures DOM will update even if npv didnt change\n    setNpvRan(npvRan + 1);\n\n\n    calcData.initialInvest = initialInvestValue;\n    let npvOut = null;\n    let rDec = r / 100;\n    let npv = null;\n    //reset modded cash flows\n    calcData.modCashFlows = [];\n    calcData.modCashFlows.push(calcData.initialInvest * -1);\n    for (let flow in cashFlows) {\n      let powerOf = parseInt(flow) + 1;\n      let discountedFlow = cashFlows[flow] / Math.pow(1 + rDec, powerOf);\n      calcData.modCashFlows.push(discountedFlow);\n      npv += discountedFlow;\n    }\n\n    npvOut = Math.round((npv - calcData.initialInvest) * 100) / 100;\n    calcData.avgNpvYr = (npvOut / cashFlows.length).toFixed(2);\n    calcData.theNPV = npvOut.toFixed(2);\n\n    //return (npvOut);\n  }\n  //{calcData.cashFlows.map((number) => <li key ={number.toString()}>{number}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}