{"version":3,"sources":["drawData.js","sketch.js","flexgraph.js","graph.js","irr.js","App.js","serviceWorker.js","index.js"],"names":["GetDrawData","console","log","drawData","points","numPoints","pos","neg","spacing","wavePoints","negWavePoints","rectangles","bars","glass","betweenGlass","modFlows","values","drawBoxHeight","drawBoxWidth","allBarValues","drawBarHeights","viewHeightMultiplier","barWidth","barPadX","glassPad","doubleGlassPad","barPosx","barCanvas","value","calcData","modCashFlows","push","sort","a","b","length","barPadx","Math","min","barPosX","getRectangleSVG","key","topLeftPoint","width","height","fill","strokeColor","strokeWidth","radius","x","y","stroke","rx","Sketch","React","useState","path","numBars","textWidth","styles","positiveColor","gray","negativeColor","style","fontSize","round","position","background","top","left","viewBox","heightMultiplier","canvasWidth","toString","display","diff","abs","getValueDisplay","sortedData","displayInit","label","getTextSVG","padTop","displayFontSize","displayColor","displayFontWeight","getPathSVG","color","smoothing","dashSize","controlPoint","current","previous","next","reverse","o","pointA","pointB","lengthX","lengthY","sqrt","pow","angle","atan2","line","PI","cos","sin","command","d","reduce","acc","point","i","strokeDasharray","svgPath","cpsX","cpsY","cpeX","cpeY","sortXYArray","data","xLimit","yLimit","drawFree","range","combinedData","xMin","xMax","yMin","yMax","padLeft","xMultiplier","yMultiplier","set","lastEntry","xAscending","slice","yAscending","drawArray","parseFloat","xDiff","yDiff","pair","xy","fontWeight","getXAxisSVG","textArray","tickArray","middleX","xLine","axisColor","axisLineSize","rulerOffset","xTicks","rulerStep","rulerPosition","fontColor","tickColor","tickLineSize","xName","getYAxisSVG","yLine","yTicks","yName","transform","GraphPoints","circleArray","selectedPoint","setSelectedPoint","hovered","setHovered","pointSize","clickPointColor","selectedPointSize","xDraw","yDraw","centerX","centerY","xRadius","yRadius","onClick","mouseOver","mouseExit","cx","cy","ry","onMouseDown","onMouseOut","onMouseOver","GetCircleSvg","xVal","yVal","handlePointClick","getCanvasBounds","parseInt","canvasHeight","LineMarkGraph","canvasPadLeft","canvasPadTop","lineSize","zeroLineColor","zeroLineSize","Paths","plots","Path","plot","XAxis","YAxis","zeroLine","text","getZeroLine","displaySVG","Graph","graphStyles","canvasColor","calcInput","npvSnap","graph","findIRR","window","innerWidth","initialInvest","cashFlows","theNPV","snapGraphX","r","testVar","irr","discountFactor","avgNpvYr","lightCanvasColor","textColor","innerCashBoxColor","medLightGray","darkGray","irrColor","npvBtnColor","boxRadius","calcPadLeft","calcPadTop","bottomRowPadTop","firstRowHeight","secondRowHeight","calcCanvas","calcTitle","cashFlowBox","borderRadius","innerCashBox","overflowY","overflowX","cashContents","negCashContents","cashInputStyle","border","negCashInputStyle","cashBottom","plusButtonStyle","plusLineStyle","plusBtnContainer","paddingLeft","paddingTop","cashBtmTxt","negInitialInvStyle","marginLeft","lineBreak","minusButtonStyle","minusLineStyle","dRateBox","sliderStyle","cursor","DRateText","DFactorText","sketchBox","NpvStatBox","NPVHeader","textAlign","marginTop","graphBox","InstructionBox","header1","arrow1Style","snapButtonPos","bottom","instructionTitle","fontFamily","instructTextStyle","paddingRight","instructTextCenter","dollSymbol","numSize","numX","numY","App","npvRan","setNpvRan","zeroCashInputStyle","handleCashFlowChange","findNPV","minusButton","splice","x1","y1","x2","y2","firstArrow","secondArrow","thirdArrow","bottomArrowLeft","bottomArrowTop","arrow","dollColor","contents","placeholder","type","name","onChange","event","target","CashFlowContents","max","step","num","toFixed","Button","padding","variant","unshift","snapNPVBtn","href","initialInvestValue","npvOut","rDec","npv","flow","powerOf","discountedFlow","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.710a1eee.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport {calcData} from \"./App.js\";\r\n\r\nfunction getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius) {\r\n    return(\r\n        <rect \r\n        key={key}\r\n        x={topLeftPoint[0]} y ={topLeftPoint[1]} //array [x,y]\r\n        width = {width} height = {height}\r\n        fill={fill} //string\r\n        stroke={strokeColor} //string\r\n        strokeWidth={strokeWidth} \r\n        rx={radius}\r\n    />\r\n    )\r\n}\r\n\r\nfunction GetDrawData () {\r\n    console.log(\"Ran GetDrawData\");\r\n   \r\n    \r\n    //values Before \r\n    const drawData = {\r\n        points: { \r\n            numPoints: {pos: null, neg: null},\r\n            spacing: {pos: null, neg: null},    \r\n            wavePoints: [],\r\n            negWavePoints: []  \r\n        },\r\n        rectangles: {\r\n            bars: [],\r\n            glass: [],\r\n            betweenGlass: null,\r\n            modFlows: []\r\n        },\r\n        values: {\r\n            drawBoxHeight: 100,\r\n            drawBoxWidth: 200,\r\n            allBarValues: [],\r\n            drawBarHeights: [],\r\n            viewHeightMultiplier: null,\r\n            barWidth: null,\r\n            barPadX: null,\r\n            glassPad: null,\r\n            doubleGlassPad: null,\r\n            barPosx: null,\r\n            barCanvas: null\r\n        }\r\n    }\r\n    \r\n    for (var value in calcData.modCashFlows) {\r\n        if (calcData.modCashFlows[value] >= 0) {\r\n            drawData.values.allBarValues.push(calcData.modCashFlows[value]);\r\n            \r\n        }\r\n        else if (calcData.modCashFlows[value] < 0) {\r\n            drawData.values.allBarValues.push(calcData.modCashFlows[value] * -1);\r\n        }\r\n    }\r\n    drawData.values.allBarValues.sort((a,b) => b-a);\r\n    drawData.values.viewHeightMultiplier = 92/drawData.values.allBarValues[0];\r\n\r\n    \r\n    \r\n    for (var value in calcData.modCashFlows) {\r\n        if (calcData.modCashFlows[value] >= 0) {\r\n            drawData.values.drawBarHeights.push(calcData.modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.pos +=1;\r\n        }\r\n        if (calcData.modCashFlows[value] < 0) {\r\n            drawData.values.drawBarHeights.push(calcData.modCashFlows[value] * drawData.values.viewHeightMultiplier);\r\n            drawData.points.numPoints.neg +=1;\r\n        } \r\n    }\r\n\r\n    drawData.values.barWidth = (drawData.values.drawBoxWidth / (drawData.values.drawBarHeights.length) / 1.5);\r\n    drawData.values.barPadx = drawData.values.barWidth / 2;\r\n    drawData.values.glassPad = Math.min(drawData.values.barPadx / 4, 2);\r\n    drawData.values.doubleGlassPad = drawData.values.glassPad * 2;\r\n    drawData.rectangles.betweenGlass = drawData.values.barPadx - drawData.values.doubleGlassPad;\r\n    drawData.values.barPosX = (drawData.values.barPadx / 2);\r\n    drawData.values.barCanvas = drawData.values.drawBoxHeight - 4;\r\n\r\n    //push svg data for bars\r\n\r\n\r\n    \r\n\r\n        \r\n    return(drawData);\r\n    \r\n}\r\nexport default GetDrawData;\r\n","import React from 'react';\r\nimport DrawSmooth  from \"./bezierInterp.js\";\r\nimport GetDrawData from \"./drawData.js\"\r\nimport { spring } from 'popmotion';\r\nimport { styles } from './App.js'\r\nimport {calcData} from \"./App.js\";\r\n \r\n\r\n\r\nconst pathSettle = 50;\r\n\r\nlet updateData = true;\r\nlet animDrawData = [];\r\nlet drawData = [];\r\n\r\n\r\n\r\nfunction getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius) {\r\n  return(  \r\n      <rect \r\n      key={key}\r\n      x={topLeftPoint[0]} y ={topLeftPoint[1]} //array [x,y]\r\n      width = {width} height = {height}\r\n      fill={fill} //string\r\n      stroke={strokeColor} //string\r\n      strokeWidth={strokeWidth} \r\n      rx={radius}\r\n    />\r\n  \r\n  )\r\n}\r\n\r\nfunction Sketch(){\r\n  console.log(\"Ran Sketch\");  \r\n  \r\n  const [path, setpath] = React.useState();\r\n \r\n  if (updateData){\r\n    drawData = GetDrawData();\r\n    let numBars = drawData.values.drawBarHeights.length;\r\n    let  textWidth = \".5vw\";\r\n    if (numBars >= 4) {\r\n    textWidth = (2/numBars) + \"vw\";\r\n    } \r\n    //push wave points and rectange svg to local drawData\r\n    for (var value in drawData.values.drawBarHeights) {\r\n      let key = value;\r\n      if (drawData.values.drawBarHeights[value] >= 0) {  \r\n          drawData.rectangles.bars.push(getRectangleSVG(key, [drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value]], drawData.values.barWidth, drawData.values.drawBarHeights[value], styles.positiveColor));\r\n          drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [drawData.values.barPosX - drawData.values.glassPad, 2], drawData.values.barWidth + drawData.values.doubleGlassPad, 96, \"none\", styles.gray, .3, 1));\r\n          //drawData.points.wavePoints.push([drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value]]);\r\n          drawData.points.wavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.barCanvas - drawData.values.drawBarHeights[value]]);         \r\n          //drawData.points.negWavePoints.push([drawData.values.barPosX, drawData.values.drawBoxHeight]);\r\n          drawData.points.negWavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.drawBoxHeight]);\r\n          \r\n         \r\n      }\r\n      else if (drawData.values.drawBarHeights[value] < 0) {\r\n          drawData.rectangles.bars.push(getRectangleSVG(key, [drawData.values.barPosX, drawData.values.barCanvas - (drawData.values.drawBarHeights[value] * -1)], drawData.values.barWidth, (drawData.values.drawBarHeights[value] * -1), styles.negativeColor));\r\n          drawData.rectangles.glass.push(getRectangleSVG(\"glass\" + key, [drawData.values.barPosX - drawData.values.glassPad, 2], drawData.values.barWidth + drawData.values.doubleGlassPad, 96, \"none\", styles.gray, .3, 1));\r\n\r\n          //drawData.points.negWavePoints.push([drawData.values.barPosX, drawData.values.barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n          drawData.points.negWavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.barCanvas - drawData.values.drawBarHeights[value] * -1]);\r\n          //  drawData.points.wavePoints.push([drawData.values.barPosX, drawData.values.drawBoxHeight]);\r\n          drawData.points.wavePoints.push([drawData.values.barPosX + drawData.values.barWidth, drawData.values.drawBoxHeight]);\r\n          \r\n          \r\n          \r\n      }\r\n \r\n      //drawData.rectangles.modFlows.push(<p style={{position: \"absolute\", left: modPosX + \"%\", fontSize: \"1vw\", background: \"blue\" }}>3</p>);\r\n      drawData.rectangles.modFlows.push(<text key={key + \"modText\"} style={{fontSize: textWidth}} x={drawData.values.barPosX -1} y=\"110\">{Math.round(calcData.modCashFlows[value])}</text>)\r\n      drawData.values.barPosX += (drawData.values.barWidth + drawData.values.barPadx);\r\n    }\r\n\r\n  }\r\n  else {\r\n    drawData = animDrawData;\r\n  }\r\n\r\n  async function runSpring() {    \r\n    for (let point in drawData.points.wavePoints) {\r\n      spring({ from: drawData.points.wavePoints[point][1], to: pathSettle, stiffness: 150, damping: 5 })\r\n          .start(v => {drawData.points.wavePoints[point][1] = v; setpath(DrawSmooth(drawData.points.wavePoints, 1))})\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <svg\r\n        style={{\r\n        position: \"absolute\",\r\n        background: 'none',\r\n        top: \"10%\",\r\n        left: \"5%\",\r\n        width: \"90%\", \r\n        height: \"80%\"\r\n        }}\r\n        viewBox=\"0 0 200 100\"\r\n      >{drawData.rectangles.bars}{drawData.rectangles.modFlows}{drawData.rectangles.glass}{path}\r\n      </svg>\r\n      <div>\r\n      {/* <button name=\"animate\" onClick ={ () => {updateData= false; animDrawData = drawData; runSpring()}}>Animate Waves</button>   */}\r\n      \r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\n//const lineCommand = point => `L ${point[0]} ${point[1]}`\r\n\r\n\r\nexport default Sketch;","import React from 'react';\r\n// import initReactFastclick from 'react-fastclick';\r\n// initReactFastclick();\r\n\r\n//!!!!! YOU NEED TO FIX THE BUG WHERE NO DATA= CRASH\r\n\r\nlet canvasWidth = 80;\r\nlet canvasHeight = 40;\r\nlet heightMultiplier = canvasWidth / canvasHeight;\r\nlet viewBox = \"0 0 100 \" + (100 / heightMultiplier).toString();\r\nlet display = \"\";\r\n\r\nfunction rndNearTenth(num) {\r\n    return Math.round(num * 100) / 100;\r\n}\r\nfunction invertHex(hex) {\r\n    return \"#\" + (Number(`0x1${hex.slice(1)}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase()\r\n}\r\n\r\nfunction diff(a, b) { return Math.abs(a - b); }\r\n\r\nexport function getValueDisplay(sortedData, styles) {\r\n    // console.log(sortedData);\r\n    // console.log(\"called display\");\r\n    if (display === \"\") {\r\n        display = styles.displayInit;\r\n    }\r\n\r\n    let label = getTextSVG(\"displaytext\", display, [33, sortedData.padTop * .4 + \"%\"], styles.displayFontSize, styles.displayColor, styles.displayFontWeight);\r\n    return <svg>{label}</svg>\r\n\r\n}\r\n\r\nexport function getRectangleSVG(key, topLeftPoint, width, height, fill, strokeColor, strokeWidth, radius, mouseDown, mouseOut, mouseOver) {\r\n    return (\r\n        <rect\r\n            key={key}\r\n            x={topLeftPoint[0] + \"%\"} y={topLeftPoint[1] + \"%\"} //array [x,y]\r\n            width={width + \"%\"} height={height + \"%\"}\r\n            fill={fill} //string\r\n            stroke={strokeColor} //string\r\n            strokeWidth={strokeWidth}\r\n            rx={radius}\r\n            onMouseDown={mouseDown}\r\n            onMouseOut={mouseOut}\r\n            onMouseOver={mouseOver}\r\n        />\r\n    )\r\n}\r\n\r\n\r\nexport function GetCircleSvg(key, fill, strokeColor, strokeWidth, centerX, centerY, xRadius, yRadius, onClick, mouseOver, mouseExit) {\r\n\r\n    if (!yRadius) {\r\n        yRadius = xRadius * heightMultiplier;\r\n    }\r\n    else {\r\n        yRadius = yRadius * heightMultiplier;\r\n    }\r\n\r\n    return (\r\n        <ellipse\r\n            key={key}\r\n            cx={centerX + \"%\"} cy={centerY + \"%\"}\r\n            rx={xRadius + \"%\"} ry={yRadius + \"%\"}\r\n            fill={fill}\r\n            stroke={strokeColor} //string\r\n            strokeWidth={strokeWidth}\r\n            onMouseDown={onClick}\r\n            onMouseOut={mouseExit}\r\n            onMouseOver={mouseOver}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport function getPathSVG(key, points, color, strokeWidth, smoothing, dashSize, fill) {\r\n    if (!color) {\r\n        color = \"black\";\r\n    }\r\n\r\n    if (!strokeWidth) {\r\n        strokeWidth = .5;\r\n    }\r\n    if (!dashSize) {\r\n        dashSize = 0;\r\n    }\r\n    if (!fill) {\r\n        fill = \"none\"\r\n    }\r\n\r\n    let controlPoint = null;\r\n    //const points = points;\r\n    const svgPath = (points, command) => {\r\n        // build the d attributes by looping over the points\r\n        const d = points.reduce((acc, point, i, a) => i === 0\r\n            // if first point\r\n            ? `M ${point[0]},${point[1] / heightMultiplier}`\r\n            // else\r\n            : `${acc} ${command(point, i, a)}`\r\n            , '')\r\n\r\n        return <path key={key} style={{ position: \"absolute\", width: 7, strokeDasharray: dashSize }} d={d} fill={fill} stroke={color} strokeWidth={strokeWidth} />\r\n    }\r\n\r\n\r\n\r\n    if (smoothing) {\r\n\r\n        const line = (pointA, pointB) => {\r\n            const lengthX = pointB[0] - pointA[0]\r\n            const lengthY = pointB[1] - pointA[1]\r\n            return {\r\n                length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),\r\n                angle: Math.atan2(lengthY, lengthX)\r\n            }\r\n        }\r\n        controlPoint = (current, previous, next, reverse) => {\r\n            // When 'current' is the first or last point of the array\r\n            // 'previous' or 'next' don't exist.\r\n            // Replace with 'current'\r\n            const p = previous || current\r\n            const n = next || current\r\n            // The smoothing ratio\r\n\r\n            // Properties of the opposed-line\r\n            const o = line(p, n)\r\n            // If is end-control-point, add PI to the angle to go backward\r\n            const angle = o.angle + (reverse ? Math.PI : 0)\r\n            const length = o.length * smoothing\r\n            // The control point position is relative to the current point\r\n            const x = current[0] + Math.cos(angle) * length\r\n            const y = current[1] + Math.sin(angle) * length\r\n            return [x, y]\r\n        }\r\n    }\r\n    const lineCommand = (point, i, a) => {\r\n        if (smoothing) {\r\n            // start control point\r\n            const [cpsX, cpsY] = controlPoint(a[i - 1], a[i - 2], point);\r\n\r\n            // end control point\r\n            const [cpeX, cpeY] = controlPoint(point, a[i - 1], a[i + 1], true)\r\n            return `C ${cpsX},${cpsY} ${cpeX},${cpeY} ${point[0]},${point[1] / heightMultiplier}`\r\n        }\r\n        else {\r\n            return `L ${point[0]} ${point[1] / heightMultiplier}`\r\n        }\r\n    }\r\n\r\n\r\n    return (svgPath(points, lineCommand));\r\n}\r\n\r\nexport function sortXYArray(data, xLimit, yLimit, drawFree, range) {\r\n\r\n    if (!drawFree) {\r\n        drawFree = false;\r\n    }\r\n    if (!xLimit) {\r\n        xLimit = 80;\r\n\r\n    }\r\n    if (!yLimit) {\r\n        yLimit = 80;\r\n\r\n    }\r\n\r\n    let combinedData = {\r\n        sortedData: [],\r\n        xLimit: xLimit,\r\n        yLimit: yLimit,\r\n        xMin: 0,\r\n        xMax: 100,\r\n        yMin: -1,\r\n        yMax: 1,\r\n        padLeft: 0,\r\n        padTop: 0,\r\n        xMultiplier: 1,\r\n        yMultiplier: 1,\r\n        drawFree: drawFree\r\n\r\n    };\r\n\r\n\r\n    for (let set in data) {\r\n        let lastEntry = data[set].length - 1;\r\n        let sortedData = {\r\n            xAscending: data[set].slice(),\r\n            yAscending: data[set].slice(),\r\n            xMin: 0,\r\n            xMax: 100,\r\n            yMin: -1,\r\n            yMax: 1,\r\n            xLimit: xLimit,\r\n            yLimit: yLimit,\r\n            padLeft: 0,\r\n            padTop: 0,\r\n            xMultiplier: 0,\r\n            yMultiplier: 0,\r\n            drawArray: [],\r\n            color: set,\r\n\r\n        }\r\n\r\n        sortedData.xAscending.sort(function (a, b) {\r\n            return a[0] - b[0];\r\n        })\r\n\r\n        sortedData.yAscending.sort(function (a, b) {\r\n            return a[1] - b[1];\r\n        });\r\n\r\n        //if range hasnt been specified, dynamically create it\r\n        if (!range) {\r\n            sortedData.xMin = parseFloat(sortedData.xAscending[0][0]);\r\n            sortedData.xMax = parseFloat(sortedData.xAscending[lastEntry][0]);\r\n            sortedData.yMin = parseFloat(sortedData.yAscending[0][1]);\r\n            sortedData.yMax = parseFloat(sortedData.yAscending[lastEntry][1]);\r\n\r\n            //if the ranges of the dataset's mins/ maxs exceed the combined data min max, update the combined\r\n            if (sortedData.xMin < combinedData.xMin) {\r\n                combinedData.xMin = sortedData.xMin;\r\n            }\r\n            if (sortedData.xMax > combinedData.xMax) {\r\n                combinedData.xMax = sortedData.xMax;\r\n            }\r\n            if (sortedData.yMin < combinedData.yMin) {\r\n                combinedData.yMin = sortedData.yMin;\r\n            }\r\n            if (sortedData.xMax > combinedData.yMax) {\r\n                combinedData.yMax = sortedData.yMax;\r\n            }\r\n\r\n        }\r\n        else {\r\n            //set the range to specified if it has been specified\r\n            sortedData.xMin = parseFloat(range[0][0]);\r\n            sortedData.xMax = parseFloat(range[1][0]);\r\n            sortedData.yMin = parseFloat(range[0][1]);\r\n            sortedData.yMax = parseFloat(range[1][1]);\r\n            combinedData.xMin = sortedData.xMin;\r\n            combinedData.xMax = sortedData.xMax;\r\n            combinedData.yMin = sortedData.yMin;\r\n            combinedData.yMax = sortedData.yMax;\r\n        }\r\n        //set the default draw percents to 100% of the canvas\r\n\r\n        sortedData.padLeft = (100 - xLimit) / 2;\r\n        sortedData.padTop = (100 - yLimit) / 2;\r\n\r\n        sortedData.xDiff = sortedData.xMax - sortedData.xMin;\r\n        sortedData.yDiff = sortedData.yMax - sortedData.yMin;\r\n\r\n \r\n        if (sortedData.xDiff !== 0) {\r\n            sortedData.xMultiplier = combinedData.xLimit / sortedData.xDiff;\r\n        }\r\n        else {\r\n            sortedData.xMultiplier = 1\r\n        }\r\n\r\n        if (sortedData.yDiff !== 0) {\r\n            sortedData.yMultiplier = sortedData.yLimit / sortedData.yDiff;\r\n\r\n        }\r\n        else {\r\n            sortedData.yMultiplier = 1;\r\n        }\r\n        combinedData.sortedData.push(sortedData);\r\n    };\r\n    //endof for loop\r\n\r\n    combinedData.padLeft = (100 - xLimit) / 2;\r\n    combinedData.padTop = (100 - yLimit) / 2;\r\n    combinedData.xDiff = combinedData.xMax - combinedData.xMin;\r\n    combinedData.yDiff = combinedData.yMax - combinedData.yMin;\r\n\r\n    //if there is no range differnece, make one\r\n    if (combinedData.xDiff < 10) {\r\n        combinedData.xMax += 5;\r\n        combinedData.xMin -= 5;\r\n        combinedData.xDiff += 10;\r\n    }\r\n\r\n    if (combinedData.yDiff < 10) {\r\n        combinedData.yMin -=5\r\n        combinedData.yMax += 5;\r\n        combinedData.yDiff += 10;\r\n    }\r\n\r\n  \r\n        combinedData.xMultiplier = combinedData.xLimit / combinedData.xDiff;\r\n \r\n   \r\n        combinedData.yMultiplier = combinedData.yLimit / combinedData.yDiff;\r\n\r\n \r\n\r\n    if (combinedData.drawFree === false) {\r\n\r\n        for (let set in combinedData.sortedData) {\r\n            let sortedData = combinedData.sortedData[set];\r\n            //push the modified data in xascending order\r\n            for (let pair in sortedData.xAscending) {\r\n                combinedData.sortedData[set].drawArray.push([((sortedData.xAscending[pair][0] - combinedData.xMin) * combinedData.xMultiplier) + combinedData.padLeft, combinedData.yLimit - ((sortedData.xAscending[pair][1] - combinedData.yMin) * combinedData.yMultiplier) + combinedData.padTop]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        let set = 0\r\n        //data is an object that has keys with the color attribute, use a count instead for set attribute\r\n        for (let i in data) {\r\n            //push the modified data in original order for drawing shapes and stuff            \r\n            for (let pair in data[i]) {\r\n                combinedData.sortedData[set].drawArray.push([((data[i][pair][0] - combinedData.xMin) * combinedData.xMultiplier) + combinedData.padLeft, combinedData.yLimit - ((data[i][pair][1] - combinedData.yMin) * combinedData.yMultiplier) + combinedData.padTop]);\r\n            }\r\n            set += 1;\r\n        }\r\n    }\r\n\r\n    return (combinedData);\r\n\r\n}\r\nexport function getTextSVG(key, display, xy, fontSize, color, fontWeight) {\r\n    if (!xy) {\r\n        xy = [1, 10];\r\n    }\r\n    if (!fontSize) {\r\n        fontSize = 2;\r\n    }\r\n    if (!color) {\r\n        color = \"black\";\r\n    }\r\n\r\n    return (<text key={key} style={{ fontSize: fontSize, fontWeight: fontWeight}} fill={color} x={xy[0]} y={xy[1]}>{display}</text>);\r\n}\r\n\r\nexport function getXAxisSVG(sortedData, styles) {\r\n    let textArray = [];\r\n    let tickArray = [];\r\n\r\n    let middleX = ((100 - sortedData.padLeft) + sortedData.padLeft / 2) / 2;\r\n    let xLine = getPathSVG(\"xLine\", [[sortedData.padLeft, 100 - sortedData.padTop], [100 - sortedData.padLeft, 100 - sortedData.padTop]], styles.axisColor, styles.axisLineSize);\r\n\r\n    let rulerOffset = sortedData.xLimit / styles.xTicks;\r\n    let rulerStep = diff(sortedData.xMin, sortedData.xMax) / styles.xTicks;\r\n    let rulerPosition = sortedData.padLeft;\r\n    for (let i = 0; i <= styles.xTicks; i++) {\r\n        //push ruler values to text array spaced out evenly\r\n        textArray.push(getTextSVG(\"xrulerValue\" + i, Math.round(sortedData.xMin + (rulerStep * i)), [rulerPosition + (rulerOffset * i) + \"%\", 100 - (sortedData.padTop / 2) + \"%\"], styles.fontSize, styles.fontColor));\r\n        if (i >= 1) {\r\n            tickArray.push(getPathSVG(\"xTick\" + i, [[rulerPosition + (rulerOffset * i), 100 - sortedData.padTop], [rulerPosition + (rulerOffset * i), sortedData.padTop]], styles.tickColor, styles.tickLineSize));\r\n\r\n        }\r\n    }\r\n\r\n    textArray.push(getTextSVG(\"xNameText\", styles.xName, [100 - middleX / 2, 100 - (sortedData.padTop * 1.2) + \"%\"], styles.fontSize, styles.fontColor));\r\n\r\n    return (\r\n        <svg  >\r\n            {textArray}\r\n            {tickArray}\r\n            {xLine}\r\n        </svg>\r\n    )\r\n}\r\n//<g transform='rotate(90), translate(10.000000, -55.000000)' ></g>\r\nexport function getYAxisSVG(sortedData, styles) {\r\n    let textArray = [];\r\n    let tickArray = [];\r\n\r\n    let middleX = ((100 - sortedData.padLeft) + sortedData.padLeft / 2) / 2;\r\n    let yLine = getPathSVG(\"yLine\", [[sortedData.padLeft, 100 - sortedData.padTop], [sortedData.padLeft, sortedData.padTop]], styles.axisColor, styles.axisLineSize);\r\n\r\n    let rulerOffset = sortedData.yLimit / styles.yTicks; //the offset for thephysical position on the canvas\r\n    let rulerStep = diff(sortedData.yMin, sortedData.yMax) / styles.yTicks; //the value offset \r\n    let rulerPosition = 100 - sortedData.padTop;\r\n    for (let i = 0; i <= styles.yTicks; i++) {\r\n        //push ruler values to text array spaced out evenly\r\n        textArray.push(getTextSVG(\"yrulervalue\" + i, Math.round(sortedData.yMin + (rulerStep * i)), [(sortedData.padLeft / 2) + \"%\", rulerPosition - (rulerOffset * i) + \"%\"], styles.fontSize, styles.fontColor));\r\n        if (i >= 1) {\r\n            tickArray.push(getPathSVG(\"ytickline\" + i, [[sortedData.padLeft, rulerPosition - (rulerOffset * i)], [100 - sortedData.padLeft, rulerPosition - (rulerOffset * i)]], styles.tickColor, styles.tickLineSize));\r\n        }\r\n    }\r\n\r\n\r\n    let label = getTextSVG(\"ylabeltext\", styles.yName, [(-middleX / 2) / heightMultiplier, sortedData.padLeft * 1.3], styles.fontSize, styles.fontColor);\r\n\r\n    return (\r\n        <svg>\r\n            <g transform='rotate(-90)' >{label}</g>\r\n            {textArray}\r\n            {tickArray}\r\n            {yLine}\r\n        </svg>\r\n    )\r\n}\r\nexport function getZeroLine(sortedData, styles) {\r\n\r\n    if (sortedData.yMin < 0 && sortedData.yMax > 0) {\r\n        let y = sortedData.yLimit - ((0 - sortedData.yMin) * sortedData.yMultiplier) + sortedData.padTop;\r\n        let range = [[], []];\r\n        range = [[sortedData.padLeft, y], [100 - sortedData.padLeft, y]];\r\n        let path = getPathSVG(\"zeroline\", range, styles.zeroLineColor, styles.zeroLineSize, false, .8);\r\n        let text = getTextSVG(\"0LineMark\", \"0\", [100 - sortedData.padLeft / 1.2, y + \"%\"], styles.fontSize, styles.zeroLineColor)\r\n        return (\r\n            <svg>\r\n                {text}\r\n                {path}\r\n            </svg>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n//plot scatter plot points with sorted data and styles\r\n\r\n\r\nexport function GraphPoints(key, sortedData, styles) {\r\n    let circleArray = [];\r\n\r\n    const [selectedPoint, setSelectedPoint] = React.useState([]);\r\n    const [hovered, setHovered] = React.useState([]);\r\n   \r\n\r\n    function handlePointClick(set, pair) {\r\n\r\n        let xVal = sortedData[set].xAscending[pair][0];\r\n        let yVal = sortedData[set].xAscending[pair][1];\r\n        display = styles.xName + \": \" + xVal + \" \" + styles.yName + \": \" + yVal;\r\n        setSelectedPoint([set, pair]);\r\n\r\n    }\r\n    \r\n    for (let set in sortedData) {\r\n        for (let pair in sortedData[set].drawArray) {\r\n            let color = sortedData[set].color;\r\n            let radius = styles.pointSize;\r\n\r\n            if (set === selectedPoint[0] && pair === selectedPoint[1]) {\r\n                color = styles.clickPointColor;\r\n                radius = styles.selectedPointSize;\r\n            }\r\n            if (set === hovered[0] && pair === hovered[1]) {\r\n                radius = styles.selectedPointSize;\r\n            }\r\n\r\n            let xDraw = sortedData[set].drawArray[pair][0];\r\n\r\n            let yDraw = sortedData[set].drawArray[pair][1];\r\n            let mouseOver = () => setHovered([set, pair]);\r\n            let mouseExit = () => setHovered([]);\r\n            let mouseDown = () => { handlePointClick(set, pair) };\r\n            circleArray.push(GetCircleSvg(key + pair + set, color, \"none\", \"none\", xDraw, yDraw, radius, radius, mouseDown, mouseOver, mouseExit));\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return (circleArray);\r\n}\r\nexport function getBoxAxis(sortedData, styles) {\r\n    let width = 100 - (sortedData.padLeft * 2);\r\n    let height = 100 - (sortedData.padTop * 2);\r\n    let box = getRectangleSVG(\"boxAxis\", [sortedData.padLeft, sortedData.padTop], width, height, \"none\", styles.boxAxisColor, styles.axisLineSize, styles.boxRadius)\r\n    let XAxis = getXAxisSVG(sortedData, styles);\r\n    let YAxis = getYAxisSVG(sortedData, styles);\r\n\r\n    return (\r\n        <g>\r\n            {YAxis}{XAxis}{box}\r\n        </g>\r\n    )\r\n}\r\nexport function getCanvasBounds(styles) {\r\n    heightMultiplier = parseInt(styles.canvasWidth) / parseInt(styles.canvasHeight);\r\n    viewBox = \"0 0 100 \" + (100 / heightMultiplier).toString();\r\n}\r\n\r\nexport function LineMarkGraph(data, styles) {\r\n\r\n    let defaults = {\r\n        canvasWidth: \"40vw\",\r\n        canvasHeight: \"40vw\",\r\n        canvasPadLeft: \"1vw\",\r\n        canvasPadTop: \"1vw\",\r\n        lineSize: .2,\r\n        fontSize: 2,\r\n        fontColor: \"#7BA7F0\",\r\n        axisColor: \"#7BA7F0\",\r\n        axisLineSize: .2,\r\n        xTicks: 4,\r\n        yTicks: 4,\r\n        tickColor: \"#E8E8E8\t\",\r\n        tickLineSize: .1,\r\n        clickPointColor: \"#C18FE4\",\r\n        pointSize: 1,\r\n        selectedPointSize: 2,\r\n        xName: \"X-axis\",\r\n        yName: \"Y-axis\",\r\n        zeroLineColor: \"#FFAAAA\",\r\n        zeroLineSize: .3,\r\n        background: \"none\",\r\n    }\r\n\r\n\r\n       \r\n\r\n    //load default data if none present\r\n    if (!data) {\r\n        data = {\r\n            \"#75B8A0\": [[-50, 0], [100, 200], [140, -10], [60, 20], [90, 90]],\r\n            \"#DCDCAA\": [[-25, 160], [115, 91]]\r\n        };\r\n    }\r\n\r\n    if (!styles) {\r\n        //styles = defaults;\r\n        styles = defaults;\r\n    }\r\n    //apply canvas size in styles to global canvas\r\n    getCanvasBounds(styles);\r\n\r\n\r\n    let Paths = [];\r\n    let plots = [];\r\n\r\n\r\n\r\n    //aSquare = getRectangleSVG(\"sq\", [0,0], 100, 20, \"red\");\r\n    //let aCircle = GetCircleSvg(\"circ\", \"blue\", \"none\", \"none\", 90, 90, 1,  );\r\n    \r\n    let combinedData = sortXYArray(data, 80, 80);\r\n    let sortedData = combinedData.sortedData;\r\n    for (let set in sortedData) {\r\n\r\n        let Path = getPathSVG(\"graphPath\" + set, sortedData[set].drawArray, sortedData[set].color, styles.lineSize);\r\n        Paths.push(Path);\r\n\r\n\r\n    }\r\n\r\n    let plot = GraphPoints(\"pointsarray\", sortedData, styles);\r\n    plots.push(plot);\r\n    let XAxis = getXAxisSVG(combinedData, styles);\r\n    let YAxis = getYAxisSVG(combinedData, styles);\r\n    let zeroLine = getZeroLine(combinedData, styles);\r\n\r\n    let displaySVG = getValueDisplay(combinedData, styles);\r\n    \r\n    return (\r\n        <div style={{ position: \"absolute\", top: styles.canvasPadTop, left: styles.canvasPadLeft, width: styles.canvasWidth, height: styles.canvasHeight }}>\r\n            <svg style={{ background: styles.background }} viewBox={viewBox}>\r\n                {zeroLine}{XAxis}{YAxis}{Paths}{plots}{displaySVG}\r\n            </svg>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\n\r\nexport function DrawShapesGraph(data, styles) {\r\n  \r\n\r\n    let defaults = {\r\n        canvasWidth: \"40vw\",\r\n        canvasHeight: \"40vw\",\r\n        canvasPadLeft: 0,\r\n        canvasPadTop: 0,\r\n        lineSize: .2,\r\n        fontSize: 2,\r\n        fontColor: \"#7BA7F0\",\r\n        axisColor: \"none\",\r\n        boxAxisColor: \"#7BA7F0\",\r\n        boxRadius: .5,\r\n        axisLineSize: .2,\r\n        xTicks: 1,\r\n        yTicks: 5,\r\n        tickColor: \"#E8E8E8\t\",\r\n        tickLineSize: .1,\r\n        clickPointColor: \"#C18FE4\",\r\n        pointSize: 1,\r\n        selectedPointSize: 2,\r\n        xName: \"\",\r\n        yName: \"thangz\",\r\n        zeroLineSize: .3,\r\n        background: \"none\",\r\n\r\n    }\r\n\r\n    //load default data if none present\r\n    if (!data) {\r\n        data = {\r\n            \"#DCDCAA\": [[99, 1], [99, 55], [75, 55], [50, 55], [25, 55], [1, 55], [1, 1]],\r\n            \"#75B8A0\": [[99, 1], [99, 30], [75, 25], [50, 30], [25, 30], [1, 30], [1, 1]]\r\n        };\r\n    }\r\n\r\n    if (!styles) {\r\n        styles = defaults;\r\n    }\r\n    getCanvasBounds(styles);\r\n\r\n    let Paths = [];\r\n    \r\n    let combinedData = sortXYArray(data, 80, 80, true, [[0, 0], [100, 100]]);\r\n    let sortedData = combinedData.sortedData;\r\n    for (let set in sortedData) {\r\n\r\n        let Path = getPathSVG(\"graphPath\" + set, sortedData[set].drawArray, sortedData[set].color, styles.lineSize, 0, 0, sortedData[set].color);\r\n        Paths.push(Path);\r\n\r\n\r\n    }\r\n\r\n    let displaySVG = getValueDisplay(combinedData, styles);\r\n    let boxAxis = getBoxAxis(combinedData, styles);\r\n\r\n    return (\r\n        <div style={{ position: \"absolute\", left: styles.canvasPadLeft, top: styles.canvasPadTop, width: styles.canvasWidth, height: styles.canvasHeight }}>\r\n            <svg style={{ background: styles.background }} viewBox={viewBox}>\r\n                {boxAxis}{Paths}{displaySVG}\r\n            </svg>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n//a blank object is getting passed to the first two params for some reason this is a placeholder import as objects\r\nfunction FlexGraph(props, props2, data, styles) {\r\n\r\n    return (LineMarkGraph(data, styles));\r\n}\r\n\r\n\r\nexport default FlexGraph;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport {styles} from './App.js';\r\nimport {calcData} from \"./App.js\";\r\nimport {LineMarkGraph} from './flexgraph.js'\r\n\r\n\r\n\r\n\r\n\r\nfunction Graph()  {\r\n  let graphStyles = {\r\n    canvasWidth: \"36vw\",\r\n    canvasHeight: \"15vw\",\r\n    canvasPadLeft: \"0\",\r\n    canvasPadTop: \"1vw\",\r\n    lineSize: .2,\r\n    fontSize: 2,\r\n    fontColor: styles.gray,\r\n    axisColor: styles.canvasColor,\r\n    axisLineSize: .3,\r\n    xTicks: 4,\r\n    yTicks: 4,\r\n    tickColor: \"#E8E8E8\t\",\r\n    tickLineSize: .1,\r\n    clickPointColor: \"#47C4C1\",\r\n    pointSize: 1,\r\n    selectedPointSize: 2,\r\n    xName: \"DISCOUNT RATE\",\r\n    yName: \"NPV\",\r\n    zeroLineColor: \"#47C4C1\",\r\n    zeroLineSize: .3,\r\n    background: \"none\",\r\n    displayInit: \"DISCOUNT RATE: 0 NPV: 0\",\r\n    displayFontSize: \".15vw\",\r\n    displayFontWeight: \"bold\",\r\n    displayColor: \"black\"\r\n  \r\n  }\r\n\r\n \r\n  let calcInput = [[0,0]];\r\n  if (calcData.npvSnap != 0) {\r\n    calcInput = calcData.npvSnap\r\n  }\r\n\r\n\r\nlet lineColor = styles.gray\r\n  let data = {\r\n    \"#C2C2C2\": calcInput\r\n  };\r\n\r\n\r\n// let styles = [];\r\nlet graph = LineMarkGraph(data, graphStyles);\r\n    \r\n//<FlexibleXYPlot margin={{left: 0, right: 0, top: 0, bottom: 0}}>    \r\n    return (\r\n      <div>\r\n       {graph}\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default Graph;","  \r\nfunction findIRR(cashFlows, initialInv) {\r\n  \r\n    const maxTries = 1000;\r\n    let delta = 1;\r\n    \r\n    let guess = 50;\r\n    const multiplier = NPV(cashFlows, guess, initialInv) > 0 ? 1 : -1;\r\n    let i = 0;\r\n\r\n    function NPV(cashFlows, r, initialInv) {\r\n        let npvOut = null;\r\n        let rDec = r/100;\r\n        let npv = null;\r\n        \r\n        //reset modded cash flows\r\n        for (let flow in cashFlows) {\r\n            let powerOf=parseInt(flow) +  1;\r\n            let discountedFlow = cashFlows[flow] / Math.pow(1 + rDec,  powerOf);\r\n            npv += discountedFlow;\r\n        }\r\n        npvOut = (npv - initialInv);\r\n        return (npvOut);\r\n    }\r\n    \r\n    while ( i < maxTries ) {\r\n       \r\n        \r\n        const guessedNPV = NPV(cashFlows, guess ,initialInv);\r\n        console.log(\"try#  \" + i)\r\n        console.log(\"multiplier \" + multiplier); \r\n        console.log(\"guess \" + guess);\r\n        console.log(\"guessed npv\" + guessedNPV);\r\n        console.log(\"delta \" + delta);\r\n        let multipliedNPV = guessedNPV * multiplier\r\n        if (multipliedNPV > 0) {\r\n            //add the delta, change the size of the guess exponentially depending on how far away it si from zero\r\n            if (delta > .01) {\r\n                delta = Math.pow(multipliedNPV * .01, 2);\r\n            }\r\n            guess += (multiplier * delta);\r\n            i += 1;\r\n        }\r\n        //break if NPV crosses zero\r\n        else break;   \r\n    }\r\n    return [i === maxTries ? \"irr has divergerged\" : guess, i];\r\n    // return (NPV(cashFlows, 0, initialInv));\r\n}\r\n   \r\n\r\nexport default findIRR;","import React from 'react';\nimport Sketch from './sketch'\nimport './App.css';\nimport Graph from './graph.js';\nimport findIRR from './irr.js';\nimport GetDrawData from \"./drawData.js\";\nimport Button from '@material-ui/core/Button';\nimport {getPathSVG} from \"./flexgraph.js\";\nexport var modCashFlows = [];\n\n\n\n\n\n\nlet canvasWidth = window.innerWidth * .9;\nlet canvasHeight = canvasWidth/2.32;\nlet loggedNPVs = [];\n\n\nexport let calcData = {\n  initialInvest: 0,\n  cashFlows: [0],\n  modCashFlows: [],\n  theNPV: 0,\n  npvSnap: [[0,0]],\n  snapGraphX: 0,\n  r: 50,\n  testVar: 0,\n  irr: null,\n  discountFactor: .67,\n  avgNpvYr: 0\n};\nexport let styles = {\n  canvasWidth: canvasWidth,\n  canvasHeight: canvasHeight,\n  canvasColor: \"#E9E9E9\",\n  lightCanvasColor: \"#FFFFFF\",\n  textColor: \"#000000\",\n  innerCashBoxColor: \"#FBFBFB\",\n  medLightGray: \"#D8D8D8\",\n  negativeColor: \"#F50057\",\n  positiveColor: \"#27293E\",\n  darkGray: \"#3A3A3A\",\n  gray: \"#8C8E8E\",\n  irrColor: \"#53DD6C\",\n  npvBtnColor: \"#57A773\",\n  boxRadius: \".5vw\",\n  calcPadLeft: \"8%\",\n  calcPadTop: \"10%\",\n  bottomRowPadTop: \"59%\",\n  firstRowHeight: \"44.5%\",\n  secondRowHeight: \"34%\"\n}\n\nfunction rndNearTenth(num) {\n  return (Math.round(num * 100) / 100).toFixed(2);\n}\n\n\nconst calcCanvas = {\n  position: \"absolute\",\n  left: \"13%\",\n  top: \"0%\",\n  \n  background: styles.canvasColor,\n  height: \"50vw\",\n  width: \"74vw\",\n}\n\nconst calcTitle = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \"1.4vw\",\n  left: styles.calcPadLeft,\n  top: parseInt(styles.calcPadTop) -8 + \"%\",\n}\n//..........CASHBOX......//\n\nconst cashFlowBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: styles.calcPadLeft, \n  background: styles.lightCanvasColor,\n  height: \"30%\",\n  width: \"18%\",\n  borderRadius: \".5vw\"\n}\nconst innerCashBox = {\n  position: \"absolute\",\n  top: \"13%\", \n  background: styles.innerCashBoxColor,\n  height: \"76%\",\n  width: \"100%\",\n  overflowY: \"scroll\",\n  overflowX: \"auto\"\n  //fontWeight: \"800\"\n}\n\nconst cashContents = { \n  fontSize: \"2vw\",\n  width: \"100%\",\n  height:\"2.6vw\",\n  color: styles.positiveColor\n}\nconst negCashContents = { \n  fontSize: \"2vw\",\n  width: \"100%\",\n  height:\"2.6vw\",\n  color: styles.negativeColor\n}\nconst cashInputStyle = {\n  position: \"absolute\",\n  background: \"none\",\n  width: \"57%\",\n  height: \"22%\",\n  left: \"27%\",\n  fontSize: \"1.8vw\",\n  border: \"none\",\n  color: styles.positiveColor\n}\n\nconst negCashInputStyle = {\n  position: \"absolute\",\n  background: \"none\",\n  width: \"57%\",\n  height: \"22%\",\n  left: \"27%\",\n  fontSize: \"1.8vw\",\n  border: \"none\",\n  color: styles.negativeColor\n}\nconst cashBottom= {\n  position: \"absolute\",\n  top: \"88%\",\n  left: \"0%\",\n  width: \"100%\",\n  height: \"12%\",\n  background: \"none\",\n  fontWeight: \"500\",\n  fontSize: \".9vw\",\n  color: styles.darkGray\n}\nconst plusButtonStyle = {\n \n  fill: styles.innerCashBoxColor,\n  color: styles.darkGray,\n  stroke: styles.darkGray,\n  strokeWidth: \"5%\"\n}\nconst plusLineStyle = {\n  stroke: styles.darkGray,\n  strokeWidth: \"5%\"\n}\nconst plusBtnContainer= {\n  position: \"absolute\",\n  paddingLeft: \"70%\",\n  paddingTop: \"3%\"\n}\nconst cashBtmTxt = {\n  position: \"absolute\",\n  top: \"87%\",\n  left: \"29%\",\n  fontSize: \".7vw\",\n  fontWeight: \"medium\"\n \n}\nconst negInitialInvStyle = { \n  fontSize: \"2vw\",\n  width: \"auto\",\n  height:\"2.6vw\",\n  marginLeft: \"15%\",\n  color: styles.negativeColor,\n \n\n}\n\nconst lineBreak = {\n    background: \"#F0F0F0\",\n    height: \"1px\",\n    left: \"15%\",\n    width: \"75%\",\n    position: \"absolute\"\n}\nconst minusButtonStyle = {\n \n  fill: styles.innerCashBoxColor,\n  color: styles.medLightGray,\n  stroke: styles.medLightGray,\n  strokeWidth: \"8%\"\n}\nconst minusLineStyle = {\n  stroke: styles.medLightGray,\n  strokeWidth: \"8%\"\n}\n\n//.....DISCOUNT RATE BOX.........\n\nconst dRateBox = {\n  position: \"absolute\",\n  top: parseInt(styles.calcPadTop) + 32.5 + \"%\",\n  left: styles.calcPadLeft, \n  background: styles.lightCanvasColor,\n  height: \"12%\",\n  width: cashFlowBox.width,\n  borderRadius: styles.boxRadius\n}\nconst sliderStyle = {\n  position: \"absolute\",\n  top: \"60%\",\n  left: \"11%\",\n  background: \"styles.canvasColor\",\n  cursor: \"pointer\",\n  width: \"75%\"\n}\nconst DRateText = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  left: \"13%\"\n}\nconst DFactorText = {\n  position: \"absolute\",\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  left: \"13%\",\n  top: \"20%\"\n}\n//.......SKETCHBOX...........\nconst sketchBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: \"29%\", \n  background: styles.lightCanvasColor,\n  height: styles.firstRowHeight,\n  width: \"41%\",\n  borderRadius: styles.boxRadius\n}\n\n//.....NpvStatBOX.....\n\nconst NpvStatBox = {\n  position: \"absolute\",\n  top: styles.calcPadTop,\n  left: \"73%\", \n  background: styles.lightCanvasColor,\n  height: styles.firstRowHeight,\n  width: \"18.5%\",\n  borderRadius: styles.boxRadius\n}\n\n// const innerNpvStatBox = {\n//   position: \"absolute\",\n//   top: \"65%\", \n//   background: styles.innerCashBoxColor,\n//   height: \"15%\",\n//   width: \"100%\",\n//   overflowY: \"scroll\",\n//   overflowX: \"auto\"\n//   //fontWeight: \"800\"\n// }\n\n\nconst NPVHeader = {\n\n  position: \"relative\",\n  fontWeight: \"medium\",\n  fontSize: \"1.8vw\",\n  top: 0,\n  color: styles.gray,\n  textAlign: \"center\",\n  marginTop: 0\n  \n\n}\n// const histListContents = { \n//   paddingTop: 0,\n//   width: \"100%\",\n//   height:\"30%\",\n//   color: styles.negativeColor\n// }\n\n//......GRAPH BOX.......\n\nconst graphBox = {\n  position: \"absolute\",\n  top: styles.bottomRowPadTop,\n  left: \"44%\", \n  background: styles.lightCanvasColor,\n  height: styles.secondRowHeight,\n  width: \"47.5%\",\n  borderRadius: styles.boxRadius\n}\n\nconst InstructionBox = {\n  position: \"absolute\",\n  top: styles.bottomRowPadTop,\n  left: styles.calcPadLeft, \n  background: '#FAEFC5',\n  height: styles.secondRowHeight,\n  width: \"32.5%\",\n  borderRadius: styles.boxRadius\n}\n\n\nconst header1 = {\n  fontWeight: \"bold\",\n  fontSize: \".8vw\",\n  textAlign: \"center\"\n}\n\n\nconst header3 = {\n  fontWeight: \"bold\",\n  fontSize: \"1.2vw\",\n  textAlign: \"center\"\n}\n\n\nconst arrow1Style = {\n  position: \"static\",\n  background: \"none\",\n  paddingLeft: \"27%\",\n  paddingTop: \"20%\"\n}\n\n\n\n\nconst snapButtonPos = {\n  position: \"absolute\",\n  bottom: \"15%\",\n  left: \"17%\"\n}\nconst histTitle = {\n  position: \"absolute\",\n  fontSize: \"1vw\",\n  bottom: \"33%\",\n  left: \"8%\",\n}\n\nconst histTitle2 = {\n  position: \"absolute\",\n  fontSize: \"1vw\",\n  bottom: \"33%\",\n  right: \"16%\",\n}\nconst instructionTitle = {\n  fontSize: \"1.1vw\",\n  fontFamily: 'Montserrat',\n  textAlign: \"center\",\n  fontWeight: \"bold\"\n}\nconst instructTextStyle = {\n  fontSize: \".6vw\",\n  fontFamily: 'Montserrat',\n  paddingLeft: \"5%\",\n  paddingRight: \"5%\",\n  fontWeight: \"regular\"\n}\nconst instructTextCenter = {\n  fontSize: \".7vw\",\n  paddingLeft: \"5%\",\n  paddingRight: \"5%\",\n  textAlign: \"center\",\n  fontWeight: \"bold\"\n}\nfunction instructionText() {\n  return(\n    <div>\n      <p style={instructionTitle}>INSTRUCTIONS</p>\n      <p style = {instructTextStyle}>1. Enter as many cash flow periods as you'd like. The # inside the dollar sign represents the # of periods in the future where: </p>\n      <p style= {{position: \"absolute\", left: \"12%\", top: \"23%\"}}>{dollSymbol(0, \"black\")}</p>\n     <p style = {instructTextCenter}> = dollars in Period 0 (present day) </p>\n     <p style = {instructTextStyle}>2. When you adjust the discount rate, all future cash flows become \"converted\" into present day units.</p>\n     <a  style= {instructTextStyle} href=\"url\">See part 1 + 2 of NPV Video</a>\n     <p style = {instructTextStyle}>3. More instructions and links will go here in the finished version</p>\n\n    </div>\n  )\n}\n\nfunction dollSymbol(value, color) {\n  let numSize = .6; \n  let numX = \"39%\";\n  let numY = \"86%\";\n  if (value > 9) {\n    numSize= .5;\n    numX = \"31%\"\n    numY = \"85%\"\n  }\n \n  return(\n    \n    <svg style={{position: \"absolute\", background: \"none\"}} height=\"2.6vw\" width=\"1.5vw\" >\n      <text style={{fontSize: \"2vw\", fontWeight: \"400\", fill: color}} x=\"8%\" y=\"75%\">$</text>\n      <circle style={{fill: color}} cx=\"52%\" cy=\"78%\" r=\"18%\"/>\n      <text style={{fontSize: numSize + \"vw\", fontWeight: \"700\", fill: styles.innerCashBoxColor}} x={numX} y={numY}>{value}</text>\n    </svg>\n    \n  ) \n}\n\n\n//the bottom arrow is getting shifted up whenever the page reloads for some reason\nfunction arrow() {\n  let bottomArrowLeft = 74;\n  let bottomArrowTop = 58;\n  let firstArrow = getPathSVG(\"drawArrow\", [[0,0], [0,6], [1.5,3]], \"none\", 0, 0, 0, \"black\")\n  let secondArrow = getPathSVG(\"secondarrow\", [[60,0], [60,6], [61.5,3]], \"none\", 0, 0, 0, \"black\")\n  let thirdArrow = getPathSVG(\"thirdarrow\", [[bottomArrowLeft,bottomArrowTop], [bottomArrowLeft+3.5,bottomArrowTop], [bottomArrowLeft+1.75,bottomArrowTop + 3]], \"none\", 0, 0, 0, \"black\")\n  let viewBox = \"0 0 100 100\";\n\n  return ( <svg viewBox = {viewBox} >{firstArrow}{secondArrow}{thirdArrow}</svg>)\n  \n};\n\nfunction App() {\n\n\n\n//hook that makes sure dom is rerendered if a button is clicked, even if theNpv hasn't changed\nconst [npvRan, setNpvRan] = React.useState(0);\ncalcData.testVar = npvRan;\n//console.log( \"irr \" + findIRR([100], 100));\nlet zeroCashInputStyle = {\n  \n  position: \"absolute\",\n  background: \"none\",\n  width: \"80%\",\n  height: \"22%\",\n  fontSize: \".7vw\",\n  border: \"none\",\n  color: styles.negativeColor\n}\nfunction handleCashFlowChange() {\n  findNPV(calcData.cashFlows, calcData.r, calcData.initialInvest);\n  calcData.npvSnap = [[0,0]];      \n  loggedNPVs = [];\n}\nfunction minusButton(value) {\n  return(\n      <svg height=\"1.2vw\" width=\"2vw\" onClick= {() => {calcData.cashFlows.splice(value,1); handleCashFlowChange()} } >\n  \n        <circle style={minusButtonStyle} cx=\"56%\" cy=\"50%\" r=\"32%\"/>\n        <line style={minusLineStyle} x1=\"44%\" y1=\"50%\" x2=\"67%\" y2=\"50%\"/>    \n      </svg>\n  )\n}\n\nfunction autoButton() {\n  return (\n    <div>\n      <button onClick= {() => {calcData.irr = Math.round((findIRR(calcData.cashFlows, calcData.initialInvest)[0]) * 100) / 100; setNpvRan(npvRan + 1) }}>AUTO IRR</button>\n      <p>irr:{calcData.irr}</p>\n    </div>\n    )\n}\n \nfunction cashFlowPlusBtn() {\n  return(\n    <svg height=\"1.3vw\" width=\"1.3vw\" style={plusBtnContainer} onClick= {() => {if (calcData.initialInvest != \"\"){ calcData.cashFlows.push(0); handleCashFlowChange()}} } >   \n      <circle style={plusButtonStyle} cx=\"50%\" cy=\"50%\" r=\"38%\"/>\n      <line style={plusLineStyle} x1=\"30%\" y1=\"50%\" x2=\"70%\" y2=\"50%\"/>    \n      <line style={plusLineStyle} x1=\"50%\" y1=\"70%\" x2=\"50%\" y2=\"30%\"/> \n    </svg>\n  ) \n}\n\n\n// function dollSymbol(value, color) {\n//   let numSize = .6; \n//   let numX = \"39%\";\n//   let numY = \"86%\";\n//   if (value > 9) {\n//     numSize= .5;\n//     numX = \"31%\"\n//     numY = \"85%\"\n//   }\n \n//   return(\n    \n//     <svg style={{position: \"absolute\", background: \"none\"}} height=\"2.6vw\" width=\"1.5vw\" >\n//       <text style={{fontSize: \"2.2vw\", fontWeight: \"400\", fill: color}} x=\"4%\" y=\"80%\">$</text>\n//       <circle style={{fill: color}} cx=\"52%\" cy=\"78%\" r=\"18%\"/>\n//       <text style={{fontSize: numSize + \"vw\", fontWeight: \"700\", fill: styles.innerCashBoxColor}} x={numX} y={numY}>{value}</text>\n//     </svg>\n    \n//   ) \n// }\nfunction snapNPVBtn() {\n  return (<Button style={{position: \"absolute\", width: \"10vw\", fontSize: \"1vw\", background: styles.gray, color: styles.lightCanvasColor, fontFamily: 'Fira Code', padding: 0, left: \"-.4vw\", width: \"10vw\", height: \"2vw\"}} variant=\"contained\"  onClick ={ () => {handleNPVSnap()}}  >PLOT ON GRAPH</Button>)\n  //return (<button style={snapNPVBtnStyle} name=\"npvsnap\" onClick ={ () => {calcData.npvSnap.push({x: calcData.r, y: calcData.theNPV }); calcData.snapGraphX++; setNpvRan(npvRan + 1); }}>FIND NPV</button>  )\n}\nfunction handleNPVSnap() {\n  if (calcData.initialInvest != \"\") {\n    calcData.npvSnap.unshift([calcData.r, calcData.theNPV]); \n    setNpvRan(npvRan + 1); \n  }\n}\n\n// function logNPV() {\n \n//   loggedNPVs.unshift(\n//     <div style = {histListContents}>\n//       <svg style={{ position: \"absolute\", background: \"none\"}} height=\"30%\" width=\"100%\">\n//         <text style={{ fontSize: \"1.2vw\" }} x=\"0\" y=\"70%\">{calcData.theNPV.toFixed(2)}</text>\n//         <text style={{ fontSize: \"1.2vw\" }} x=\"75%\" y=\"70%\">{calcData.r}%</text>\n//       </svg>\n//     </div>\n//     )\n// }\n\n\nfunction CashFlowContents() {\n  let dollColor = styles.negativeColor;\n \n\n  if (calcData.initialInvest === \"\") {\n    zeroCashInputStyle.fontSize = \".8vw\";\n  }\n  else if (calcData.initialInvest >= 0 && calcData.initialInvest != \"\") {\n    zeroCashInputStyle.fontSize = \"2vw\";\n    zeroCashInputStyle.color = styles.negativeColor;\n  }\n  else if (calcData.initialInvest < 0) {\n    zeroCashInputStyle.fontSize = \"2vw\";\n    zeroCashInputStyle.color = styles.positiveColor;\n    dollColor = styles.positiveColor;\n  }\n  let contents = [];\n\n      contents.push(\n        <div>\n          <div style={{position: \"absolute\", left: \"2%\", bottom: \"100%\"}}>{dollSymbol(0, dollColor)}</div>\n          <div style={negInitialInvStyle}>        \n            <input style={zeroCashInputStyle} placeholder=\"<Enter Initial Investment Here>\"  key={\"inINVhold\"}  type=\"text\" name ={\"initialInv\"} onChange={(event) => {calcData.initialInvest = event.target.value; handleCashFlowChange()}} />  \n          </div>\n          <div style={lineBreak}/>\n        </div>\n      )\n\n  \n\n  for (let value in calcData.cashFlows) {\n    if (calcData.cashFlows[value] < 0){\n      contents.push(\n        <div>\n          <div style={negCashContents}>\n            {minusButton(value)} \n            {dollSymbol(parseInt(value) + 1, styles.negativeColor)}  \n            <input style={negCashInputStyle} key={\"cashflow\" + value} value={calcData.cashFlows[value]} type=\"text\" name ={value + \"cashFlow\"} onChange={(event) => {calcData.cashFlows[value] = event.target.value; handleCashFlowChange()}} />  \n          </div>\n          <div style={lineBreak}/>\n        </div>\n        )\n\n    }\n    else {\n    contents.push(\n      <div>\n        <div style={cashContents} >\n          {minusButton(value)} \n          {dollSymbol(parseInt(value) + 1, styles.positiveColor)}   \n          <input style={cashInputStyle} key={\"cashflow\" + value} value={calcData.cashFlows[value]} type=\"text\" name ={value + \"cashFlow\"} onChange={(event) => {calcData.cashFlows[value] = event.target.value; handleCashFlowChange()}} />  \n        </div>\n        <div style={lineBreak}/>\n      </div>\n      )\n    }\n  }\n \n  return (contents)\n}\nfunction DiscountRateSlider() {\n  return(\n    <input type=\"range\" min=\"0\" max=\"100\" step=\"1\"  style={sliderStyle} name =\"ROR\" onChange={(event) => {calcData.r = event.target.value; calcData.discountFactor = rndNearTenth(1/ (1 + (calcData.r/100))); findNPV(calcData.cashFlows, calcData.r, calcData.initialInvest)}} />\n  )   \n}\n\n\n\nreturn (\n  <div style={calcCanvas}>\n    \n    <p style={calcTitle}>NET PRESENT VALUE CALCULATOR</p>\n    <div style={arrow1Style}>{arrow()}</div>\n    <div style={cashFlowBox}><p style={header1}>CASH FLOWS</p>\n      <div style={innerCashBox}>{CashFlowContents()}</div>\n      <div style={cashBottom}>{cashFlowPlusBtn()}</div>\n      <p style={cashBtmTxt}>Add another</p>\n    </div>\n\n    <div style={dRateBox}>\n      <p style={DRateText}>DISCOUNT RATE: {calcData.r}%</p>\n      \n      <p style={DFactorText}>DISCOUNT FACTOR: {calcData.discountFactor}</p>\n      {DiscountRateSlider()}\n    </div>\n\n    <div style={sketchBox}>\n      <p style={header1}>ADJUSTED CASH FLOWS</p>\n      <Sketch/>\n    </div>\n    \n    <div style={NpvStatBox}>\n      <p style={header1}>NET PRESENT VALUE</p>  \n      <p style={NPVHeader}>{calcData.theNPV}</p> \n      <p style={header1}>AVG NPV PER YEAR</p>  \n      <p style={NPVHeader}>{calcData.avgNpvYr}</p>     \n      <div style={snapButtonPos}>{snapNPVBtn()}</div>\n    </div>\n\n    <div style ={graphBox}>\n \n      <Graph/>\n    </div>\n\n    <div style ={InstructionBox}>{instructionText()}</div>\n\n    \n    \n  </div>\n)\n\n  function findNPV(cashFlows, r, initialInvestValue) {\n    //push r value to interface \n   \n    //ensures DOM will update even if npv didnt change\n    setNpvRan(npvRan + 1);\n    \n  \n    calcData.initialInvest = initialInvestValue;\n    let npvOut = null;\n    let rDec = r/100;\n    let npv = null;\n    //reset modded cash flows\n    calcData.modCashFlows = [];\n    calcData.modCashFlows.push(calcData.initialInvest * -1);\n    for (let flow in cashFlows) {\n     let powerOf=parseInt(flow) +  1;\n     let discountedFlow = cashFlows[flow] / Math.pow(1 + rDec,  powerOf);\n     calcData.modCashFlows.push(discountedFlow);\n     npv += discountedFlow;\n    }\n   \n    npvOut =  Math.round((npv - calcData.initialInvest) * 100) / 100;\n    calcData.avgNpvYr = (npvOut/cashFlows.length).toFixed(2);\n    calcData.theNPV = npvOut.toFixed(2);\n    \n    //return (npvOut);\n  }\n  //{calcData.cashFlows.map((number) => <li key ={number.toString()}>{number}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n} \n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}